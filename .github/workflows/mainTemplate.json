{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1008.15138",
      "templateHash": "12332786085499410203"
    }
  },
  "parameters": {
    "_artifactsLocation": {
      "type": "string",
      "defaultValue": "[deployment().properties.templateLink.uri]"
    },
    "_artifactsLocationSasToken": {
      "type": "secureString",
      "defaultValue": ""
    },
    "aciResourcePermissions": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "true to use resource or workspace permissions. false to require workspace permissions."
      }
    },
    "aciRetentionInDays": {
      "type": "int",
      "defaultValue": 120,
      "metadata": {
        "description": "Number of days to retain data in Azure Monitor workspace."
      }
    },
    "aciWorkspaceSku": {
      "type": "string",
      "defaultValue": "pergb2018",
      "metadata": {
        "description": "Pricing tier: PerGB2018 or legacy tiers (Free, Standalone, PerNode, Standard or Premium) which are not available to all customers."
      }
    },
    "acrName": {
      "type": "string",
      "defaultValue": "acr-contoso"
    },
    "aksAgentPoolName": {
      "type": "string",
      "defaultValue": "agentpool",
      "metadata": {
        "description": "The name for this node pool. Node pool must contain only lowercase letters and numbers. For Linux node pools the name cannot be longer than 12 characters."
      },
      "minLength": 1,
      "maxLength": 12
    },
    "aksAgentPoolNodeCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "The number of nodes that should be created along with the cluster. You will be able to resize the cluster later."
      },
      "minValue": 1,
      "maxValue": 10000
    },
    "aksAgentPoolVMSize": {
      "type": "string",
      "defaultValue": "Standard_DS2_v2",
      "metadata": {
        "description": "The size of the virtual machines that will form the nodes in the cluster. This cannot be changed after creating the cluster"
      }
    },
    "aksClusterNamePrefix": {
      "type": "string",
      "defaultValue": "wlsonaks",
      "metadata": {
        "description": "Prefix for cluster name. Only The name can contain only letters, numbers, underscores and hyphens. The name must start with letter or number."
      }
    },
    "aksClusterRGName": {
      "type": "string",
      "defaultValue": "aks-contoso-rg",
      "metadata": {
        "description": "Resource group name of an existing AKS cluster."
      }
    },
    "aksClusterName": {
      "type": "string",
      "defaultValue": "aks-contoso",
      "metadata": {
        "description": "Name of an existing AKS cluster."
      }
    },
    "aksVersion": {
      "type": "string",
      "defaultValue": "default",
      "metadata": {
        "description": "The AKS version."
      }
    },
    "appGatewayCertificateOption": {
      "type": "string",
      "defaultValue": "haveCert",
      "metadata": {
        "description": "Three scenarios we support for deploying app gateway"
      },
      "allowedValues": [
        "haveCert",
        "haveKeyVault",
        "generateCert"
      ]
    },
    "appGatewayPublicIPAddressName": {
      "type": "string",
      "defaultValue": "gwip",
      "metadata": {
        "description": "Public IP Name for the Application Gateway"
      }
    },
    "appGatewaySSLBackendRootCertData": {
      "type": "string",
      "defaultValue": "appgw-ssl-backend-data",
      "metadata": {
        "description": "The one-line, base64 string of the backend SSL root certificate data."
      }
    },
    "appGatewaySSLCertData": {
      "type": "string",
      "defaultValue": "appgw-ssl-data",
      "metadata": {
        "description": "The one-line, base64 string of the SSL certificate data."
      }
    },
    "appGatewaySSLCertPassword": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "The value of the password for the SSL Certificate"
      }
    },
    "appgwForAdminServer": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Create Application Gateway ingress for admin console."
      }
    },
    "appgwForRemoteConsole": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Create Application Gateway ingress for remote console."
      }
    },
    "appPackageUrls": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Urls of Java EE application packages."
      }
    },
    "appReplicas": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The number of managed server to start."
      }
    },
    "createACR": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "true to create a new Azure Container Registry."
      }
    },
    "createAKSCluster": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "true to create a new AKS cluster."
      }
    },
    "createDNSZone": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "If true, the template will update records to the existing DNS Zone. If false, the template will create a new DNS Zone."
      }
    },
    "databaseType": {
      "type": "string",
      "defaultValue": "oracle",
      "metadata": {
        "description": "One of the supported database types"
      },
      "allowedValues": [
        "oracle",
        "postgresql",
        "sqlserver"
      ]
    },
    "dbConfigurationType": {
      "type": "string",
      "defaultValue": "createOrUpdate",
      "metadata": {
        "description": "createOrUpdate: create a new data source connection, or update an existing data source connection. delete: delete an existing data source connection"
      },
      "allowedValues": [
        "createOrUpdate",
        "delete"
      ]
    },
    "dbPassword": {
      "type": "string",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Password for Database"
      }
    },
    "dbUser": {
      "type": "string",
      "defaultValue": "contosoDbUser",
      "metadata": {
        "description": "User id of Database"
      }
    },
    "dnsNameforApplicationGateway": {
      "type": "string",
      "defaultValue": "wlsgw",
      "metadata": {
        "description": "DNS prefix for ApplicationGateway"
      }
    },
    "dnszoneAdminConsoleLabel": {
      "type": "string",
      "defaultValue": "admin",
      "metadata": {
        "description": "Specify a label used to generate subdomain of Admin server. The final subdomain name will be label.dnszoneName, e.g. admin.contoso.xyz"
      }
    },
    "dnszoneAdminT3ChannelLabel": {
      "type": "string",
      "defaultValue": "admin-t3",
      "metadata": {
        "description": "Specify a label used to generate subdomain of Admin server T3 channel. The final subdomain name will be label.dnszoneName, e.g. admin-t3.contoso.xyz"
      }
    },
    "dnszoneClusterLabel": {
      "type": "string",
      "defaultValue": "www",
      "metadata": {
        "description": "Specify a label used to generate subdomain of WebLogic cluster. The final subdomain name will be label.dnszoneName, e.g. applications.contoso.xyz"
      }
    },
    "dnszoneClusterT3ChannelLabel": {
      "type": "string",
      "defaultValue": "cluster-t3"
    },
    "dnszoneName": {
      "type": "string",
      "defaultValue": "contoso.xyz",
      "metadata": {
        "description": "Azure DNS Zone name."
      }
    },
    "dnszoneRGName": {
      "type": "string",
      "defaultValue": "dns-contoso-rg"
    },
    "dsConnectionURL": {
      "type": "string",
      "defaultValue": "jdbc:postgresql://contoso.postgres.database.azure.com:5432/postgres",
      "metadata": {
        "description": "JDBC Connection String"
      }
    },
    "enableAppGWIngress": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "true to set up Application Gateway ingress."
      }
    },
    "enableAzureMonitoring": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "In addition to the CPU and memory metrics included in AKS by default, you can enable Container Insights for more comprehensive data on the overall performance and health of your cluster. Billing is based on data ingestion and retention settings."
      }
    },
    "enableAzureFileShare": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "true to create persistent volume using file share."
      }
    },
    "enableCookieBasedAffinity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "true to enable cookie based affinity."
      }
    },
    "enableCustomSSL": {
      "type": "bool",
      "defaultValue": false
    },
    "enableDB": {
      "type": "bool",
      "defaultValue": false
    },
    "enableDNSConfiguration": {
      "type": "bool",
      "defaultValue": false
    },
    "enableAdminT3Tunneling": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Configure a custom channel in Admin Server for the T3 protocol that enables HTTP tunneling"
      }
    },
    "enableClusterT3Tunneling": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Configure a custom channel in WebLogic cluster for the T3 protocol that enables HTTP tunneling"
      }
    },
    "identity": {
      "type": "object",
      "metadata": {
        "description": "An user assigned managed identity. Make sure the identity has permission to create/update/delete/list Azure resources."
      }
    },
    "jdbcDataSourceName": {
      "type": "string",
      "defaultValue": "jdbc/contoso",
      "metadata": {
        "description": "JNDI Name for JDBC Datasource"
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "kv-contoso",
      "metadata": {
        "description": "Existing Key Vault Name"
      }
    },
    "keyVaultResourceGroup": {
      "type": "string",
      "defaultValue": "kv-contoso-rg",
      "metadata": {
        "description": "Resource group name in current subscription containing the KeyVault"
      }
    },
    "keyVaultSku": {
      "type": "string",
      "defaultValue": "Standard",
      "metadata": {
        "description": "Price tier for Key Vault."
      }
    },
    "keyVaultSSLBackendRootCertDataSecretName": {
      "type": "string",
      "defaultValue": "kv-ssl-backend-data",
      "metadata": {
        "description": "The name of the secret in the specified KeyVault whose value is the SSL Root Certificate Data for Appliation Gateway backend TLS/SSL."
      }
    },
    "keyVaultSSLCertDataSecretName": {
      "type": "string",
      "defaultValue": "kv-ssl-data",
      "metadata": {
        "description": "The name of the secret in the specified KeyVault whose value is the SSL Certificate Data for Appliation Gateway frontend TLS/SSL."
      }
    },
    "keyVaultSSLCertPasswordSecretName": {
      "type": "string",
      "defaultValue": "kv-ssl-psw",
      "metadata": {
        "description": "The name of the secret in the specified KeyVault whose value is the password for the SSL Certificate of Appliation Gateway frontend TLS/SSL"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "eastus"
    },
    "lbSvcValues": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Object array to define Load Balancer service, each object must include service name, service target[admin-server or cluster-1], port."
      }
    },
    "managedServerPrefix": {
      "type": "string",
      "defaultValue": "managed-server",
      "metadata": {
        "description": "Name prefix of managed server."
      }
    },
    "ocrSSOPSW": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Password of Oracle SSO account."
      }
    },
    "ocrSSOUser": {
      "type": "string",
      "defaultValue": "null",
      "metadata": {
        "description": "User name of Oracle SSO account."
      }
    },
    "servicePrincipal": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Base64 string of service principal. use the command to generate a testing string: az ad sp create-for-rbac --sdk-auth | base64 -w0"
      }
    },
    "sslConfigurationAccessOption": {
      "type": "string",
      "defaultValue": "uploadConfig",
      "metadata": {
        "description": "Two scenarios to refer to WebLogic Server TLS/SSL certificates."
      },
      "allowedValues": [
        "uploadConfig",
        "keyVaultStoredConfig"
      ]
    },
    "sslKeyVaultCustomIdentityKeyStoreDataSecretName": {
      "type": "string",
      "defaultValue": "kv-wls-identity-data",
      "metadata": {
        "description": "Secret name in KeyVault containing Weblogic Custom Identity Keystore Data"
      }
    },
    "sslKeyVaultCustomIdentityKeyStorePassPhraseSecretName": {
      "type": "string",
      "defaultValue": "kv-wls-identity-psw",
      "metadata": {
        "description": "Secret name in KeyVault containing Weblogic Custom Identity Keystore Passphrase"
      }
    },
    "sslKeyVaultCustomIdentityKeyStoreType": {
      "type": "string",
      "defaultValue": "PKCS12",
      "allowedValues": [
        "JKS",
        "PKCS12"
      ],
      "metadata": {
        "description": "Weblogic Custom Identity Keystore type"
      }
    },
    "sslKeyVaultCustomTrustKeyStoreDataSecretName": {
      "type": "string",
      "defaultValue": "kv-wls-trust-data",
      "metadata": {
        "description": "Secret name in KeyVault containing Weblogic Custom Trust Store Data"
      }
    },
    "sslKeyVaultCustomTrustKeyStorePassPhraseSecretName": {
      "type": "string",
      "defaultValue": "kv-wls-trust-psw",
      "metadata": {
        "description": "Secret name in KeyVault containing Weblogic Custom Trust Store Passphrase"
      }
    },
    "sslKeyVaultCustomTrustKeyStoreType": {
      "type": "string",
      "defaultValue": "PKCS12",
      "allowedValues": [
        "JKS",
        "PKCS12"
      ],
      "metadata": {
        "description": "WWeblogic Custom Trust Store type"
      }
    },
    "sslKeyVaultName": {
      "type": "string",
      "defaultValue": "kv-wls-ssl-name",
      "metadata": {
        "description": "Resource group containing Weblogic SSL certificates"
      }
    },
    "sslKeyVaultPrivateKeyAliasSecretName": {
      "type": "string",
      "defaultValue": "contoso",
      "metadata": {
        "description": "Secret name in KeyVault containing Weblogic Server private key alias"
      }
    },
    "sslKeyVaultPrivateKeyPassPhraseSecretName": {
      "type": "string",
      "defaultValue": "kv-wls-ssl-alias",
      "metadata": {
        "description": "Secret name in KeyVault containing Weblogic Server private key passphrase"
      }
    },
    "sslKeyVaultResourceGroup": {
      "type": "string",
      "defaultValue": "rg-kv-wls-ssl-name",
      "metadata": {
        "description": "Keyvault name containing Weblogic SSL certificates"
      }
    },
    "sslUploadedCustomIdentityKeyStoreData": {
      "type": "string",
      "defaultValue": "null",
      "metadata": {
        "description": "Custom Identity Store Data"
      }
    },
    "sslUploadedCustomIdentityKeyStorePassphrase": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Custom Identity Store passphrase"
      }
    },
    "sslUploadedCustomIdentityKeyStoreType": {
      "type": "string",
      "defaultValue": "PKCS12",
      "allowedValues": [
        "JKS",
        "PKCS12"
      ],
      "metadata": {
        "description": "Weblogic Custom Identity Store Type"
      }
    },
    "sslUploadedCustomTrustKeyStoreData": {
      "type": "string",
      "defaultValue": "null",
      "metadata": {
        "description": "Custom Trust Store data"
      }
    },
    "sslUploadedCustomTrustKeyStorePassPhrase": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Custom Trust Store passphrase"
      }
    },
    "sslUploadedCustomTrustKeyStoreType": {
      "type": "string",
      "defaultValue": "PKCS12",
      "allowedValues": [
        "JKS",
        "PKCS12"
      ],
      "metadata": {
        "description": "Weblogic Custom Trust Store Type"
      }
    },
    "sslUploadedPrivateKeyAlias": {
      "type": "string",
      "defaultValue": "contoso",
      "metadata": {
        "description": "Alias of the private key"
      }
    },
    "sslUploadedPrivateKeyPassPhrase": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Password of the private key"
      }
    },
    "t3ChannelAdminPort": {
      "type": "int",
      "defaultValue": 7005,
      "metadata": {
        "description": "Public port of the custom T3 channel in admin server"
      }
    },
    "t3ChannelClusterPort": {
      "type": "int",
      "defaultValue": 8011,
      "metadata": {
        "description": "Public port of the custom T3 channel in WebLoigc cluster"
      }
    },
    "useInternalLB": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "True to set up internal load balancer service."
      }
    },
    "utcValue": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "ture to upload Java EE applications and deploy the applications to WebLogic domain."
      }
    },
    "userProvidedAcr": {
      "type": "string",
      "defaultValue": "null",
      "metadata": {
        "description": "User provided ACR for base image"
      }
    },
    "userProvidedImagePath": {
      "type": "string",
      "defaultValue": "null",
      "metadata": {
        "description": "User provided base image path"
      }
    },
    "useOracleImage": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Use Oracle images or user provided patched images"
      }
    },
    "wdtRuntimePassword": {
      "type": "secureString",
      "metadata": {
        "description": "Password for model WebLogic Deploy Tooling runtime encrytion."
      }
    },
    "wlsClusterSize": {
      "type": "int",
      "defaultValue": 5,
      "metadata": {
        "description": "Maximum cluster size."
      }
    },
    "wlsCPU": {
      "type": "string",
      "defaultValue": "200m",
      "metadata": {
        "description": "Requests for CPU resources for admin server and managed server."
      }
    },
    "wlsDomainName": {
      "type": "string",
      "defaultValue": "domain1",
      "metadata": {
        "description": "Name of WebLogic domain to create."
      }
    },
    "wlsDomainUID": {
      "type": "string",
      "defaultValue": "sample-domain1",
      "metadata": {
        "description": "UID of WebLogic domain, used in WebLogic Operator."
      }
    },
    "wlsImageTag": {
      "type": "string",
      "defaultValue": "12.2.1.4",
      "metadata": {
        "description": "Docker tag that comes after \"container-registry.oracle.com/middleware/weblogic:\""
      }
    },
    "wlsJavaOption": {
      "type": "string",
      "defaultValue": "null"
    },
    "wlsMemory": {
      "type": "string",
      "defaultValue": "1.5Gi",
      "metadata": {
        "description": "Memory requests for admin server and managed server."
      }
    },
    "wlsPassword": {
      "type": "secureString"
    },
    "wlsUserName": {
      "type": "string",
      "defaultValue": "weblogic",
      "metadata": {
        "description": "User name for WebLogic Administrator."
      }
    }
  },
  "functions": [],
  "variables": {
    "const_appGatewaySSLCertOptionHaveCert": "haveCert",
    "const_appGatewaySSLCertOptionHaveKeyVault": "haveKeyVault",
    "const_azureSubjectName": "[format('{0}', format('{0}.{1}.{2}', variables('name_domainLabelforApplicationGateway'), parameters('location'), 'cloudapp.azure.com'))]",
    "const_hasTags": "[contains(resourceGroup(), 'tags')]",
    "const_bCreateNewKeyVault": "[and(or(or(not(variables('const_hasTags')), not(contains(resourceGroup().tags, variables('name_tagNameForKeyVault')))), empty(resourceGroup().tags.wlsKeyVault)), or(and(parameters('enableCustomSSL'), not(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')))), and(parameters('enableAppGWIngress'), not(equals(parameters('appGatewayCertificateOption'), variables('const_appGatewaySSLCertOptionHaveKeyVault'))))))]",
    "const_defaultKeystoreType": "PKCS12",
    "const_enableNetworking": "[or(greater(length(parameters('lbSvcValues')), 0), parameters('enableAppGWIngress'))]",
    "const_enablePV": "[or(parameters('enableCustomSSL'), parameters('enableAzureFileShare'))]",
    "const_identityKeyStoreType": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultCustomIdentityKeyStoreType'), parameters('sslUploadedCustomIdentityKeyStoreType'))]",
    "const_keyvaultNameFromTag": "[if(and(variables('const_hasTags'), contains(resourceGroup().tags, variables('name_tagNameForKeyVault'))), resourceGroup().tags.wlsKeyVault, '')]",
    "const_trustKeyStoreType": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultCustomTrustKeyStoreType'), parameters('sslUploadedCustomTrustKeyStoreType'))]",
    "const_wlsJavaOptions": "[if(equals(parameters('wlsJavaOption'), ''), 'null', parameters('wlsJavaOption'))]",
    "const_wlsSSLCertOptionKeyVault": "keyVaultStoredConfig",
    "name_defaultPidDeployment": "pid",
    "name_dnsNameforApplicationGateway": "[format('{0}', concat(parameters('dnsNameforApplicationGateway'), take(parameters('utcValue'), 6)))]",
    "name_domainLabelforApplicationGateway": "[format('{0}', take(concat(variables('name_dnsNameforApplicationGateway'), '-', toLower(variables('name_rgNameWithoutSpecialCharacter')), '-', toLower(parameters('wlsDomainName'))), 63))]",
    "name_identityKeyStoreDataSecret": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultCustomIdentityKeyStoreDataSecretName'), 'myIdentityKeyStoreData')]",
    "name_identityKeyStorePswSecret": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultCustomIdentityKeyStorePassPhraseSecretName'), 'myIdentityKeyStorePsw')]",
    "name_keyVaultName": "[if(empty(variables('const_keyvaultNameFromTag')), format('{0}', take(concat('wls-kv', uniqueString(parameters('utcValue'))), 24)), resourceGroup().tags.wlsKeyVault)]",
    "name_privateKeyAliasSecret": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultPrivateKeyAliasSecretName'), 'privateKeyAlias')]",
    "name_privateKeyPswSecret": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultPrivateKeyPassPhraseSecretName'), 'privateKeyPsw')]",
    "name_rgNameWithoutSpecialCharacter": "[replace(replace(replace(replace(resourceGroup().name, '.', ''), '(', ''), ')', ''), '_', '')]",
    "name_rgKeyvaultForWLSSSL": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultResourceGroup'), resourceGroup().name)]",
    "name_tagNameForKeyVault": "wlsKeyVault",
    "name_tagNameForStorageAccount": "wlsStorageAccount",
    "name_trustKeyStoreDataSecret": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultCustomTrustKeyStoreDataSecretName'), 'myTrustKeyStoreData')]",
    "name_trustKeyStorePswSecret": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultCustomTrustKeyStorePassPhraseSecretName'), 'myTrustKeyStorePsw')]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/tags",
      "apiVersion": "2021-04-01",
      "name": "default",
      "properties": {
        "tags": {
          "[format('{0}', variables('name_tagNameForKeyVault'))]": "[if(variables('const_bCreateNewKeyVault'), variables('name_keyVaultName'), variables('const_keyvaultNameFromTag'))]",
          "[format('{0}', variables('name_tagNameForStorageAccount'))]": "[if(or(and(or(parameters('createAKSCluster'), not(and(not(parameters('createAKSCluster')), not(equals(reference('query-existing-storage-account').outputs.storageAccount.value, 'null'))))), variables('const_enablePV')), and(not(parameters('createAKSCluster')), not(equals(reference('query-existing-storage-account').outputs.storageAccount.value, 'null')))), if(and(not(parameters('createAKSCluster')), not(equals(reference('query-existing-storage-account').outputs.storageAccount.value, 'null'))), reference('query-existing-storage-account').outputs.storageAccount.value, format('wls{0}', uniqueString(parameters('utcValue')))), '')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'appgateway-certificates-secrets-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "initialization",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "8805472380936134177"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "pid"
            }
          },
          "functions": [],
          "resources": [
            {
              "condition": "[not(equals(parameters('name'), 'pid'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "[parameters('name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "14669053462841078328"
                    }
                  },
                  "functions": [],
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "appgwEnd": {
              "type": "string",
              "value": "38647ff6-ea8d-59e5-832d-b036a4d29c73"
            },
            "appgwStart": {
              "type": "string",
              "value": "8ba7beaa-96fd-576a-acd8-28f7a6efa83a"
            },
            "dbEnd": {
              "type": "string",
              "value": "ffab0a3f-90cb-585a-a7f9-ec0a62faeec1"
            },
            "dbStart": {
              "type": "string",
              "value": "e64361eb-fea0-5f15-a313-c76daadbc648"
            },
            "networkingEnd": {
              "type": "string",
              "value": "39d32fcd-1d02-50b6-9455-4b767a8e769e"
            },
            "networkingStart": {
              "type": "string",
              "value": "ed47756f-2475-56dd-b13a-26027749b6e1"
            },
            "wlsAKSEnd": {
              "type": "string",
              "value": "17328b4d-841f-57b5-a9c5-861ad48f9d0d"
            },
            "wlsAKSStart": {
              "type": "string",
              "value": "c46a11b1-e8d2-5053-9741-45294b2e15c9"
            },
            "wlsClusterAppEnd": {
              "type": "string",
              "value": "18121d1c-4227-51ff-a9fa-ceb890d683e3"
            },
            "wlsClusterAppStart": {
              "type": "string",
              "value": "4218fc54-4b9b-5e5c-b6a9-bc8736c25b68"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "pid-a1775ed4-512c-4cfa-9e68-f0b09b36de90-partnercenter",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "14669053462841078328"
            }
          },
          "functions": [],
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "validate-parameters-and-fail-fast",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "acrName": {
            "value": "[parameters('acrName')]"
          },
          "aksAgentPoolNodeCount": {
            "value": "[parameters('aksAgentPoolNodeCount')]"
          },
          "aksAgentPoolVMSize": {
            "value": "[parameters('aksAgentPoolVMSize')]"
          },
          "aksClusterRGName": {
            "value": "[parameters('aksClusterRGName')]"
          },
          "aksClusterName": {
            "value": "[parameters('aksClusterName')]"
          },
          "appGatewayCertificateOption": {
            "value": "[parameters('appGatewayCertificateOption')]"
          },
          "appGatewaySSLCertData": {
            "value": "[parameters('appGatewaySSLCertData')]"
          },
          "appGatewaySSLCertPassword": {
            "value": "[parameters('appGatewaySSLCertPassword')]"
          },
          "createACR": {
            "value": "[parameters('createACR')]"
          },
          "createAKSCluster": {
            "value": "[parameters('createAKSCluster')]"
          },
          "createDNSZone": {
            "value": "[parameters('createDNSZone')]"
          },
          "dnszoneName": {
            "value": "[parameters('dnszoneName')]"
          },
          "dnszoneRGName": {
            "value": "[parameters('dnszoneRGName')]"
          },
          "enableAppGWIngress": {
            "value": "[parameters('enableAppGWIngress')]"
          },
          "enableCustomSSL": {
            "value": "[parameters('enableCustomSSL')]"
          },
          "enableDNSConfiguration": {
            "value": "[parameters('enableDNSConfiguration')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultResourceGroup": {
            "value": "[parameters('keyVaultResourceGroup')]"
          },
          "keyVaultSSLCertDataSecretName": {
            "value": "[parameters('keyVaultSSLCertDataSecretName')]"
          },
          "keyVaultSSLCertPasswordSecretName": {
            "value": "[parameters('keyVaultSSLCertPasswordSecretName')]"
          },
          "identity": {
            "value": "[parameters('identity')]"
          },
          "ocrSSOPSW": {
            "value": "[parameters('ocrSSOPSW')]"
          },
          "ocrSSOUser": {
            "value": "[parameters('ocrSSOUser')]"
          },
          "servicePrincipal": {
            "value": "[parameters('servicePrincipal')]"
          },
          "sslConfigurationAccessOption": {
            "value": "[parameters('sslConfigurationAccessOption')]"
          },
          "sslKeyVaultCustomIdentityKeyStoreDataSecretName": {
            "value": "[parameters('sslKeyVaultCustomIdentityKeyStoreDataSecretName')]"
          },
          "sslKeyVaultCustomIdentityKeyStorePassPhraseSecretName": {
            "value": "[parameters('sslKeyVaultCustomIdentityKeyStorePassPhraseSecretName')]"
          },
          "sslKeyVaultCustomIdentityKeyStoreType": {
            "value": "[parameters('sslKeyVaultCustomIdentityKeyStoreType')]"
          },
          "sslKeyVaultCustomTrustKeyStoreDataSecretName": {
            "value": "[parameters('sslKeyVaultCustomTrustKeyStoreDataSecretName')]"
          },
          "sslKeyVaultCustomTrustKeyStorePassPhraseSecretName": {
            "value": "[parameters('sslKeyVaultCustomTrustKeyStorePassPhraseSecretName')]"
          },
          "sslKeyVaultCustomTrustKeyStoreType": {
            "value": "[parameters('sslKeyVaultCustomTrustKeyStoreType')]"
          },
          "sslKeyVaultName": {
            "value": "[parameters('sslKeyVaultName')]"
          },
          "sslKeyVaultPrivateKeyAliasSecretName": {
            "value": "[parameters('sslKeyVaultPrivateKeyAliasSecretName')]"
          },
          "sslKeyVaultPrivateKeyPassPhraseSecretName": {
            "value": "[parameters('sslKeyVaultPrivateKeyPassPhraseSecretName')]"
          },
          "sslKeyVaultResourceGroup": {
            "value": "[parameters('sslKeyVaultResourceGroup')]"
          },
          "sslUploadedCustomIdentityKeyStoreData": {
            "value": "[parameters('sslUploadedCustomIdentityKeyStoreData')]"
          },
          "sslUploadedCustomIdentityKeyStorePassphrase": {
            "value": "[parameters('sslUploadedCustomIdentityKeyStorePassphrase')]"
          },
          "sslUploadedCustomIdentityKeyStoreType": {
            "value": "[parameters('sslUploadedCustomIdentityKeyStoreType')]"
          },
          "sslUploadedCustomTrustKeyStoreData": {
            "value": "[parameters('sslUploadedCustomTrustKeyStoreData')]"
          },
          "sslUploadedCustomTrustKeyStorePassPhrase": {
            "value": "[parameters('sslUploadedCustomTrustKeyStorePassPhrase')]"
          },
          "sslUploadedCustomTrustKeyStoreType": {
            "value": "[parameters('sslUploadedCustomTrustKeyStoreType')]"
          },
          "sslUploadedPrivateKeyAlias": {
            "value": "[parameters('sslUploadedPrivateKeyAlias')]"
          },
          "sslUploadedPrivateKeyPassPhrase": {
            "value": "[parameters('sslUploadedPrivateKeyPassPhrase')]"
          },
          "userProvidedAcr": {
            "value": "[parameters('userProvidedAcr')]"
          },
          "userProvidedImagePath": {
            "value": "[parameters('userProvidedImagePath')]"
          },
          "useOracleImage": {
            "value": "[parameters('useOracleImage')]"
          },
          "wlsImageTag": {
            "value": "[parameters('wlsImageTag')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "11875485554596819261"
            }
          },
          "parameters": {
            "acrName": {
              "type": "string"
            },
            "aksAgentPoolNodeCount": {
              "type": "int"
            },
            "aksAgentPoolVMSize": {
              "type": "string"
            },
            "aksClusterRGName": {
              "type": "string"
            },
            "aksClusterName": {
              "type": "string"
            },
            "appGatewayCertificateOption": {
              "type": "string"
            },
            "appGatewaySSLCertData": {
              "type": "string"
            },
            "appGatewaySSLCertPassword": {
              "type": "secureString"
            },
            "createACR": {
              "type": "bool"
            },
            "createAKSCluster": {
              "type": "bool"
            },
            "createDNSZone": {
              "type": "bool"
            },
            "dnszoneName": {
              "type": "string"
            },
            "dnszoneRGName": {
              "type": "string"
            },
            "enableAppGWIngress": {
              "type": "bool"
            },
            "enableCustomSSL": {
              "type": "bool"
            },
            "enableDNSConfiguration": {
              "type": "bool"
            },
            "keyVaultName": {
              "type": "string"
            },
            "keyVaultResourceGroup": {
              "type": "string"
            },
            "keyVaultSSLCertDataSecretName": {
              "type": "string"
            },
            "keyVaultSSLCertPasswordSecretName": {
              "type": "string"
            },
            "identity": {
              "type": "object"
            },
            "ocrSSOPSW": {
              "type": "secureString"
            },
            "ocrSSOUser": {
              "type": "string"
            },
            "servicePrincipal": {
              "type": "secureString"
            },
            "sslConfigurationAccessOption": {
              "type": "string"
            },
            "sslKeyVaultCustomIdentityKeyStoreDataSecretName": {
              "type": "string"
            },
            "sslKeyVaultCustomIdentityKeyStorePassPhraseSecretName": {
              "type": "string"
            },
            "sslKeyVaultCustomIdentityKeyStoreType": {
              "type": "string"
            },
            "sslKeyVaultCustomTrustKeyStoreDataSecretName": {
              "type": "string"
            },
            "sslKeyVaultCustomTrustKeyStorePassPhraseSecretName": {
              "type": "string"
            },
            "sslKeyVaultCustomTrustKeyStoreType": {
              "type": "string"
            },
            "sslKeyVaultName": {
              "type": "string"
            },
            "sslKeyVaultPrivateKeyAliasSecretName": {
              "type": "string"
            },
            "sslKeyVaultPrivateKeyPassPhraseSecretName": {
              "type": "string"
            },
            "sslKeyVaultResourceGroup": {
              "type": "string"
            },
            "sslUploadedCustomIdentityKeyStoreData": {
              "type": "string"
            },
            "sslUploadedCustomIdentityKeyStorePassphrase": {
              "type": "secureString"
            },
            "sslUploadedCustomIdentityKeyStoreType": {
              "type": "string"
            },
            "sslUploadedCustomTrustKeyStoreData": {
              "type": "string"
            },
            "sslUploadedCustomTrustKeyStorePassPhrase": {
              "type": "secureString"
            },
            "sslUploadedCustomTrustKeyStoreType": {
              "type": "string"
            },
            "sslUploadedPrivateKeyAlias": {
              "type": "string"
            },
            "sslUploadedPrivateKeyPassPhrase": {
              "type": "secureString"
            },
            "userProvidedAcr": {
              "type": "string"
            },
            "userProvidedImagePath": {
              "type": "string"
            },
            "useOracleImage": {
              "type": "bool"
            },
            "utcValue": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            },
            "wlsImageTag": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "const_acrName": "[if(parameters('useOracleImage'), parameters('acrName'), parameters('userProvidedAcr'))]",
            "const_arguments": "[format('{0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}', resourceGroup().location, parameters('createAKSCluster'), parameters('aksAgentPoolVMSize'), parameters('aksAgentPoolNodeCount'), parameters('useOracleImage'), parameters('wlsImageTag'), parameters('userProvidedImagePath'), parameters('enableCustomSSL'), parameters('sslConfigurationAccessOption'), parameters('appGatewayCertificateOption'), parameters('enableAppGWIngress'), variables('const_checkDNSZone'), variables('const_checkACRAdminEnabled'))]",
            "const_azcliVersion": "2.15.0",
            "const_checkDNSZone": "[and(parameters('enableDNSConfiguration'), not(parameters('createDNSZone')))]",
            "const_checkACRAdminEnabled": "[or(parameters('useOracleImage'), not(parameters('createACR')))]",
            "const_deploymentName": "ds-validate-parameters-and-fail-fast"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[variables('const_deploymentName')]",
              "location": "[resourceGroup().location]",
              "kind": "AzureCLI",
              "identity": "[parameters('identity')]",
              "properties": {
                "azCliVersion": "[variables('const_azcliVersion')]",
                "arguments": "[variables('const_arguments')]",
                "environmentVariables": [
                  {
                    "name": "ORACLE_ACCOUNT_NAME",
                    "value": "[parameters('ocrSSOUser')]"
                  },
                  {
                    "name": "ORACLE_ACCOUNT_PASSWORD",
                    "secureValue": "[parameters('ocrSSOPSW')]"
                  },
                  {
                    "name": "ACR_NAME",
                    "value": "[variables('const_acrName')]"
                  },
                  {
                    "name": "AKS_CLUSTER_NAME",
                    "value": "[parameters('aksClusterName')]"
                  },
                  {
                    "name": "AKS_CLUSTER_RESOURCEGROUP_NAME",
                    "value": "[parameters('aksClusterRGName')]"
                  },
                  {
                    "name": "BASE64_FOR_SERVICE_PRINCIPAL",
                    "secureValue": "[parameters('servicePrincipal')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_NAME",
                    "value": "[parameters('sslKeyVaultName')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_RESOURCEGROUP_NAME",
                    "value": "[parameters('sslKeyVaultResourceGroup')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_IDENTITY_DATA_SECRET_NAME",
                    "value": "[parameters('sslKeyVaultCustomIdentityKeyStoreDataSecretName')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_IDENTITY_PASSWORD_SECRET_NAME",
                    "value": "[parameters('sslKeyVaultCustomIdentityKeyStorePassPhraseSecretName')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_IDENTITY_TYPE",
                    "value": "[parameters('sslKeyVaultCustomIdentityKeyStoreType')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_TRUST_DATA_SECRET_NAME",
                    "value": "[parameters('sslKeyVaultCustomTrustKeyStoreDataSecretName')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_TRUST_PASSWORD_SECRET_NAME",
                    "value": "[parameters('sslKeyVaultCustomTrustKeyStorePassPhraseSecretName')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_TRUST_TYPE",
                    "value": "[parameters('sslKeyVaultCustomTrustKeyStoreType')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_PRIVATE_KEY_ALIAS",
                    "value": "[parameters('sslKeyVaultPrivateKeyAliasSecretName')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_PRIVATE_KEY_PASSWORD",
                    "value": "[parameters('sslKeyVaultPrivateKeyPassPhraseSecretName')]"
                  },
                  {
                    "name": "WLS_SSL_IDENTITY_DATA",
                    "secureValue": "[parameters('sslUploadedCustomIdentityKeyStoreData')]"
                  },
                  {
                    "name": "WLS_SSL_IDENTITY_PASSWORD",
                    "secureValue": "[parameters('sslUploadedCustomIdentityKeyStorePassphrase')]"
                  },
                  {
                    "name": "WLS_SSL_IDENTITY_TYPE",
                    "value": "[parameters('sslUploadedCustomIdentityKeyStoreType')]"
                  },
                  {
                    "name": "WLS_SSL_TRUST_DATA",
                    "secureValue": "[parameters('sslUploadedCustomTrustKeyStoreData')]"
                  },
                  {
                    "name": "WLS_SSL_TRUST_PASSWORD",
                    "secureValue": "[parameters('sslUploadedCustomTrustKeyStorePassPhrase')]"
                  },
                  {
                    "name": "WLS_SSL_TRUST_TYPE",
                    "value": "[parameters('sslUploadedCustomTrustKeyStoreType')]"
                  },
                  {
                    "name": "WLS_SSL_PRIVATE_KEY_ALIAS",
                    "secureValue": "[parameters('sslUploadedPrivateKeyAlias')]"
                  },
                  {
                    "name": "WLS_SSL_PRIVATE_KEY_PASSWORD",
                    "secureValue": "[parameters('sslUploadedPrivateKeyPassPhrase')]"
                  },
                  {
                    "name": "APPLICATION_GATEWAY_SSL_KEYVAULT_NAME",
                    "value": "[parameters('keyVaultName')]"
                  },
                  {
                    "name": "APPLICATION_GATEWAY_SSL_KEYVAULT_RESOURCEGROUP",
                    "value": "[parameters('keyVaultResourceGroup')]"
                  },
                  {
                    "name": "APPLICATION_GATEWAY_SSL_KEYVAULT_FRONTEND_CERT_DATA_SECRET_NAME",
                    "value": "[parameters('keyVaultSSLCertDataSecretName')]"
                  },
                  {
                    "name": "APPLICATION_GATEWAY_SSL_KEYVAULT_FRONTEND_CERT_PASSWORD_SECRET_NAME",
                    "value": "[parameters('keyVaultSSLCertPasswordSecretName')]"
                  },
                  {
                    "name": "APPLICATION_GATEWAY_SSL_FRONTEND_CERT_DATA",
                    "value": "[parameters('appGatewaySSLCertData')]"
                  },
                  {
                    "name": "APPLICATION_GATEWAY_SSL_FRONTEND_CERT_PASSWORD",
                    "value": "[parameters('appGatewaySSLCertPassword')]"
                  },
                  {
                    "name": "DNA_ZONE_NAME",
                    "value": "[parameters('dnszoneName')]"
                  },
                  {
                    "name": "DNA_ZONE_RESOURCEGROUP_NAME",
                    "value": "[parameters('dnszoneRGName')]"
                  }
                ],
                "scriptContent": "# Copyright (c) 2021, Oracle Corporation and/or its affiliates.\n# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n# This script runs on Azure Container Instance with Alpine Linux that Azure Deployment script creates.\n#\n# env inputs:\n# ORACLE_ACCOUNT_NAME\n# ORACLE_ACCOUNT_PASSWORD\n# ACR_NAME\n# AKS_CLUSTER_NAME\n# AKS_CLUSTER_RESOURCEGROUP_NAME\n# BASE64_FOR_SERVICE_PRINCIPAL\n# WLS_SSL_KEYVAULT_NAME\n# WLS_SSL_KEYVAULT_RESOURCEGROUP_NAME\n# WLS_SSL_KEYVAULT_IDENTITY_DATA_SECRET_NAME\n# WLS_SSL_KEYVAULT_IDENTITY_PASSWORD_SECRET_NAME\n# WLS_SSL_KEYVAULT_IDENTITY_TYPE\n# WLS_SSL_KEYVAULT_TRUST_DATA_SECRET_NAME\n# WLS_SSL_KEYVAULT_TRUST_PASSWORD_SECRET_NAME\n# WLS_SSL_KEYVAULT_TRUST_TYPE\n# WLS_SSL_KEYVAULT_PRIVATE_KEY_ALIAS\n# WLS_SSL_KEYVAULT_PRIVATE_KEY_PASSWORD\n# WLS_SSL_IDENTITY_DATA\n# WLS_SSL_IDENTITY_PASSWORD\n# WLS_SSL_IDENTITY_TYPE\n# WLS_SSL_TRUST_DATA\n# WLS_SSL_TRUST_PASSWORD\n# WLS_SSL_TRUST_TYPE\n# WLS_SSL_PRIVATE_KEY_ALIAS\n# WLS_SSL_PRIVATE_KEY_PASSWORD\n# APPLICATION_GATEWAY_SSL_KEYVAULT_NAME\n# APPLICATION_GATEWAY_SSL_KEYVAULT_RESOURCEGROUP\n# APPLICATION_GATEWAY_SSL_KEYVAULT_FRONTEND_CERT_DATA_SECRET_NAME\n# APPLICATION_GATEWAY_SSL_KEYVAULT_FRONTEND_CERT_PASSWORD_SECRET_NAME\n# APPLICATION_GATEWAY_SSL_FRONTEND_CERT_DATA\n# APPLICATION_GATEWAY_SSL_FRONTEND_CERT_PASSWORD\n# DNA_ZONE_NAME\n# DNA_ZONE_RESOURCEGROUP_NAME\n\nfunction echo_stderr() {\n  echo \"$@\" 1>&2\n  # The function is used for scripts running within Azure Deployment Script\n  # The value of AZ_SCRIPTS_OUTPUT_PATH is /mnt/azscripts/azscriptoutput\n  echo -e \"$@\" >>${AZ_SCRIPTS_PATH_OUTPUT_DIRECTORY}/errors.log\n}\n\nfunction echo_stdout() {\n  echo \"$@\"\n  # The function is used for scripts running within Azure Deployment Script\n  # The value of AZ_SCRIPTS_OUTPUT_PATH is /mnt/azscripts/azscriptoutput\n  echo -e \"$@\" >>${AZ_SCRIPTS_PATH_OUTPUT_DIRECTORY}/debug.log\n}\n\nfunction install_jdk() {\n    # Install Microsoft OpenJDK\n    apk --no-cache add openjdk11 --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community\n\n    echo \"java version\"\n    java -version\n    if [ $? -eq 1 ]; then\n        echo_stderr \"Failed to install open jdk 11.\"\n        exit 1\n    fi\n    # JAVA_HOME=/usr/lib/jvm/java-11-openjdk\n}\n\n#Validate teminal status with $?, exit with exception if errors happen.\n# $1 - error message\n# $2 -  root cause message\nfunction validate_status() {\n  if [ $? != 0 ]; then\n    echo_stderr \"Errors happen during: $1.\" $2\n    exit 1\n  else\n    echo_stdout \"$1\"\n  fi\n}\n\n# Validate User Assigned Managed Identity\n# Check points:\n#   - the identity is User Assigned Identity, if not, exit with error.\n#   - the identity is assigned with Contributor or Owner role, if not, exit with error.\nfunction validate_user_assigned_managed_identity() {\n  # AZ_SCRIPTS_USER_ASSIGNED_IDENTITY\n  local uamiType=$(az identity show --ids ${AZ_SCRIPTS_USER_ASSIGNED_IDENTITY} --query \"type\" -o tsv)\n  validate_status \"query resource type of ${AZ_SCRIPTS_USER_ASSIGNED_IDENTITY}\" \"The user managed identity may not exist, please check.\"\n  if [[ \"${uamiType}\" != \"${userManagedIdentityType}\" ]]; then\n    echo_stderr \"You must use User Assigned Managed Identity, please follow the document to create one: https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/how-to-manage-ua-identity-portal?WT.mc_id=Portal-Microsoft_Azure_CreateUIDef\"\n  fi\n\n  echo_stdout \"query principal Id of the User Assigned Identity.\"\n  local principalId=$(az identity show --ids ${AZ_SCRIPTS_USER_ASSIGNED_IDENTITY} --query \"principalId\" -o tsv)\n\n  echo_stdout \"check if the user assigned managed identity has Contributor or Owner role.\"\n  local roleLength=$(az role assignment list --assignee ${principalId} |\n    jq '.[] | [select(.roleDefinitionName==\"Contributor\" or .roleDefinitionName==\"Owner\")] | length')\n  if [ ${roleLength} -lt 1 ]; then\n    echo_stderr \"You must grant the User Assigned Managed Identity with at least Contributor role. Please check ${AZ_SCRIPTS_USER_ASSIGNED_IDENTITY}\"\n  fi\n\n  echo_stdout \"Check User Assigned Identity: passed!\"\n}\n\n# Validate compute resources\n# Check points:\n#   - there is enough resource for AKS cluster\n#   - there is enough resource for VM to build the image\n# Example to list the vm usage:\n# az vm list-usage --location \"East US\" -o table\n# Name                                      CurrentValue    Limit\n# ----------------------------------------  --------------  -------\n# Availability Sets                         0               2500\n# Total Regional vCPUs                      2               200\n# Virtual Machines                          1               25000\n# Virtual Machine Scale Sets                0               2500\n# Dedicated vCPUs                           0               3000\n# Cloud Services                            0               2500\n# Total Regional Low-priority vCPUs         0               100\n# Standard DSv2 Family vCPUs                0               100\n# Standard Av2 Family vCPUs                 2               100\n# Basic A Family vCPUs                      0               100\n# Standard A0-A7 Family vCPUs               0               200\n# Standard A8-A11 Family vCPUs              0               100\n# Standard D Family vCPUs                   0               100\n# Standard Dv2 Family vCPUs                 0               100\n# Standard DS Family vCPUs                  0               100\n# Standard G Family vCPUs                   0               100\n# Standard GS Family vCPUs                  0               100\n# Standard F Family vCPUs                   0               100\n# Standard FS Family vCPUs                  0               100\n# ... ...\nfunction validate_compute_resources() {\n  # Resource for ubuntu machine\n  # 2 Standard Av2 Family vCPUs\n\n  # query total cores\n  local vmUsage=$(az vm list-usage -l ${location} -o json)\n  local totalCPUs=$(echo ${vmUsage} | jq '.[] | select(.name.value==\"cores\") | .limit' | tr -d \"\\\"\")\n  local currentCPUs=$(echo ${vmUsage} | jq '.[] | select(.name.value==\"cores\") | .currentValue' | tr -d \"\\\"\")\n  local aksCPUs=0\n\n  # if creating new AKS cluster\n  if [[ \"${createAKSCluster,,}\" == \"true\" ]]; then\n    local aksVMDetails=$(az vm list-skus --size ${aksAgentPoolVMSize} -l ${location} --query [0])\n    local vmFamily=$(echo ${aksVMDetails} | jq '.family' | tr -d \"\\\"\")\n    local vmCPUs=$(echo ${aksVMDetails} | jq '.capabilities[] | select(.name==\"vCPUs\") | .value' | tr -d \"\\\"\")\n    aksCPUs=$((vmCPUs * aksAgentPoolNodeCount))\n\n    # query CPU usage of the vm family\n    local familyLimit=$(echo ${vmUsage} | jq '.[] | select(.name.value==\"'${vmFamily}'\") | .limit' | tr -d \"\\\"\")\n    local familyUsage=$(echo ${vmUsage} | jq '.[] | select(.name.value==\"'${vmFamily}'\") | .currentValue' | tr -d \"\\\"\")\n    local requiredFamilyCPUs=$((aksCPUs + familyUsage))\n    # make sure thers is enough vCPUs of the family for AKS\n    if [ ${requiredFamilyCPUs} -gt ${familyLimit} ]; then\n      echo_stderr \"It requires ${aksCPUs} ${vmFamily} vCPUs to create the AKS cluster, ${vmFamily} vCPUs quota is limited to ${familyLimit}, current usage is ${familyUsage}.\"\n      exit 1\n    fi\n  fi\n\n  local vmFamilyOfUbuntu=\"standardAv2Family\"\n  local familyLimit=$(echo ${vmUsage} | jq '.[] | select(.name.value==\"'${vmFamilyOfUbuntu}'\") | .limit' | tr -d \"\\\"\")\n  local familyUsage=$(echo ${vmUsage} | jq '.[] | select(.name.value==\"'${vmFamilyOfUbuntu}'\") | .currentValue' | tr -d \"\\\"\")\n  local requiredFamilyCPUs=$((2 + familyUsage))\n  # make sure thers is enough vCPUs of the family for ubuntu machine\n  if [ ${requiredFamilyCPUs} -gt ${familyLimit} ]; then\n      echo_stderr \"It requires 2 ${vmFamilyOfUbuntu} vCPUs to create an ubuntu machine for docker image, ${vmFamilyOfUbuntu} vCPUs quota is limited to ${familyLimit}, current usage is ${familyUsage}.\"\n      exit 1\n  fi\n\n  local requiredCPU=$((aksCPUs + 2 + currentCPUs))\n  if [ ${requiredCPU} -gt ${totalCPUs} ]; then\n      echo_stderr \"It requires ${requiredCPU} vCPUs to run WLS on AKS, vCPUs quota is limited to ${totalCPUs}, current usage is ${currentCPUs}.\"\n      exit 1\n  fi\n\n  echo_stdout \"Check compute resources: passed!\"\n}\n\nfunction validate_ocr_account() {\n  # install docker cli\n  apk add docker --no-cache --quiet\n  docker --help\n  validate_status \"install docker\"\n\n  # ORACLE_ACCOUNT_NAME\n  # ORACLE_ACCOUNT_PASSWORD\n  docker logout\n  echo \"${ORACLE_ACCOUNT_PASSWORD}\" | docker login ${ocrLoginServer} -u ${ORACLE_ACCOUNT_NAME} --password-stdin\n  validate_status \"login OCR with user ${ORACLE_ACCOUNT_NAME}\"\n\n  echo_stdout \"Check OCR account: passed!\"\n}\n\nfunction check_acr_admin_enabled() {\n  echo_stdout \"check if admin user enabled in ACR $ACR_NAME \"\n  local adminUserEnabled=$(az acr show --name $ACR_NAME --query \"adminUserEnabled\")\n  validate_status \"query 'adminUserEnabled' property of ACR ${ACR_NAME}\" \"Invalid ACR: ${ACR_NAME}\"\n\n  if [[ \"${adminUserEnabled}\" == \"false\" ]]; then\n    echo_stderr \"Make sure admin user is enabled in ACR $ACR_NAME. Please find steps in https://docs.microsoft.com/en-us/azure/container-registry/container-registry-authentication?WT.mc_id=Portal-Microsoft_Azure_CreateUIDef&tabs=azure-cli#admin-account\"\n    exit 1\n  fi\n}\n\nfunction validate_acr_image() {\n  echo_stdout \"use ACR: $ACR_NAME\"\n\n  local pathWithoutTag=${userProvidedImagePath%\\:*}\n  local repository=${pathWithoutTag#*\\/}\n  local tag=\"${userProvidedImagePath##*:}\"\n\n  local tagIndex=$(az acr repository show-tags --name $ACR_NAME --repository ${repository} | jq 'index(\"'${tag}'\")')\n  validate_status \"check if tag ${tag} exists.\" \"Invalid image path ${userProvidedImagePath}\"\n  if [[ \"${tagIndex}\" == \"null\" ]]; then\n    echo_stderr \"Tag ${tag} does not exist in ${repository}.\"\n    exit 1\n  fi\n\n  echo_stdout \"Check ACR image: passed!\"\n}\n\nfunction validate_base_image_path() {\n  if [[ \"${useOracleImage,,}\" == \"true\" ]]; then\n    validate_ocr_account\n  else\n    validate_acr_image\n  fi\n}\n\n# Only support kubenet currently\nfunction validate_aks_network_plugin() {\n  # AKS_CLUSTER_NAME\n  # AKS_CLUSTER_RESOURCEGROUP_NAME\n\n  if [[ \"${createAKSCluster,,}\" == \"false\" ]]; then\n    local networkPlugin=$(az aks show -n ${AKS_CLUSTER_NAME} \\\n      -g ${AKS_CLUSTER_RESOURCEGROUP_NAME} \\\n      --query 'networkProfile.networkPlugin' -o tsv)\n\n    if [[ \"${networkPlugin}\" != \"kubenet\" ]]; then\n      echo_stderr \"The offer only supports AKS network type kubenet, you are using a cluster of CNI.\"\n      exit 1\n    fi\n  fi\n\n  echo_stdout \"Check AKS networking: passed!\"\n}\n\nfunction download_wls_ssl_certificates_from_keyvault() {\n  # check key vault accessibility for template deployment\n  local enabledForTemplateDeployment=$(az keyvault show --name ${WLS_SSL_KEYVAULT_NAME} --query \"properties.enabledForTemplateDeployment\")\n  if [[ \"${enabledForTemplateDeployment,,}\" != \"true\" ]]; then\n    echo_stderr \"Make sure Key Vault ${WLS_SSL_KEYVAULT_NAME} is enabled for template deployment. \"\n    exit 1\n  fi\n\n  # allow the identity to access the keyvault\n  local principalId=$(az identity show --ids ${AZ_SCRIPTS_USER_ASSIGNED_IDENTITY} --query \"principalId\" -o tsv)\n  az keyvault set-policy --name ${WLS_SSL_KEYVAULT_NAME}  --object-id ${principalId} --secret-permissions get list\n  validate_status \"grant identity permission to get/list secrets in key vault ${WLS_SSL_KEYVAULT_NAME}\"\n\n  local identityDataFileName=${AZ_SCRIPTS_PATH_OUTPUT_DIRECTORY}/identityData.txt\n  local identityPswFileName=${AZ_SCRIPTS_PATH_OUTPUT_DIRECTORY}/identityPsw.txt\n  local trustDataFileName=${AZ_SCRIPTS_PATH_OUTPUT_DIRECTORY}/trustData.txt\n  local trustPswFileName=${AZ_SCRIPTS_PATH_OUTPUT_DIRECTORY}/trustPsw.txt\n  local privateKeyAliasFileName=${AZ_SCRIPTS_PATH_OUTPUT_DIRECTORY}/privateKeyData.txt\n  local privateKeyPswFileName=${AZ_SCRIPTS_PATH_OUTPUT_DIRECTORY}/privateKeyPsw.txt\n\n  rm -f ${identityDataFileName}\n  rm -f ${identityPswFileName}\n  rm -f ${trustDataFileName}\n  rm -f ${trustPswFileName}\n  rm -f ${privateKeyAliasFileName}\n  rm -f ${privateKeyPswFileName}\n\n  # download identity data\n  az keyvault secret download --file ${identityDataFileName} \\\n    --name ${WLS_SSL_KEYVAULT_IDENTITY_DATA_SECRET_NAME} \\\n    --vault-name ${WLS_SSL_KEYVAULT_NAME} \n  validate_status \"download secret ${WLS_SSL_KEYVAULT_IDENTITY_DATA_SECRET_NAME} from key vault ${WLS_SSL_KEYVAULT_NAME}\"\n  # set identity data with values in download file\n  WLS_SSL_IDENTITY_DATA=$(cat ${identityDataFileName})\n  # remove the data file\n  rm -f ${identityDataFileName}\n\n  # download identity password\n  az keyvault secret download --file ${identityPswFileName} \\\n    --name ${WLS_SSL_KEYVAULT_IDENTITY_PASSWORD_SECRET_NAME} \\\n    --vault-name ${WLS_SSL_KEYVAULT_NAME} \n  validate_status \"download secret ${WLS_SSL_KEYVAULT_IDENTITY_PASSWORD_SECRET_NAME} from key vault ${WLS_SSL_KEYVAULT_NAME}\"\n  # set identity psw with values in download file\n  WLS_SSL_IDENTITY_PASSWORD=$(cat ${identityPswFileName})\n  # remove the data file\n  rm -f ${identityPswFileName}\n\n  # download trust data\n  az keyvault secret download --file ${trustDataFileName} \\\n    --name ${WLS_SSL_KEYVAULT_TRUST_DATA_SECRET_NAME} \\\n    --vault-name ${WLS_SSL_KEYVAULT_NAME} \n  validate_status \"download secret ${WLS_SSL_KEYVAULT_TRUST_DATA_SECRET_NAME} from key vault ${WLS_SSL_KEYVAULT_NAME}\"\n  # set trust data with values in download file\n  WLS_SSL_TRUST_DATA=$(cat ${trustDataFileName})\n  # remove the data file\n  rm -f ${trustDataFileName}\n\n  # download trust psw\n  az keyvault secret download --file ${trustPswFileName} \\\n    --name ${WLS_SSL_KEYVAULT_TRUST_PASSWORD_SECRET_NAME} \\\n    --vault-name ${WLS_SSL_KEYVAULT_NAME} \n  validate_status \"download secret ${WLS_SSL_KEYVAULT_TRUST_PASSWORD_SECRET_NAME} from key vault ${WLS_SSL_KEYVAULT_NAME}\"\n  # set trust psw with values in download file\n  WLS_SSL_TRUST_PASSWORD=$(cat ${trustPswFileName})\n  # remove the data file\n  rm -f ${trustPswFileName}\n\n  # download alias\n  az keyvault secret download --file ${privateKeyAliasFileName} \\\n    --name ${WLS_SSL_KEYVAULT_PRIVATE_KEY_ALIAS} \\\n    --vault-name ${WLS_SSL_KEYVAULT_NAME} \n  validate_status \"download secret ${WLS_SSL_KEYVAULT_PRIVATE_KEY_ALIAS} from key vault ${WLS_SSL_KEYVAULT_NAME}\"\n  # set alias with values in download file\n  WLS_SSL_PRIVATE_KEY_ALIAS=$(cat ${privateKeyAliasFileName})\n  # remove the data file\n  rm -f ${privateKeyAliasFileName}\n\n  # download private key psw\n  az keyvault secret download --file ${privateKeyPswFileName} \\\n    --name ${WLS_SSL_KEYVAULT_PRIVATE_KEY_PASSWORD} \\\n    --vault-name ${WLS_SSL_KEYVAULT_NAME} \n  validate_status \"download secret ${WLS_SSL_KEYVAULT_PRIVATE_KEY_PASSWORD} from key vault ${WLS_SSL_KEYVAULT_NAME}\"\n  # set private key psw with values in download file\n  WLS_SSL_PRIVATE_KEY_PASSWORD=$(cat ${privateKeyPswFileName})\n  # remove the data file\n  rm -f ${privateKeyPswFileName}\n\n  WLS_SSL_IDENTITY_TYPE=${WLS_SSL_KEYVAULT_IDENTITY_TYPE}\n  WLS_SSL_TRUST_TYPE=${WLS_SSL_KEYVAULT_TRUST_TYPE}\n\n  # reset key vault policy\n  az keyvault delete-policy --name ${WLS_SSL_KEYVAULT_NAME}  --object-id ${principalId}\n  validate_status \"delete identity permission to get/list secrets in key vault ${WLS_SSL_KEYVAULT_NAME}\"\n}\n\nfunction validate_wls_ssl_certificates() {\n  if [[ \"${sslConfigurationAccessOption}\" == \"${sslCertificateKeyVaultOption}\" ]]; then\n    download_wls_ssl_certificates_from_keyvault\n  fi\n\n  local wlsIdentityKeyStoreFileName=${AZ_SCRIPTS_PATH_OUTPUT_DIRECTORY}/identity.keystore\n  local wlsTrustKeyStoreFileName=${AZ_SCRIPTS_PATH_OUTPUT_DIRECTORY}/trust.keystore\n  echo \"$WLS_SSL_IDENTITY_DATA\" | base64 -d >$wlsIdentityKeyStoreFileName\n  echo \"$WLS_SSL_TRUST_DATA\" | base64 -d >$wlsTrustKeyStoreFileName\n\n  # use default Java, if no, install open jdk 11.\n  # why not using Microsoft open jdk? \n  # No apk installation package!\n  export JAVA_HOME=/usr/lib/jvm/default-jvm/\n  if [ ! -d \"${JAVA_HOME}\" ]; then\n      install_jdk\n      JAVA_HOME=/usr/lib/jvm/java-11-openjdk\n  fi\n  #validate if identity keystore has entry\n  ${JAVA_HOME}/bin/keytool -list -v \\\n      -keystore $wlsIdentityKeyStoreFileName \\\n      -storepass $WLS_SSL_IDENTITY_PASSWORD \\\n      -storetype $WLS_SSL_IDENTITY_TYPE |\n      grep 'Entry type:' |\n      grep 'PrivateKeyEntry'\n\n  validate_status \"validate Identity Keystore.\"\n\n  #validate if trust keystore has entry\n  ${JAVA_HOME}/bin/keytool -list -v \\\n      -keystore ${wlsTrustKeyStoreFileName} \\\n      -storepass $WLS_SSL_TRUST_PASSWORD \\\n      -storetype $WLS_SSL_TRUST_TYPE |\n      grep 'Entry type:' |\n      grep 'trustedCertEntry'\n\n  validate_status \"validate Trust Keystore.\"\n\n  echo_stdout \"validate SSL key stores: passed!\"\n}\n\nfunction download_application_gateway_certificate_from_keyvault() {\n  # check key vault accessibility for template deployment\n  local enabledForTemplateDeployment=$(az keyvault show --name ${APPLICATION_GATEWAY_SSL_KEYVAULT_NAME} --query \"properties.enabledForTemplateDeployment\")\n  if [[ \"${enabledForTemplateDeployment,,}\" != \"true\" ]]; then\n    echo_stderr \"Make sure Key Vault ${APPLICATION_GATEWAY_SSL_KEYVAULT_NAME} is enabled for template deployment. \"\n    exit 1\n  fi\n\n  # allow the identity to access the keyvault\n  local principalId=$(az identity show --ids ${AZ_SCRIPTS_USER_ASSIGNED_IDENTITY} --query \"principalId\" -o tsv)\n  az keyvault set-policy --name ${APPLICATION_GATEWAY_SSL_KEYVAULT_NAME}  --object-id ${principalId} --secret-permissions get list\n  validate_status \"grant identity permission to get/list secrets in key vault ${APPLICATION_GATEWAY_SSL_KEYVAULT_NAME}\"\n\n  local gatewayCertDataFileName=${AZ_SCRIPTS_PATH_OUTPUT_DIRECTORY}/gatewayCertData.txt\n  local gatewayCertPswFileName=${AZ_SCRIPTS_PATH_OUTPUT_DIRECTORY}/gatewayCertPsw.txt\n\n  rm -f ${gatewayCertDataFileName}\n  rm -f ${gatewayCertPswFileName}\n\n  # download cert data\n  az keyvault secret download --file ${gatewayCertDataFileName} \\\n    --name ${APPLICATION_GATEWAY_SSL_KEYVAULT_FRONTEND_CERT_DATA_SECRET_NAME} \\\n    --vault-name ${APPLICATION_GATEWAY_SSL_KEYVAULT_NAME}\n  validate_status \"download secret ${APPLICATION_GATEWAY_SSL_KEYVAULT_FRONTEND_CERT_DATA_SECRET_NAME} from key vault ${APPLICATION_GATEWAY_SSL_KEYVAULT_NAME}\"\n  # set cert data with values in download file\n  APPLICATION_GATEWAY_SSL_FRONTEND_CERT_DATA=$(cat ${gatewayCertDataFileName})\n  # remove the data file\n  rm -f ${gatewayCertDataFileName}\n\n  # download cert data\n  az keyvault secret download --file ${gatewayCertPswFileName} \\\n    --name ${APPLICATION_GATEWAY_SSL_KEYVAULT_FRONTEND_CERT_PASSWORD_SECRET_NAME} \\\n    --vault-name ${APPLICATION_GATEWAY_SSL_KEYVAULT_NAME} \n  validate_status \"download secret ${APPLICATION_GATEWAY_SSL_KEYVAULT_FRONTEND_CERT_PASSWORD_SECRET_NAME} from key vault ${APPLICATION_GATEWAY_SSL_KEYVAULT_NAME}\"\n  # set cert data with values in download file\n  APPLICATION_GATEWAY_SSL_FRONTEND_CERT_PASSWORD=$(cat ${gatewayCertPswFileName})\n  # remove the data file\n  rm -f ${gatewayCertPswFileName}\n\n  # reset key vault policy\n  az keyvault delete-policy --name ${APPLICATION_GATEWAY_SSL_KEYVAULT_NAME}  --object-id ${principalId}\n  validate_status \"delete identity permission to get/list secrets in key vault ${APPLICATION_GATEWAY_SSL_KEYVAULT_NAME}\"\n}\n\nfunction validate_gateway_frontend_certificates() {\n  if [[ \"${appGatewayCertificateOption}\" == \"generateCert\" ]]; then\n    return\n  fi\n\n  if [[ \"${appGatewayCertificateOption}\" == \"haveKeyVault\" ]]; then\n    download_application_gateway_certificate_from_keyvault\n  fi\n\n  local appgwFrontCertFileName=${AZ_SCRIPTS_PATH_OUTPUT_DIRECTORY}/gatewaycert.pfx\n  echo \"$APPLICATION_GATEWAY_SSL_FRONTEND_CERT_DATA\" | base64 -d >$appgwFrontCertFileName\n\n  openssl pkcs12 \\\n    -in $appgwFrontCertFileName \\\n    -nocerts \\\n    -out ${AZ_SCRIPTS_PATH_OUTPUT_DIRECTORY}/cert.key \\\n    -passin pass:${APPLICATION_GATEWAY_SSL_FRONTEND_CERT_PASSWORD} \\\n    -passout pass:${APPLICATION_GATEWAY_SSL_FRONTEND_CERT_PASSWORD}\n  \n  validate_status \"access application gateway frontend key.\" \"Make sure the Application Gateway frontend certificate is correct.\"\n}\n\nfunction validate_service_principal() {\n  spObject=$(echo \"${BASE64_FOR_SERVICE_PRINCIPAL}\" | base64 -d)\n  validate_status \"decode the service principal base64 string.\" \"Invalid service principal.\"\n\n  local principalId=$(echo ${spObject} | jq '.clientId')\n  validate_status \"get client id from the service principal.\" \"Invalid service principal.\"\n  if [[ \"${principalId}\" == \"null\" ]] || [[ \"${principalId}\" == \"\" ]]; then\n    echo_stderr \"the service principal is invalid.\"\n    exit 1\n  fi\n\n  echo_stdout \"check if the service principal has Contributor or Owner role.\"\n  local roleLength=$(az role assignment list --assignee ${principalId} |\n    jq '.[] | [select(.roleDefinitionName==\"Contributor\" or .roleDefinitionName==\"Owner\")] | length')\n  if [ ${roleLength} -lt 1 ]; then\n    echo_stderr \"You must grant the service principal with at least Contributor role.\"\n  fi\n\n  echo_stdout \"Check service principal: passed!\"\n}\n\nfunction validate_dns_zone() {\n  if [[ \"${checkDNSZone,,}\" == \"true\" ]]; then\n    az network dns zone show -n ${DNA_ZONE_NAME} -g ${DNA_ZONE_RESOURCEGROUP_NAME}\n    validate_status \"check DNS Zone ${DNA_ZONE_NAME}\" \"Make sure the DNS Zone exists.\"\n\n    echo_stdout \"Check DNS Zone: passed!\"\n  fi\n}\n\n# main\nlocation=$1\ncreateAKSCluster=$2\naksAgentPoolVMSize=$3\naksAgentPoolNodeCount=$4\nuseOracleImage=$5\nwlsImageTag=$6\nuserProvidedImagePath=$7\nenableCustomSSL=$8\nsslConfigurationAccessOption=$9\nappGatewayCertificateOption=${10}\nenableAppGWIngress=${11}\ncheckDNSZone=${12}\ncheckACR=${13}\n\nocrLoginServer=\"container-registry.oracle.com\"\nsslCertificateKeyVaultOption=\"keyVaultStoredConfig\"\nuserManagedIdentityType=\"Microsoft.ManagedIdentity/userAssignedIdentities\"\n\nvalidate_user_assigned_managed_identity\n\nvalidate_compute_resources\n\nvalidate_base_image_path\n\nvalidate_aks_network_plugin\n\nif [[ \"${checkACR,,}\" == \"true\" ]]; then\n  check_acr_admin_enabled\nfi\n\nif [[ \"${enableCustomSSL,,}\" == \"true\" ]]; then\n  validate_wls_ssl_certificates\nfi\n\nif [[ \"${enableAppGWIngress,,}\" == \"true\" ]]; then\n  validate_gateway_frontend_certificates\n  validate_service_principal\nfi\n\nvalidate_dns_zone\n\n\n",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D",
                "forceUpdateTag": "[parameters('utcValue')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'initialization')]"
      ]
    },
    {
      "condition": "[and(parameters('enableCustomSSL'), not(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "upload-wls-ssl-cert-to-keyvault",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[variables('name_keyVaultName')]"
          },
          "sku": {
            "value": "[parameters('keyVaultSku')]"
          },
          "wlsIdentityKeyStoreData": {
            "value": "[parameters('sslUploadedCustomIdentityKeyStoreData')]"
          },
          "wlsIdentityKeyStoreDataSecretName": {
            "value": "[variables('name_identityKeyStoreDataSecret')]"
          },
          "wlsIdentityKeyStorePassphrase": {
            "value": "[parameters('sslUploadedCustomIdentityKeyStorePassphrase')]"
          },
          "wlsIdentityKeyStorePassphraseSecretName": {
            "value": "[variables('name_identityKeyStorePswSecret')]"
          },
          "wlsPrivateKeyAlias": {
            "value": "[parameters('sslUploadedPrivateKeyAlias')]"
          },
          "wlsPrivateKeyAliasSecretName": {
            "value": "[variables('name_privateKeyAliasSecret')]"
          },
          "wlsPrivateKeyPassPhrase": {
            "value": "[parameters('sslUploadedPrivateKeyPassPhrase')]"
          },
          "wlsPrivateKeyPassPhraseSecretName": {
            "value": "[variables('name_privateKeyPswSecret')]"
          },
          "wlsTrustKeyStoreData": {
            "value": "[parameters('sslUploadedCustomTrustKeyStoreData')]"
          },
          "wlsTrustKeyStoreDataSecretName": {
            "value": "[variables('name_trustKeyStoreDataSecret')]"
          },
          "wlsTrustKeyStorePassPhrase": {
            "value": "[parameters('sslUploadedCustomTrustKeyStorePassPhrase')]"
          },
          "wlsTrustKeyStorePassPhraseSecretName": {
            "value": "[variables('name_trustKeyStorePswSecret')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "1514780095156618618"
            }
          },
          "parameters": {
            "enabledForTemplateDeployment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Name of the vault"
              }
            },
            "sku": {
              "type": "string",
              "metadata": {
                "description": "Price tier for Key Vault."
              }
            },
            "utcValue": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            },
            "wlsIdentityKeyStoreData": {
              "type": "string"
            },
            "wlsIdentityKeyStoreDataSecretName": {
              "type": "string"
            },
            "wlsIdentityKeyStorePassphrase": {
              "type": "secureString"
            },
            "wlsIdentityKeyStorePassphraseSecretName": {
              "type": "string"
            },
            "wlsPrivateKeyAlias": {
              "type": "string"
            },
            "wlsPrivateKeyAliasSecretName": {
              "type": "string"
            },
            "wlsPrivateKeyPassPhrase": {
              "type": "secureString"
            },
            "wlsPrivateKeyPassPhraseSecretName": {
              "type": "string"
            },
            "wlsTrustKeyStoreData": {
              "type": "string"
            },
            "wlsTrustKeyStoreDataSecretName": {
              "type": "string"
            },
            "wlsTrustKeyStorePassPhrase": {
              "type": "secureString"
            },
            "wlsTrustKeyStorePassPhraseSecretName": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2019-09-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "sku": {
                  "name": "[parameters('sku')]",
                  "family": "A"
                },
                "accessPolicies": [],
                "tenantId": "[subscription().tenantId]"
              },
              "tags": {
                "managed-by-azure-weblogic": "[parameters('utcValue')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('wlsIdentityKeyStoreDataSecretName'))]",
              "properties": {
                "value": "[parameters('wlsIdentityKeyStoreData')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('wlsIdentityKeyStorePassphraseSecretName'))]",
              "properties": {
                "value": "[parameters('wlsIdentityKeyStorePassphrase')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('wlsPrivateKeyAliasSecretName'))]",
              "properties": {
                "value": "[parameters('wlsPrivateKeyAlias')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('wlsPrivateKeyPassPhraseSecretName'))]",
              "properties": {
                "value": "[parameters('wlsPrivateKeyPassPhrase')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('wlsTrustKeyStoreDataSecretName'))]",
              "properties": {
                "value": "[parameters('wlsTrustKeyStoreData')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('wlsTrustKeyStorePassPhraseSecretName'))]",
              "properties": {
                "value": "[parameters('wlsTrustKeyStorePassPhrase')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'validate-parameters-and-fail-fast')]"
      ]
    },
    {
      "condition": "[not(parameters('createAKSCluster'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "query-existing-storage-account",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aksClusterName": {
            "value": "[parameters('aksClusterName')]"
          },
          "aksClusterRGName": {
            "value": "[parameters('aksClusterRGName')]"
          },
          "identity": {
            "value": "[parameters('identity')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "15003635686111380403"
            }
          },
          "parameters": {
            "aksClusterName": {
              "type": "string",
              "defaultValue": ""
            },
            "aksClusterRGName": {
              "type": "string",
              "defaultValue": ""
            },
            "identity": {
              "type": "object"
            },
            "utcValue": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            }
          },
          "functions": [],
          "variables": {
            "const_arguments": "[format('{0} {1}', parameters('aksClusterRGName'), parameters('aksClusterName'))]",
            "const_azcliVersion": "2.15.0",
            "const_deploymentName": "ds-query-storage-account"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[variables('const_deploymentName')]",
              "location": "[resourceGroup().location]",
              "kind": "AzureCLI",
              "identity": "[parameters('identity')]",
              "properties": {
                "azCliVersion": "[variables('const_azcliVersion')]",
                "arguments": "[variables('const_arguments')]",
                "scriptContent": "export aksClusterRGName=$1\nexport aksClusterName=$2\n\nexport currentStorageAccount=\"null\"\n\n# Connect to AKS cluster\nfunction connect_aks_cluster() {\n  az aks get-credentials \\\n    --resource-group ${aksClusterRGName} \\\n    --name ${aksClusterName} \\\n    --overwrite-existing\n}\n\nfunction query_storage_account() {\n  echo \"install kubectl\"\n  az aks install-cli\n\n  echo \"get pv name\"\n  pvName=$(kubectl get pv -o json |\n    jq '.items[] | select(.status.phase==\"Bound\") | [.metadata.name] | .[0]' |\n    tr -d \"\\\"\")\n\n  if [[ \"${pvName}\" != \"null\" ]] && [[ \"${pvName}\" != \"\" ]]; then\n    # this is a workaround for update domain using marketplace offer.\n    # the offer will create a new storage account in a new resource group if there is no storage attached.\n    currentStorageAccount=$(kubectl get pv ${pvName} -o json | jq '. | .metadata.labels.storageAccount' | tr -d \"\\\"\")\n  fi\n}\n\nfunction output_result() {\n  echo ${currentStorageAccount}\n\n  result=$(jq -n -c \\\n    --arg storageAccount $currentStorageAccount \\\n    '{storageAccount: $storageAccount}')\n  echo \"result is: $result\"\n  echo $result >$AZ_SCRIPTS_OUTPUT_PATH\n}\n\nconnect_aks_cluster\n\nquery_storage_account\n\noutput_result\n",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D",
                "forceUpdateTag": "[parameters('utcValue')]"
              }
            }
          ],
          "outputs": {
            "storageAccount": {
              "type": "string",
              "value": "[string(reference(variables('const_deploymentName')).outputs.storageAccount)]"
            }
          }
        }
      }
    },
    {
      "condition": "[not(parameters('enableCustomSSL'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "setup-wls-cluster",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "_pidEnd": {
            "value": "[if(equals(reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2020-06-01').outputs.wlsAKSEnd.value, ''), variables('name_defaultPidDeployment'), reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2020-06-01').outputs.wlsAKSEnd.value)]"
          },
          "_pidStart": {
            "value": "[if(equals(reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2020-06-01').outputs.wlsAKSStart.value, ''), variables('name_defaultPidDeployment'), reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2020-06-01').outputs.wlsAKSStart.value)]"
          },
          "aciResourcePermissions": {
            "value": "[parameters('aciResourcePermissions')]"
          },
          "aciRetentionInDays": {
            "value": "[parameters('aciRetentionInDays')]"
          },
          "aciWorkspaceSku": {
            "value": "[parameters('aciWorkspaceSku')]"
          },
          "acrName": {
            "value": "[parameters('acrName')]"
          },
          "aksAgentPoolName": {
            "value": "[parameters('aksAgentPoolName')]"
          },
          "aksAgentPoolNodeCount": {
            "value": "[parameters('aksAgentPoolNodeCount')]"
          },
          "aksAgentPoolVMSize": {
            "value": "[parameters('aksAgentPoolVMSize')]"
          },
          "aksClusterNamePrefix": {
            "value": "[parameters('aksClusterNamePrefix')]"
          },
          "aksClusterRGName": {
            "value": "[parameters('aksClusterRGName')]"
          },
          "aksClusterName": {
            "value": "[parameters('aksClusterName')]"
          },
          "aksVersion": {
            "value": "[parameters('aksVersion')]"
          },
          "appPackageUrls": {
            "value": "[parameters('appPackageUrls')]"
          },
          "appReplicas": {
            "value": "[parameters('appReplicas')]"
          },
          "createACR": {
            "value": "[parameters('createACR')]"
          },
          "createAKSCluster": {
            "value": "[parameters('createAKSCluster')]"
          },
          "createStorageAccount": {
            "value": "[and(or(parameters('createAKSCluster'), not(and(not(parameters('createAKSCluster')), not(equals(reference('query-existing-storage-account').outputs.storageAccount.value, 'null'))))), variables('const_enablePV'))]"
          },
          "enableAzureMonitoring": {
            "value": "[parameters('enableAzureMonitoring')]"
          },
          "enableCustomSSL": {
            "value": "[parameters('enableCustomSSL')]"
          },
          "enableAdminT3Tunneling": {
            "value": "[parameters('enableAdminT3Tunneling')]"
          },
          "enableClusterT3Tunneling": {
            "value": "[parameters('enableClusterT3Tunneling')]"
          },
          "enablePV": {
            "value": "[variables('const_enablePV')]"
          },
          "identity": {
            "value": "[parameters('identity')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "managedServerPrefix": {
            "value": "[parameters('managedServerPrefix')]"
          },
          "ocrSSOPSW": {
            "value": "[parameters('ocrSSOPSW')]"
          },
          "ocrSSOUser": {
            "value": "[parameters('ocrSSOUser')]"
          },
          "storageAccountName": {
            "value": "[if(and(not(parameters('createAKSCluster')), not(equals(reference('query-existing-storage-account').outputs.storageAccount.value, 'null'))), reference('query-existing-storage-account').outputs.storageAccount.value, format('wls{0}', uniqueString(parameters('utcValue'))))]"
          },
          "t3ChannelAdminPort": {
            "value": "[parameters('t3ChannelAdminPort')]"
          },
          "t3ChannelClusterPort": {
            "value": "[parameters('t3ChannelClusterPort')]"
          },
          "wdtRuntimePassword": {
            "value": "[parameters('wdtRuntimePassword')]"
          },
          "userProvidedAcr": {
            "value": "[parameters('userProvidedAcr')]"
          },
          "userProvidedImagePath": {
            "value": "[parameters('userProvidedImagePath')]"
          },
          "useOracleImage": {
            "value": "[parameters('useOracleImage')]"
          },
          "wlsClusterSize": {
            "value": "[parameters('wlsClusterSize')]"
          },
          "wlsCPU": {
            "value": "[parameters('wlsCPU')]"
          },
          "wlsDomainName": {
            "value": "[parameters('wlsDomainName')]"
          },
          "wlsDomainUID": {
            "value": "[parameters('wlsDomainUID')]"
          },
          "wlsIdentityKeyStoreData": {
            "value": "[parameters('sslUploadedCustomIdentityKeyStoreData')]"
          },
          "wlsIdentityKeyStorePassphrase": {
            "value": "[parameters('sslUploadedCustomIdentityKeyStorePassphrase')]"
          },
          "wlsIdentityKeyStoreType": {
            "value": "[variables('const_defaultKeystoreType')]"
          },
          "wlsImageTag": {
            "value": "[parameters('wlsImageTag')]"
          },
          "wlsJavaOption": {
            "value": "[variables('const_wlsJavaOptions')]"
          },
          "wlsMemory": {
            "value": "[parameters('wlsMemory')]"
          },
          "wlsPassword": {
            "value": "[parameters('wlsPassword')]"
          },
          "wlsPrivateKeyAlias": {
            "value": "[parameters('sslUploadedPrivateKeyAlias')]"
          },
          "wlsPrivateKeyPassPhrase": {
            "value": "[parameters('sslUploadedPrivateKeyPassPhrase')]"
          },
          "wlsTrustKeyStoreData": {
            "value": "[parameters('sslUploadedCustomTrustKeyStoreData')]"
          },
          "wlsTrustKeyStorePassPhrase": {
            "value": "[parameters('sslUploadedCustomTrustKeyStorePassPhrase')]"
          },
          "wlsTrustKeyStoreType": {
            "value": "[variables('const_defaultKeystoreType')]"
          },
          "wlsUserName": {
            "value": "[parameters('wlsUserName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "1033344631092920833"
            }
          },
          "parameters": {
            "_artifactsLocation": {
              "type": "string",
              "defaultValue": "[deployment().properties.templateLink.uri]"
            },
            "_artifactsLocationSasToken": {
              "type": "secureString",
              "defaultValue": ""
            },
            "_pidEnd": {
              "type": "string"
            },
            "_pidStart": {
              "type": "string"
            },
            "aciResourcePermissions": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "true to use resource or workspace permissions. false to require workspace permissions."
              }
            },
            "aciRetentionInDays": {
              "type": "int",
              "defaultValue": 120,
              "metadata": {
                "description": "Number of days to retain data in Azure Monitor workspace."
              }
            },
            "aciWorkspaceSku": {
              "type": "string",
              "defaultValue": "pergb2018",
              "metadata": {
                "description": "Pricing tier: PerGB2018 or legacy tiers (Free, Standalone, PerNode, Standard or Premium) which are not available to all customers."
              }
            },
            "acrName": {
              "type": "string",
              "defaultValue": ""
            },
            "aksAgentPoolName": {
              "type": "string",
              "defaultValue": "agentpool",
              "metadata": {
                "description": "The name for this node pool. Node pool must contain only lowercase letters and numbers. For Linux node pools the name cannot be longer than 12 characters."
              },
              "minLength": 1,
              "maxLength": 12
            },
            "aksAgentPoolNodeCount": {
              "type": "int",
              "defaultValue": 3,
              "metadata": {
                "description": "The number of nodes that should be created along with the cluster. You will be able to resize the cluster later."
              },
              "minValue": 1,
              "maxValue": 10000
            },
            "aksAgentPoolVMSize": {
              "type": "string",
              "defaultValue": "Standard_DS2_v2",
              "metadata": {
                "description": "The size of the virtual machines that will form the nodes in the cluster. This cannot be changed after creating the cluster"
              }
            },
            "aksClusterNamePrefix": {
              "type": "string",
              "defaultValue": "wlsonaks",
              "metadata": {
                "description": "Prefix for cluster name. Only The name can contain only letters, numbers, underscores and hyphens. The name must start with letter or number."
              }
            },
            "aksClusterRGName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Resource group name of an existing AKS cluster."
              }
            },
            "aksClusterName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of an existing AKS cluster."
              }
            },
            "aksVersion": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "The AKS version."
              }
            },
            "appPackageUrls": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Urls of Java EE application packages."
              }
            },
            "appReplicas": {
              "type": "int",
              "defaultValue": 2,
              "metadata": {
                "description": "The number of managed server to start."
              }
            },
            "createACR": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "true to create a new Azure Container Registry."
              }
            },
            "createAKSCluster": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "true to create a new AKS cluster."
              }
            },
            "createStorageAccount": {
              "type": "bool",
              "defaultValue": false
            },
            "enableAzureMonitoring": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "In addition to the CPU and memory metrics included in AKS by default, you can enable Container Insights for more comprehensive data on the overall performance and health of your cluster. Billing is based on data ingestion and retention settings."
              }
            },
            "enableCustomSSL": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "true to create persistent volume using file share."
              }
            },
            "enableAdminT3Tunneling": {
              "type": "bool",
              "defaultValue": false
            },
            "enableClusterT3Tunneling": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePV": {
              "type": "bool",
              "defaultValue": false
            },
            "identity": {
              "type": "object",
              "metadata": {
                "description": "An user assigned managed identity. Make sure the identity has permission to create/update/delete/list Azure resources."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "eastus"
            },
            "managedServerPrefix": {
              "type": "string",
              "defaultValue": "managed-server",
              "metadata": {
                "description": "Name prefix of managed server."
              }
            },
            "ocrSSOPSW": {
              "type": "secureString",
              "metadata": {
                "description": "Password of Oracle SSO account."
              }
            },
            "ocrSSOUser": {
              "type": "string",
              "metadata": {
                "description": "User name of Oracle SSO account."
              }
            },
            "storageAccountName": {
              "type": "string"
            },
            "t3ChannelAdminPort": {
              "type": "int",
              "defaultValue": 7005
            },
            "t3ChannelClusterPort": {
              "type": "int",
              "defaultValue": 8011
            },
            "userProvidedAcr": {
              "type": "string",
              "defaultValue": "null"
            },
            "userProvidedImagePath": {
              "type": "string",
              "defaultValue": "null"
            },
            "useOracleImage": {
              "type": "bool",
              "defaultValue": true
            },
            "wdtRuntimePassword": {
              "type": "secureString",
              "metadata": {
                "description": "Password for model WebLogic Deploy Tooling runtime encrytion."
              }
            },
            "wlsClusterSize": {
              "type": "int",
              "defaultValue": 5,
              "metadata": {
                "description": "Maximum cluster size."
              }
            },
            "wlsCPU": {
              "type": "string",
              "defaultValue": "200m",
              "metadata": {
                "description": "Requests for CPU resources for admin server and managed server."
              }
            },
            "wlsDomainName": {
              "type": "string",
              "defaultValue": "domain1",
              "metadata": {
                "description": "Name of WebLogic domain to create."
              }
            },
            "wlsDomainUID": {
              "type": "string",
              "defaultValue": "sample-domain1",
              "metadata": {
                "description": "UID of WebLogic domain, used in WebLogic Operator."
              }
            },
            "wlsIdentityKeyStoreData": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsIdentityKeyStorePassphrase": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsIdentityKeyStoreType": {
              "type": "string",
              "defaultValue": "PKCS12",
              "allowedValues": [
                "JKS",
                "PKCS12"
              ]
            },
            "wlsImageTag": {
              "type": "string",
              "defaultValue": "12.2.1.4",
              "metadata": {
                "description": "Docker tag that comes after \"container-registry.oracle.com/middleware/weblogic:\""
              }
            },
            "wlsJavaOption": {
              "type": "string",
              "defaultValue": "null"
            },
            "wlsMemory": {
              "type": "string",
              "defaultValue": "1.5Gi",
              "metadata": {
                "description": "Memory requests for admin server and managed server."
              }
            },
            "wlsPassword": {
              "type": "secureString"
            },
            "wlsPrivateKeyAlias": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsPrivateKeyPassPhrase": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsTrustKeyStoreData": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsTrustKeyStorePassPhrase": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsTrustKeyStoreType": {
              "type": "string",
              "defaultValue": "PKCS12",
              "allowedValues": [
                "JKS",
                "PKCS12"
              ]
            },
            "wlsUserName": {
              "type": "string",
              "defaultValue": "weblogic",
              "metadata": {
                "description": "User name for WebLogic Administrator."
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "wls-aks-start-pid-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidStart')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "8805472380936134177"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1008.15138",
                              "templateHash": "14669053462841078328"
                            }
                          },
                          "functions": [],
                          "resources": []
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "38647ff6-ea8d-59e5-832d-b036a4d29c73"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "8ba7beaa-96fd-576a-acd8-28f7a6efa83a"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "ffab0a3f-90cb-585a-a7f9-ec0a62faeec1"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "e64361eb-fea0-5f15-a313-c76daadbc648"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "39d32fcd-1d02-50b6-9455-4b767a8e769e"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "ed47756f-2475-56dd-b13a-26027749b6e1"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "17328b4d-841f-57b5-a9c5-861ad48f9d0d"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "c46a11b1-e8d2-5053-9741-45294b2e15c9"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "18121d1c-4227-51ff-a9fa-ceb890d683e3"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4218fc54-4b9b-5e5c-b6a9-bc8736c25b68"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('createAKSCluster')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "aks-cluster-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aciResourcePermissions": {
                    "value": "[parameters('aciResourcePermissions')]"
                  },
                  "aciRetentionInDays": {
                    "value": "[parameters('aciRetentionInDays')]"
                  },
                  "aciWorkspaceSku": {
                    "value": "[parameters('aciWorkspaceSku')]"
                  },
                  "aksAgentPoolName": {
                    "value": "[parameters('aksAgentPoolName')]"
                  },
                  "aksAgentPoolNodeCount": {
                    "value": "[parameters('aksAgentPoolNodeCount')]"
                  },
                  "aksAgentPoolVMSize": {
                    "value": "[parameters('aksAgentPoolVMSize')]"
                  },
                  "aksClusterNamePrefix": {
                    "value": "[parameters('aksClusterNamePrefix')]"
                  },
                  "aksVersion": {
                    "value": "[parameters('aksVersion')]"
                  },
                  "enableAzureMonitoring": {
                    "value": "[parameters('enableAzureMonitoring')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "1662521445991274672"
                    }
                  },
                  "parameters": {
                    "aciResourcePermissions": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "true to use resource or workspace permissions. false to require workspace permissions."
                      }
                    },
                    "aciRetentionInDays": {
                      "type": "int",
                      "defaultValue": 120,
                      "metadata": {
                        "description": "Number of days to retain data in Azure Monitor workspace."
                      }
                    },
                    "aciWorkspaceSku": {
                      "type": "string",
                      "defaultValue": "pergb2018",
                      "metadata": {
                        "description": "Pricing tier: PerGB2018 or legacy tiers (Free, Standalone, PerNode, Standard or Premium) which are not available to all customers."
                      }
                    },
                    "aksAgentPoolName": {
                      "type": "string",
                      "defaultValue": "agentpool",
                      "metadata": {
                        "description": "The name for this node pool. Node pool must contain only lowercase letters and numbers. For Linux node pools the name cannot be longer than 12 characters."
                      },
                      "minLength": 1,
                      "maxLength": 12
                    },
                    "aksAgentPoolNodeCount": {
                      "type": "int",
                      "defaultValue": 3,
                      "metadata": {
                        "description": "The number of nodes that should be created along with the cluster. You will be able to resize the cluster later."
                      },
                      "minValue": 1,
                      "maxValue": 10000
                    },
                    "aksAgentPoolVMSize": {
                      "type": "string",
                      "defaultValue": "Standard_DS2_v2",
                      "metadata": {
                        "description": "The size of the virtual machines that will form the nodes in the cluster. This cannot be changed after creating the cluster"
                      }
                    },
                    "aksClusterNamePrefix": {
                      "type": "string",
                      "defaultValue": "wlsonaks",
                      "metadata": {
                        "description": "Prefix for cluster name. Only The name can contain only letters, numbers, underscores and hyphens. The name must start with letter or number."
                      }
                    },
                    "aksVersion": {
                      "type": "string",
                      "defaultValue": "default"
                    },
                    "enableAzureMonitoring": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "In addition to the CPU and memory metrics included in AKS by default, you can enable Container Insights for more comprehensive data on the overall performance and health of your cluster. Billing is based on data ingestion and retention settings."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "eastus"
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_aksAgentPoolOSDiskSizeGB": 128,
                    "const_aksAgentPoolMaxPods": 110,
                    "const_aksAvailabilityZones": [
                      "1",
                      "2",
                      "3"
                    ],
                    "name_aciWorkspace": "[format('Workspace-{0}-{1}', guid(parameters('utcValue')), parameters('location'))]",
                    "name_aksClusterNameDefault": "[format('{0}0{1}', parameters('aksClusterNamePrefix'), uniqueString(parameters('utcValue')))]",
                    "name_aksClusterNameForSV": "[format('{0}1{1}', parameters('aksClusterNamePrefix'), uniqueString(parameters('utcValue')))]",
                    "obj_aciDisableOmsAgent": {
                      "enabled": false
                    },
                    "obj_aciEnableOmsAgent": {
                      "enabled": true,
                      "config": {
                        "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('name_aciWorkspace'))]"
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableAzureMonitoring')]",
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2020-08-01",
                      "name": "[variables('name_aciWorkspace')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "sku": {
                          "name": "[parameters('aciWorkspaceSku')]"
                        },
                        "retentionInDays": "[parameters('aciRetentionInDays')]",
                        "features": {
                          "searchVersion": 1,
                          "legacy": 0,
                          "enableLogAccessUsingOnlyResourcePermissions": "[parameters('aciResourcePermissions')]"
                        }
                      }
                    },
                    {
                      "condition": "[contains(parameters('aksVersion'), 'default')]",
                      "type": "Microsoft.ContainerService/managedClusters",
                      "apiVersion": "2021-02-01",
                      "name": "[variables('name_aksClusterNameDefault')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "dnsPrefix": "[format('{0}-dns', variables('name_aksClusterNameDefault'))]",
                        "agentPoolProfiles": [
                          {
                            "name": "[parameters('aksAgentPoolName')]",
                            "count": "[parameters('aksAgentPoolNodeCount')]",
                            "vmSize": "[parameters('aksAgentPoolVMSize')]",
                            "osDiskSizeGB": "[variables('const_aksAgentPoolOSDiskSizeGB')]",
                            "osDiskType": "Managed",
                            "kubeletDiskType": "OS",
                            "maxPods": "[variables('const_aksAgentPoolMaxPods')]",
                            "type": "VirtualMachineScaleSets",
                            "availabilityZones": "[variables('const_aksAvailabilityZones')]",
                            "nodeLabels": {},
                            "mode": "System",
                            "osType": "Linux"
                          }
                        ],
                        "addonProfiles": {
                          "KubeDashboard": {
                            "enabled": false
                          },
                          "azurepolicy": {
                            "enabled": false
                          },
                          "httpApplicationRouting": {
                            "enabled": false
                          },
                          "omsAgent": "[if(parameters('enableAzureMonitoring'), variables('obj_aciEnableOmsAgent'), variables('obj_aciDisableOmsAgent'))]"
                        },
                        "enableRBAC": true,
                        "networkProfile": {
                          "networkPlugin": "kubenet",
                          "loadBalancerSku": "standard"
                        }
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('name_aciWorkspace'))]"
                      ]
                    },
                    {
                      "condition": "[not(contains(parameters('aksVersion'), 'default'))]",
                      "type": "Microsoft.ContainerService/managedClusters",
                      "apiVersion": "2021-02-01",
                      "name": "[variables('name_aksClusterNameForSV')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "kubernetesVersion": "[format('{0}', parameters('aksVersion'))]",
                        "dnsPrefix": "[format('{0}-dns', variables('name_aksClusterNameForSV'))]",
                        "agentPoolProfiles": [
                          {
                            "name": "[parameters('aksAgentPoolName')]",
                            "count": "[parameters('aksAgentPoolNodeCount')]",
                            "vmSize": "[parameters('aksAgentPoolVMSize')]",
                            "osDiskSizeGB": "[variables('const_aksAgentPoolOSDiskSizeGB')]",
                            "osDiskType": "Managed",
                            "kubeletDiskType": "OS",
                            "maxPods": "[variables('const_aksAgentPoolMaxPods')]",
                            "type": "VirtualMachineScaleSets",
                            "availabilityZones": "[variables('const_aksAvailabilityZones')]",
                            "nodeLabels": {},
                            "mode": "System",
                            "osType": "Linux"
                          }
                        ],
                        "addonProfiles": {
                          "KubeDashboard": {
                            "enabled": false
                          },
                          "azurepolicy": {
                            "enabled": false
                          },
                          "httpApplicationRouting": {
                            "enabled": false
                          },
                          "omsAgent": {
                            "enabled": "[bool(format('{0}', parameters('enableAzureMonitoring')))]"
                          }
                        },
                        "enableRBAC": true,
                        "networkProfile": {
                          "networkPlugin": "kubenet",
                          "loadBalancerSku": "standard"
                        }
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      }
                    }
                  ],
                  "outputs": {
                    "aksClusterName": {
                      "type": "string",
                      "value": "[if(equals(format('{0}', parameters('aksVersion')), 'default'), variables('name_aksClusterNameDefault'), variables('name_aksClusterNameForSV'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'wls-aks-start-pid-deployment')]"
              ]
            },
            {
              "condition": "[and(parameters('useOracleImage'), parameters('createACR'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "acr-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "16999541500289008629"
                    }
                  },
                  "parameters": {
                    "acrNamePrefix": {
                      "type": "string",
                      "defaultValue": "wlsaksacr"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "eastus"
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "name_acr": "[format('{0}{1}', parameters('acrNamePrefix'), uniqueString(parameters('utcValue')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ContainerRegistry/registries",
                      "apiVersion": "2020-11-01-preview",
                      "name": "[variables('name_acr')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Standard",
                        "tier": "Standard"
                      },
                      "properties": {
                        "adminUserEnabled": true,
                        "policies": {
                          "quarantinePolicy": {
                            "status": "disabled"
                          },
                          "trustPolicy": {
                            "type": "Notary",
                            "status": "disabled"
                          },
                          "retentionPolicy": {
                            "days": 7,
                            "status": "disabled"
                          }
                        },
                        "encryption": {
                          "status": "disabled"
                        },
                        "dataEndpointEnabled": false,
                        "publicNetworkAccess": "Enabled",
                        "networkRuleBypassOptions": "AzureServices",
                        "zoneRedundancy": "Disabled",
                        "anonymousPullEnabled": false
                      }
                    }
                  ],
                  "outputs": {
                    "acrName": {
                      "type": "string",
                      "value": "[variables('name_acr')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'wls-aks-start-pid-deployment')]"
              ]
            },
            {
              "condition": "[parameters('createStorageAccount')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "storage-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "9546408933814304658"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "eastus"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_shareQuota": 5120,
                    "const_sku": "Standard_LRS",
                    "name_fileShare": "weblogic"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-02-01",
                      "name": "[parameters('storageAccountName')]",
                      "location": "[parameters('location')]",
                      "kind": "StorageV2",
                      "sku": {
                        "name": "[variables('const_sku')]",
                        "tier": "Standard"
                      },
                      "properties": {
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "virtualNetworkRules": [],
                          "ipRules": [],
                          "defaultAction": "Allow"
                        },
                        "supportsHttpsTrafficOnly": true,
                        "encryption": {
                          "services": {
                            "file": {
                              "keyType": "Account",
                              "enabled": true
                            }
                          },
                          "keySource": "Microsoft.Storage"
                        },
                        "accessTier": "Hot"
                      },
                      "tags": {
                        "managed-by-azure-weblogic": "[parameters('utcValue')]"
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/default/{1}', parameters('storageAccountName'), variables('name_fileShare'))]",
                      "properties": {
                        "accessTier": "TransactionOptimized",
                        "shareQuota": "[variables('const_shareQuota')]",
                        "enabledProtocols": "SMB"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'wls-aks-start-pid-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "wls-domain-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "_artifactsLocation": {
                    "value": "[parameters('_artifactsLocation')]"
                  },
                  "_artifactsLocationSasToken": {
                    "value": "[parameters('_artifactsLocationSasToken')]"
                  },
                  "aksClusterRGName": {
                    "value": "[if(parameters('createAKSCluster'), resourceGroup().name, parameters('aksClusterRGName'))]"
                  },
                  "aksClusterName": {
                    "value": "[if(parameters('createAKSCluster'), reference(resourceId('Microsoft.Resources/deployments', 'aks-cluster-deployment'), '2020-06-01').outputs.aksClusterName.value, parameters('aksClusterName'))]"
                  },
                  "acrName": {
                    "value": "[if(parameters('useOracleImage'), if(parameters('createACR'), reference(resourceId('Microsoft.Resources/deployments', 'acr-deployment'), '2020-06-01').outputs.acrName.value, parameters('acrName')), parameters('userProvidedAcr'))]"
                  },
                  "appPackageUrls": {
                    "value": "[parameters('appPackageUrls')]"
                  },
                  "appReplicas": {
                    "value": "[parameters('appReplicas')]"
                  },
                  "enableCustomSSL": {
                    "value": "[parameters('enableCustomSSL')]"
                  },
                  "enableAdminT3Tunneling": {
                    "value": "[parameters('enableAdminT3Tunneling')]"
                  },
                  "enableClusterT3Tunneling": {
                    "value": "[parameters('enableClusterT3Tunneling')]"
                  },
                  "enablePV": {
                    "value": "[parameters('enablePV')]"
                  },
                  "identity": {
                    "value": "[parameters('identity')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "managedServerPrefix": {
                    "value": "[parameters('managedServerPrefix')]"
                  },
                  "ocrSSOUser": {
                    "value": "[parameters('ocrSSOUser')]"
                  },
                  "ocrSSOPSW": {
                    "value": "[parameters('ocrSSOPSW')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "t3ChannelAdminPort": {
                    "value": "[parameters('t3ChannelAdminPort')]"
                  },
                  "t3ChannelClusterPort": {
                    "value": "[parameters('t3ChannelClusterPort')]"
                  },
                  "userProvidedImagePath": {
                    "value": "[parameters('userProvidedImagePath')]"
                  },
                  "useOracleImage": {
                    "value": "[parameters('useOracleImage')]"
                  },
                  "wdtRuntimePassword": {
                    "value": "[parameters('wdtRuntimePassword')]"
                  },
                  "wlsClusterSize": {
                    "value": "[parameters('wlsClusterSize')]"
                  },
                  "wlsCPU": {
                    "value": "[parameters('wlsCPU')]"
                  },
                  "wlsDomainName": {
                    "value": "[parameters('wlsDomainName')]"
                  },
                  "wlsDomainUID": {
                    "value": "[parameters('wlsDomainUID')]"
                  },
                  "wlsIdentityKeyStoreData": {
                    "value": "[parameters('wlsIdentityKeyStoreData')]"
                  },
                  "wlsIdentityKeyStorePassphrase": {
                    "value": "[parameters('wlsIdentityKeyStorePassphrase')]"
                  },
                  "wlsIdentityKeyStoreType": {
                    "value": "[parameters('wlsIdentityKeyStoreType')]"
                  },
                  "wlsImageTag": {
                    "value": "[parameters('wlsImageTag')]"
                  },
                  "wlsJavaOption": {
                    "value": "[parameters('wlsJavaOption')]"
                  },
                  "wlsMemory": {
                    "value": "[parameters('wlsMemory')]"
                  },
                  "wlsPassword": {
                    "value": "[parameters('wlsPassword')]"
                  },
                  "wlsPrivateKeyAlias": {
                    "value": "[parameters('wlsPrivateKeyAlias')]"
                  },
                  "wlsPrivateKeyPassPhrase": {
                    "value": "[parameters('wlsPrivateKeyPassPhrase')]"
                  },
                  "wlsTrustKeyStoreData": {
                    "value": "[parameters('wlsTrustKeyStoreData')]"
                  },
                  "wlsTrustKeyStorePassPhrase": {
                    "value": "[parameters('wlsTrustKeyStorePassPhrase')]"
                  },
                  "wlsTrustKeyStoreType": {
                    "value": "[parameters('wlsTrustKeyStoreType')]"
                  },
                  "wlsUserName": {
                    "value": "[parameters('wlsUserName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "8791274137507390004"
                    }
                  },
                  "parameters": {
                    "_artifactsLocation": {
                      "type": "string"
                    },
                    "_artifactsLocationSasToken": {
                      "type": "secureString",
                      "defaultValue": ""
                    },
                    "aksClusterRGName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "aksClusterName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "acrName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "appPackageUrls": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "appReplicas": {
                      "type": "int",
                      "defaultValue": 2
                    },
                    "enableCustomSSL": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableAdminT3Tunneling": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableClusterT3Tunneling": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enablePV": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "identity": {
                      "type": "object"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "eastus"
                    },
                    "managedServerPrefix": {
                      "type": "string",
                      "defaultValue": "managed-server"
                    },
                    "ocrSSOPSW": {
                      "type": "secureString"
                    },
                    "ocrSSOUser": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string",
                      "defaultValue": "null"
                    },
                    "t3ChannelAdminPort": {
                      "type": "int",
                      "defaultValue": 7005
                    },
                    "t3ChannelClusterPort": {
                      "type": "int",
                      "defaultValue": 8011
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    },
                    "userProvidedImagePath": {
                      "type": "string",
                      "defaultValue": "null"
                    },
                    "useOracleImage": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "wdtRuntimePassword": {
                      "type": "secureString"
                    },
                    "wlsClusterSize": {
                      "type": "int",
                      "defaultValue": 5
                    },
                    "wlsCPU": {
                      "type": "string",
                      "defaultValue": "200m"
                    },
                    "wlsDomainName": {
                      "type": "string",
                      "defaultValue": "domain1"
                    },
                    "wlsDomainUID": {
                      "type": "string",
                      "defaultValue": "sample-domain1"
                    },
                    "wlsIdentityKeyStoreData": {
                      "type": "string",
                      "defaultValue": "null"
                    },
                    "wlsIdentityKeyStorePassphrase": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "wlsIdentityKeyStoreType": {
                      "type": "string",
                      "defaultValue": "PKCS12",
                      "allowedValues": [
                        "JKS",
                        "PKCS12"
                      ]
                    },
                    "wlsImageTag": {
                      "type": "string",
                      "defaultValue": "12.2.1.4"
                    },
                    "wlsJavaOption": {
                      "type": "string",
                      "defaultValue": "null"
                    },
                    "wlsMemory": {
                      "type": "string",
                      "defaultValue": "1.5Gi"
                    },
                    "wlsPassword": {
                      "type": "secureString"
                    },
                    "wlsPrivateKeyAlias": {
                      "type": "string",
                      "defaultValue": "contoso"
                    },
                    "wlsPrivateKeyPassPhrase": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "wlsTrustKeyStoreData": {
                      "type": "string",
                      "defaultValue": "null"
                    },
                    "wlsTrustKeyStorePassPhrase": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "wlsTrustKeyStoreType": {
                      "type": "string",
                      "defaultValue": "PKCS12",
                      "allowedValues": [
                        "JKS",
                        "PKCS12"
                      ]
                    },
                    "wlsUserName": {
                      "type": "string",
                      "defaultValue": "weblogic"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_arguments": "[format('{0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16} {17} {18} {19} {20} {21} {22} {23} {24} {25} {26} {27} {28} {29} {30} {31} {32} {33} \"{34}\" {35} {36}', parameters('ocrSSOUser'), parameters('ocrSSOPSW'), parameters('aksClusterRGName'), parameters('aksClusterName'), parameters('wlsImageTag'), parameters('acrName'), parameters('wlsDomainName'), parameters('wlsDomainUID'), parameters('wlsUserName'), parameters('wlsPassword'), parameters('wdtRuntimePassword'), parameters('wlsCPU'), parameters('wlsMemory'), parameters('managedServerPrefix'), parameters('appReplicas'), string(parameters('appPackageUrls')), resourceGroup().name, variables('const_scriptLocation'), parameters('storageAccountName'), parameters('wlsClusterSize'), parameters('enableCustomSSL'), parameters('wlsIdentityKeyStoreData'), parameters('wlsIdentityKeyStorePassphrase'), parameters('wlsIdentityKeyStoreType'), parameters('wlsPrivateKeyAlias'), parameters('wlsPrivateKeyPassPhrase'), parameters('wlsTrustKeyStoreData'), parameters('wlsTrustKeyStorePassPhrase'), parameters('wlsTrustKeyStoreType'), parameters('enablePV'), parameters('enableAdminT3Tunneling'), parameters('enableClusterT3Tunneling'), parameters('t3ChannelAdminPort'), parameters('t3ChannelClusterPort'), parameters('wlsJavaOption'), parameters('userProvidedImagePath'), parameters('useOracleImage'))]",
                    "const_buildDockerImageScript": "createVMAndBuildImage.sh",
                    "const_commonScript": "common.sh",
                    "const_invokeSetUpDomainScript": "invokeSetupWLSDomain.sh",
                    "const_pvTempalte": "pv.yaml.template",
                    "const_pvcTempalte": "pvc.yaml.template",
                    "const_scriptLocation": "[uri(parameters('_artifactsLocation'), 'scripts/')]",
                    "const_genDomainConfigScript": "genDomainConfig.sh",
                    "const_setUpDomainScript": "setupWLSDomain.sh",
                    "const_updateDomainConfigScript": "updateDomainConfig.sh",
                    "const_utilityScript": "utility.sh"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "ds-wls-cluster-creation",
                      "location": "[parameters('location')]",
                      "kind": "AzureCLI",
                      "identity": "[parameters('identity')]",
                      "properties": {
                        "azCliVersion": "2.15.0",
                        "arguments": "[variables('const_arguments')]",
                        "primaryScriptUri": "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_invokeSetUpDomainScript'), parameters('_artifactsLocationSasToken')))]",
                        "supportingScriptUris": [
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_setUpDomainScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_genDomainConfigScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_utilityScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_pvTempalte'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_pvcTempalte'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_commonScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_buildDockerImageScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_updateDomainConfigScript'), parameters('_artifactsLocationSasToken')))]"
                        ],
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D",
                        "forceUpdateTag": "[parameters('utcValue')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'acr-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'aks-cluster-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'storage-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "wls-aks-end-pid-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidEnd')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "8805472380936134177"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1008.15138",
                              "templateHash": "14669053462841078328"
                            }
                          },
                          "functions": [],
                          "resources": []
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "38647ff6-ea8d-59e5-832d-b036a4d29c73"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "8ba7beaa-96fd-576a-acd8-28f7a6efa83a"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "ffab0a3f-90cb-585a-a7f9-ec0a62faeec1"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "e64361eb-fea0-5f15-a313-c76daadbc648"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "39d32fcd-1d02-50b6-9455-4b767a8e769e"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "ed47756f-2475-56dd-b13a-26027749b6e1"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "17328b4d-841f-57b5-a9c5-861ad48f9d0d"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "c46a11b1-e8d2-5053-9741-45294b2e15c9"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "18121d1c-4227-51ff-a9fa-ceb890d683e3"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4218fc54-4b9b-5e5c-b6a9-bc8736c25b68"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'wls-domain-deployment')]"
              ]
            }
          ],
          "outputs": {
            "aksClusterName": {
              "type": "string",
              "value": "[if(parameters('createAKSCluster'), reference(resourceId('Microsoft.Resources/deployments', 'aks-cluster-deployment'), '2020-06-01').outputs.aksClusterName.value, parameters('aksClusterName'))]"
            },
            "aksClusterRGName": {
              "type": "string",
              "value": "[if(parameters('createAKSCluster'), resourceGroup().name, parameters('aksClusterRGName'))]"
            },
            "adminServerUrl": {
              "type": "string",
              "value": "[format('http://{0}-admin-server.{0}-ns.svc.cluster.local:7001/console', parameters('wlsDomainUID'))]"
            },
            "adminServerT3InternalUrl": {
              "type": "string",
              "value": "[if(parameters('enableAdminT3Tunneling'), format('{0}://{1}-admin-server.{1}-ns.svc.cluster.local:{2}', if(parameters('enableCustomSSL'), 't3s', 't3'), parameters('wlsDomainUID'), parameters('t3ChannelAdminPort')), '')]"
            },
            "clusterSVCUrl": {
              "type": "string",
              "value": "[format('http://{0}-cluster-cluster-1.{0}-ns.svc.cluster.local:8001/', parameters('wlsDomainUID'))]"
            },
            "clusterT3InternalUrl": {
              "type": "string",
              "value": "[if(parameters('enableClusterT3Tunneling'), format('{0}://{1}-cluster-cluster-1.{1}-ns.svc.cluster.local:{2}', if(parameters('enableCustomSSL'), 't3s', 't3'), parameters('wlsDomainUID'), parameters('t3ChannelClusterPort')), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'initialization')]",
        "[resourceId('Microsoft.Resources/deployments', 'query-existing-storage-account')]",
        "[resourceId('Microsoft.Resources/deployments', 'validate-parameters-and-fail-fast')]"
      ]
    },
    {
      "condition": "[parameters('enableCustomSSL')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "setup-wls-cluster-with-custom-ssl-enabled",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "_pidEnd": {
            "value": "[if(equals(reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2020-06-01').outputs.wlsAKSEnd.value, ''), variables('name_defaultPidDeployment'), reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2020-06-01').outputs.wlsAKSEnd.value)]"
          },
          "_pidStart": {
            "value": "[if(equals(reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2020-06-01').outputs.wlsAKSStart.value, ''), variables('name_defaultPidDeployment'), reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2020-06-01').outputs.wlsAKSStart.value)]"
          },
          "aciResourcePermissions": {
            "value": "[parameters('aciResourcePermissions')]"
          },
          "aciRetentionInDays": {
            "value": "[parameters('aciRetentionInDays')]"
          },
          "aciWorkspaceSku": {
            "value": "[parameters('aciWorkspaceSku')]"
          },
          "acrName": {
            "value": "[parameters('acrName')]"
          },
          "aksAgentPoolName": {
            "value": "[parameters('aksAgentPoolName')]"
          },
          "aksAgentPoolNodeCount": {
            "value": "[parameters('aksAgentPoolNodeCount')]"
          },
          "aksAgentPoolVMSize": {
            "value": "[parameters('aksAgentPoolVMSize')]"
          },
          "aksClusterNamePrefix": {
            "value": "[parameters('aksClusterNamePrefix')]"
          },
          "aksClusterRGName": {
            "value": "[parameters('aksClusterRGName')]"
          },
          "aksClusterName": {
            "value": "[parameters('aksClusterName')]"
          },
          "aksVersion": {
            "value": "[parameters('aksVersion')]"
          },
          "appPackageUrls": {
            "value": "[parameters('appPackageUrls')]"
          },
          "appReplicas": {
            "value": "[parameters('appReplicas')]"
          },
          "createACR": {
            "value": "[parameters('createACR')]"
          },
          "createAKSCluster": {
            "value": "[parameters('createAKSCluster')]"
          },
          "createStorageAccount": {
            "value": "[and(or(parameters('createAKSCluster'), not(and(not(parameters('createAKSCluster')), not(equals(reference('query-existing-storage-account').outputs.storageAccount.value, 'null'))))), variables('const_enablePV'))]"
          },
          "enableAzureMonitoring": {
            "value": "[parameters('enableAzureMonitoring')]"
          },
          "enableCustomSSL": {
            "value": "[parameters('enableCustomSSL')]"
          },
          "enableAdminT3Tunneling": {
            "value": "[parameters('enableAdminT3Tunneling')]"
          },
          "enableClusterT3Tunneling": {
            "value": "[parameters('enableClusterT3Tunneling')]"
          },
          "enablePV": {
            "value": "[variables('const_enablePV')]"
          },
          "identity": {
            "value": "[parameters('identity')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "managedServerPrefix": {
            "value": "[parameters('managedServerPrefix')]"
          },
          "ocrSSOPSW": {
            "value": "[parameters('ocrSSOPSW')]"
          },
          "ocrSSOUser": {
            "value": "[parameters('ocrSSOUser')]"
          },
          "storageAccountName": {
            "value": "[if(and(not(parameters('createAKSCluster')), not(equals(reference('query-existing-storage-account').outputs.storageAccount.value, 'null'))), reference('query-existing-storage-account').outputs.storageAccount.value, format('wls{0}', uniqueString(parameters('utcValue'))))]"
          },
          "t3ChannelAdminPort": {
            "value": "[parameters('t3ChannelAdminPort')]"
          },
          "t3ChannelClusterPort": {
            "value": "[parameters('t3ChannelClusterPort')]"
          },
          "userProvidedAcr": {
            "value": "[parameters('userProvidedAcr')]"
          },
          "userProvidedImagePath": {
            "value": "[parameters('userProvidedImagePath')]"
          },
          "useOracleImage": {
            "value": "[parameters('useOracleImage')]"
          },
          "wdtRuntimePassword": {
            "value": "[parameters('wdtRuntimePassword')]"
          },
          "wlsClusterSize": {
            "value": "[parameters('wlsClusterSize')]"
          },
          "wlsCPU": {
            "value": "[parameters('wlsCPU')]"
          },
          "wlsDomainName": {
            "value": "[parameters('wlsDomainName')]"
          },
          "wlsDomainUID": {
            "value": "[parameters('wlsDomainUID')]"
          },
          "wlsIdentityKeyStoreData": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('name_rgKeyvaultForWLSSSL')), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultName'), variables('name_keyVaultName')))]"
              },
              "secretName": "[variables('name_identityKeyStoreDataSecret')]"
            }
          },
          "wlsIdentityKeyStorePassphrase": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('name_rgKeyvaultForWLSSSL')), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultName'), variables('name_keyVaultName')))]"
              },
              "secretName": "[variables('name_identityKeyStorePswSecret')]"
            }
          },
          "wlsIdentityKeyStoreType": {
            "value": "[variables('const_identityKeyStoreType')]"
          },
          "wlsImageTag": {
            "value": "[parameters('wlsImageTag')]"
          },
          "wlsJavaOption": {
            "value": "[variables('const_wlsJavaOptions')]"
          },
          "wlsMemory": {
            "value": "[parameters('wlsMemory')]"
          },
          "wlsPassword": {
            "value": "[parameters('wlsPassword')]"
          },
          "wlsPrivateKeyAlias": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('name_rgKeyvaultForWLSSSL')), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultName'), variables('name_keyVaultName')))]"
              },
              "secretName": "[variables('name_privateKeyAliasSecret')]"
            }
          },
          "wlsPrivateKeyPassPhrase": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('name_rgKeyvaultForWLSSSL')), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultName'), variables('name_keyVaultName')))]"
              },
              "secretName": "[variables('name_privateKeyPswSecret')]"
            }
          },
          "wlsTrustKeyStoreData": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('name_rgKeyvaultForWLSSSL')), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultName'), variables('name_keyVaultName')))]"
              },
              "secretName": "[variables('name_trustKeyStoreDataSecret')]"
            }
          },
          "wlsTrustKeyStorePassPhrase": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('name_rgKeyvaultForWLSSSL')), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultName'), variables('name_keyVaultName')))]"
              },
              "secretName": "[variables('name_trustKeyStorePswSecret')]"
            }
          },
          "wlsTrustKeyStoreType": {
            "value": "[variables('const_trustKeyStoreType')]"
          },
          "wlsUserName": {
            "value": "[parameters('wlsUserName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "1033344631092920833"
            }
          },
          "parameters": {
            "_artifactsLocation": {
              "type": "string",
              "defaultValue": "[deployment().properties.templateLink.uri]"
            },
            "_artifactsLocationSasToken": {
              "type": "secureString",
              "defaultValue": ""
            },
            "_pidEnd": {
              "type": "string"
            },
            "_pidStart": {
              "type": "string"
            },
            "aciResourcePermissions": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "true to use resource or workspace permissions. false to require workspace permissions."
              }
            },
            "aciRetentionInDays": {
              "type": "int",
              "defaultValue": 120,
              "metadata": {
                "description": "Number of days to retain data in Azure Monitor workspace."
              }
            },
            "aciWorkspaceSku": {
              "type": "string",
              "defaultValue": "pergb2018",
              "metadata": {
                "description": "Pricing tier: PerGB2018 or legacy tiers (Free, Standalone, PerNode, Standard or Premium) which are not available to all customers."
              }
            },
            "acrName": {
              "type": "string",
              "defaultValue": ""
            },
            "aksAgentPoolName": {
              "type": "string",
              "defaultValue": "agentpool",
              "metadata": {
                "description": "The name for this node pool. Node pool must contain only lowercase letters and numbers. For Linux node pools the name cannot be longer than 12 characters."
              },
              "minLength": 1,
              "maxLength": 12
            },
            "aksAgentPoolNodeCount": {
              "type": "int",
              "defaultValue": 3,
              "metadata": {
                "description": "The number of nodes that should be created along with the cluster. You will be able to resize the cluster later."
              },
              "minValue": 1,
              "maxValue": 10000
            },
            "aksAgentPoolVMSize": {
              "type": "string",
              "defaultValue": "Standard_DS2_v2",
              "metadata": {
                "description": "The size of the virtual machines that will form the nodes in the cluster. This cannot be changed after creating the cluster"
              }
            },
            "aksClusterNamePrefix": {
              "type": "string",
              "defaultValue": "wlsonaks",
              "metadata": {
                "description": "Prefix for cluster name. Only The name can contain only letters, numbers, underscores and hyphens. The name must start with letter or number."
              }
            },
            "aksClusterRGName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Resource group name of an existing AKS cluster."
              }
            },
            "aksClusterName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of an existing AKS cluster."
              }
            },
            "aksVersion": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "The AKS version."
              }
            },
            "appPackageUrls": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Urls of Java EE application packages."
              }
            },
            "appReplicas": {
              "type": "int",
              "defaultValue": 2,
              "metadata": {
                "description": "The number of managed server to start."
              }
            },
            "createACR": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "true to create a new Azure Container Registry."
              }
            },
            "createAKSCluster": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "true to create a new AKS cluster."
              }
            },
            "createStorageAccount": {
              "type": "bool",
              "defaultValue": false
            },
            "enableAzureMonitoring": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "In addition to the CPU and memory metrics included in AKS by default, you can enable Container Insights for more comprehensive data on the overall performance and health of your cluster. Billing is based on data ingestion and retention settings."
              }
            },
            "enableCustomSSL": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "true to create persistent volume using file share."
              }
            },
            "enableAdminT3Tunneling": {
              "type": "bool",
              "defaultValue": false
            },
            "enableClusterT3Tunneling": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePV": {
              "type": "bool",
              "defaultValue": false
            },
            "identity": {
              "type": "object",
              "metadata": {
                "description": "An user assigned managed identity. Make sure the identity has permission to create/update/delete/list Azure resources."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "eastus"
            },
            "managedServerPrefix": {
              "type": "string",
              "defaultValue": "managed-server",
              "metadata": {
                "description": "Name prefix of managed server."
              }
            },
            "ocrSSOPSW": {
              "type": "secureString",
              "metadata": {
                "description": "Password of Oracle SSO account."
              }
            },
            "ocrSSOUser": {
              "type": "string",
              "metadata": {
                "description": "User name of Oracle SSO account."
              }
            },
            "storageAccountName": {
              "type": "string"
            },
            "t3ChannelAdminPort": {
              "type": "int",
              "defaultValue": 7005
            },
            "t3ChannelClusterPort": {
              "type": "int",
              "defaultValue": 8011
            },
            "userProvidedAcr": {
              "type": "string",
              "defaultValue": "null"
            },
            "userProvidedImagePath": {
              "type": "string",
              "defaultValue": "null"
            },
            "useOracleImage": {
              "type": "bool",
              "defaultValue": true
            },
            "wdtRuntimePassword": {
              "type": "secureString",
              "metadata": {
                "description": "Password for model WebLogic Deploy Tooling runtime encrytion."
              }
            },
            "wlsClusterSize": {
              "type": "int",
              "defaultValue": 5,
              "metadata": {
                "description": "Maximum cluster size."
              }
            },
            "wlsCPU": {
              "type": "string",
              "defaultValue": "200m",
              "metadata": {
                "description": "Requests for CPU resources for admin server and managed server."
              }
            },
            "wlsDomainName": {
              "type": "string",
              "defaultValue": "domain1",
              "metadata": {
                "description": "Name of WebLogic domain to create."
              }
            },
            "wlsDomainUID": {
              "type": "string",
              "defaultValue": "sample-domain1",
              "metadata": {
                "description": "UID of WebLogic domain, used in WebLogic Operator."
              }
            },
            "wlsIdentityKeyStoreData": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsIdentityKeyStorePassphrase": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsIdentityKeyStoreType": {
              "type": "string",
              "defaultValue": "PKCS12",
              "allowedValues": [
                "JKS",
                "PKCS12"
              ]
            },
            "wlsImageTag": {
              "type": "string",
              "defaultValue": "12.2.1.4",
              "metadata": {
                "description": "Docker tag that comes after \"container-registry.oracle.com/middleware/weblogic:\""
              }
            },
            "wlsJavaOption": {
              "type": "string",
              "defaultValue": "null"
            },
            "wlsMemory": {
              "type": "string",
              "defaultValue": "1.5Gi",
              "metadata": {
                "description": "Memory requests for admin server and managed server."
              }
            },
            "wlsPassword": {
              "type": "secureString"
            },
            "wlsPrivateKeyAlias": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsPrivateKeyPassPhrase": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsTrustKeyStoreData": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsTrustKeyStorePassPhrase": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsTrustKeyStoreType": {
              "type": "string",
              "defaultValue": "PKCS12",
              "allowedValues": [
                "JKS",
                "PKCS12"
              ]
            },
            "wlsUserName": {
              "type": "string",
              "defaultValue": "weblogic",
              "metadata": {
                "description": "User name for WebLogic Administrator."
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "wls-aks-start-pid-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidStart')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "8805472380936134177"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1008.15138",
                              "templateHash": "14669053462841078328"
                            }
                          },
                          "functions": [],
                          "resources": []
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "38647ff6-ea8d-59e5-832d-b036a4d29c73"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "8ba7beaa-96fd-576a-acd8-28f7a6efa83a"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "ffab0a3f-90cb-585a-a7f9-ec0a62faeec1"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "e64361eb-fea0-5f15-a313-c76daadbc648"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "39d32fcd-1d02-50b6-9455-4b767a8e769e"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "ed47756f-2475-56dd-b13a-26027749b6e1"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "17328b4d-841f-57b5-a9c5-861ad48f9d0d"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "c46a11b1-e8d2-5053-9741-45294b2e15c9"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "18121d1c-4227-51ff-a9fa-ceb890d683e3"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4218fc54-4b9b-5e5c-b6a9-bc8736c25b68"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('createAKSCluster')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "aks-cluster-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aciResourcePermissions": {
                    "value": "[parameters('aciResourcePermissions')]"
                  },
                  "aciRetentionInDays": {
                    "value": "[parameters('aciRetentionInDays')]"
                  },
                  "aciWorkspaceSku": {
                    "value": "[parameters('aciWorkspaceSku')]"
                  },
                  "aksAgentPoolName": {
                    "value": "[parameters('aksAgentPoolName')]"
                  },
                  "aksAgentPoolNodeCount": {
                    "value": "[parameters('aksAgentPoolNodeCount')]"
                  },
                  "aksAgentPoolVMSize": {
                    "value": "[parameters('aksAgentPoolVMSize')]"
                  },
                  "aksClusterNamePrefix": {
                    "value": "[parameters('aksClusterNamePrefix')]"
                  },
                  "aksVersion": {
                    "value": "[parameters('aksVersion')]"
                  },
                  "enableAzureMonitoring": {
                    "value": "[parameters('enableAzureMonitoring')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "1662521445991274672"
                    }
                  },
                  "parameters": {
                    "aciResourcePermissions": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "true to use resource or workspace permissions. false to require workspace permissions."
                      }
                    },
                    "aciRetentionInDays": {
                      "type": "int",
                      "defaultValue": 120,
                      "metadata": {
                        "description": "Number of days to retain data in Azure Monitor workspace."
                      }
                    },
                    "aciWorkspaceSku": {
                      "type": "string",
                      "defaultValue": "pergb2018",
                      "metadata": {
                        "description": "Pricing tier: PerGB2018 or legacy tiers (Free, Standalone, PerNode, Standard or Premium) which are not available to all customers."
                      }
                    },
                    "aksAgentPoolName": {
                      "type": "string",
                      "defaultValue": "agentpool",
                      "metadata": {
                        "description": "The name for this node pool. Node pool must contain only lowercase letters and numbers. For Linux node pools the name cannot be longer than 12 characters."
                      },
                      "minLength": 1,
                      "maxLength": 12
                    },
                    "aksAgentPoolNodeCount": {
                      "type": "int",
                      "defaultValue": 3,
                      "metadata": {
                        "description": "The number of nodes that should be created along with the cluster. You will be able to resize the cluster later."
                      },
                      "minValue": 1,
                      "maxValue": 10000
                    },
                    "aksAgentPoolVMSize": {
                      "type": "string",
                      "defaultValue": "Standard_DS2_v2",
                      "metadata": {
                        "description": "The size of the virtual machines that will form the nodes in the cluster. This cannot be changed after creating the cluster"
                      }
                    },
                    "aksClusterNamePrefix": {
                      "type": "string",
                      "defaultValue": "wlsonaks",
                      "metadata": {
                        "description": "Prefix for cluster name. Only The name can contain only letters, numbers, underscores and hyphens. The name must start with letter or number."
                      }
                    },
                    "aksVersion": {
                      "type": "string",
                      "defaultValue": "default"
                    },
                    "enableAzureMonitoring": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "In addition to the CPU and memory metrics included in AKS by default, you can enable Container Insights for more comprehensive data on the overall performance and health of your cluster. Billing is based on data ingestion and retention settings."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "eastus"
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_aksAgentPoolOSDiskSizeGB": 128,
                    "const_aksAgentPoolMaxPods": 110,
                    "const_aksAvailabilityZones": [
                      "1",
                      "2",
                      "3"
                    ],
                    "name_aciWorkspace": "[format('Workspace-{0}-{1}', guid(parameters('utcValue')), parameters('location'))]",
                    "name_aksClusterNameDefault": "[format('{0}0{1}', parameters('aksClusterNamePrefix'), uniqueString(parameters('utcValue')))]",
                    "name_aksClusterNameForSV": "[format('{0}1{1}', parameters('aksClusterNamePrefix'), uniqueString(parameters('utcValue')))]",
                    "obj_aciDisableOmsAgent": {
                      "enabled": false
                    },
                    "obj_aciEnableOmsAgent": {
                      "enabled": true,
                      "config": {
                        "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('name_aciWorkspace'))]"
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableAzureMonitoring')]",
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2020-08-01",
                      "name": "[variables('name_aciWorkspace')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "sku": {
                          "name": "[parameters('aciWorkspaceSku')]"
                        },
                        "retentionInDays": "[parameters('aciRetentionInDays')]",
                        "features": {
                          "searchVersion": 1,
                          "legacy": 0,
                          "enableLogAccessUsingOnlyResourcePermissions": "[parameters('aciResourcePermissions')]"
                        }
                      }
                    },
                    {
                      "condition": "[contains(parameters('aksVersion'), 'default')]",
                      "type": "Microsoft.ContainerService/managedClusters",
                      "apiVersion": "2021-02-01",
                      "name": "[variables('name_aksClusterNameDefault')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "dnsPrefix": "[format('{0}-dns', variables('name_aksClusterNameDefault'))]",
                        "agentPoolProfiles": [
                          {
                            "name": "[parameters('aksAgentPoolName')]",
                            "count": "[parameters('aksAgentPoolNodeCount')]",
                            "vmSize": "[parameters('aksAgentPoolVMSize')]",
                            "osDiskSizeGB": "[variables('const_aksAgentPoolOSDiskSizeGB')]",
                            "osDiskType": "Managed",
                            "kubeletDiskType": "OS",
                            "maxPods": "[variables('const_aksAgentPoolMaxPods')]",
                            "type": "VirtualMachineScaleSets",
                            "availabilityZones": "[variables('const_aksAvailabilityZones')]",
                            "nodeLabels": {},
                            "mode": "System",
                            "osType": "Linux"
                          }
                        ],
                        "addonProfiles": {
                          "KubeDashboard": {
                            "enabled": false
                          },
                          "azurepolicy": {
                            "enabled": false
                          },
                          "httpApplicationRouting": {
                            "enabled": false
                          },
                          "omsAgent": "[if(parameters('enableAzureMonitoring'), variables('obj_aciEnableOmsAgent'), variables('obj_aciDisableOmsAgent'))]"
                        },
                        "enableRBAC": true,
                        "networkProfile": {
                          "networkPlugin": "kubenet",
                          "loadBalancerSku": "standard"
                        }
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('name_aciWorkspace'))]"
                      ]
                    },
                    {
                      "condition": "[not(contains(parameters('aksVersion'), 'default'))]",
                      "type": "Microsoft.ContainerService/managedClusters",
                      "apiVersion": "2021-02-01",
                      "name": "[variables('name_aksClusterNameForSV')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "kubernetesVersion": "[format('{0}', parameters('aksVersion'))]",
                        "dnsPrefix": "[format('{0}-dns', variables('name_aksClusterNameForSV'))]",
                        "agentPoolProfiles": [
                          {
                            "name": "[parameters('aksAgentPoolName')]",
                            "count": "[parameters('aksAgentPoolNodeCount')]",
                            "vmSize": "[parameters('aksAgentPoolVMSize')]",
                            "osDiskSizeGB": "[variables('const_aksAgentPoolOSDiskSizeGB')]",
                            "osDiskType": "Managed",
                            "kubeletDiskType": "OS",
                            "maxPods": "[variables('const_aksAgentPoolMaxPods')]",
                            "type": "VirtualMachineScaleSets",
                            "availabilityZones": "[variables('const_aksAvailabilityZones')]",
                            "nodeLabels": {},
                            "mode": "System",
                            "osType": "Linux"
                          }
                        ],
                        "addonProfiles": {
                          "KubeDashboard": {
                            "enabled": false
                          },
                          "azurepolicy": {
                            "enabled": false
                          },
                          "httpApplicationRouting": {
                            "enabled": false
                          },
                          "omsAgent": {
                            "enabled": "[bool(format('{0}', parameters('enableAzureMonitoring')))]"
                          }
                        },
                        "enableRBAC": true,
                        "networkProfile": {
                          "networkPlugin": "kubenet",
                          "loadBalancerSku": "standard"
                        }
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      }
                    }
                  ],
                  "outputs": {
                    "aksClusterName": {
                      "type": "string",
                      "value": "[if(equals(format('{0}', parameters('aksVersion')), 'default'), variables('name_aksClusterNameDefault'), variables('name_aksClusterNameForSV'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'wls-aks-start-pid-deployment')]"
              ]
            },
            {
              "condition": "[and(parameters('useOracleImage'), parameters('createACR'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "acr-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "16999541500289008629"
                    }
                  },
                  "parameters": {
                    "acrNamePrefix": {
                      "type": "string",
                      "defaultValue": "wlsaksacr"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "eastus"
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "name_acr": "[format('{0}{1}', parameters('acrNamePrefix'), uniqueString(parameters('utcValue')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ContainerRegistry/registries",
                      "apiVersion": "2020-11-01-preview",
                      "name": "[variables('name_acr')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Standard",
                        "tier": "Standard"
                      },
                      "properties": {
                        "adminUserEnabled": true,
                        "policies": {
                          "quarantinePolicy": {
                            "status": "disabled"
                          },
                          "trustPolicy": {
                            "type": "Notary",
                            "status": "disabled"
                          },
                          "retentionPolicy": {
                            "days": 7,
                            "status": "disabled"
                          }
                        },
                        "encryption": {
                          "status": "disabled"
                        },
                        "dataEndpointEnabled": false,
                        "publicNetworkAccess": "Enabled",
                        "networkRuleBypassOptions": "AzureServices",
                        "zoneRedundancy": "Disabled",
                        "anonymousPullEnabled": false
                      }
                    }
                  ],
                  "outputs": {
                    "acrName": {
                      "type": "string",
                      "value": "[variables('name_acr')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'wls-aks-start-pid-deployment')]"
              ]
            },
            {
              "condition": "[parameters('createStorageAccount')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "storage-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "9546408933814304658"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "eastus"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_shareQuota": 5120,
                    "const_sku": "Standard_LRS",
                    "name_fileShare": "weblogic"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-02-01",
                      "name": "[parameters('storageAccountName')]",
                      "location": "[parameters('location')]",
                      "kind": "StorageV2",
                      "sku": {
                        "name": "[variables('const_sku')]",
                        "tier": "Standard"
                      },
                      "properties": {
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "virtualNetworkRules": [],
                          "ipRules": [],
                          "defaultAction": "Allow"
                        },
                        "supportsHttpsTrafficOnly": true,
                        "encryption": {
                          "services": {
                            "file": {
                              "keyType": "Account",
                              "enabled": true
                            }
                          },
                          "keySource": "Microsoft.Storage"
                        },
                        "accessTier": "Hot"
                      },
                      "tags": {
                        "managed-by-azure-weblogic": "[parameters('utcValue')]"
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/default/{1}', parameters('storageAccountName'), variables('name_fileShare'))]",
                      "properties": {
                        "accessTier": "TransactionOptimized",
                        "shareQuota": "[variables('const_shareQuota')]",
                        "enabledProtocols": "SMB"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'wls-aks-start-pid-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "wls-domain-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "_artifactsLocation": {
                    "value": "[parameters('_artifactsLocation')]"
                  },
                  "_artifactsLocationSasToken": {
                    "value": "[parameters('_artifactsLocationSasToken')]"
                  },
                  "aksClusterRGName": {
                    "value": "[if(parameters('createAKSCluster'), resourceGroup().name, parameters('aksClusterRGName'))]"
                  },
                  "aksClusterName": {
                    "value": "[if(parameters('createAKSCluster'), reference(resourceId('Microsoft.Resources/deployments', 'aks-cluster-deployment'), '2020-06-01').outputs.aksClusterName.value, parameters('aksClusterName'))]"
                  },
                  "acrName": {
                    "value": "[if(parameters('useOracleImage'), if(parameters('createACR'), reference(resourceId('Microsoft.Resources/deployments', 'acr-deployment'), '2020-06-01').outputs.acrName.value, parameters('acrName')), parameters('userProvidedAcr'))]"
                  },
                  "appPackageUrls": {
                    "value": "[parameters('appPackageUrls')]"
                  },
                  "appReplicas": {
                    "value": "[parameters('appReplicas')]"
                  },
                  "enableCustomSSL": {
                    "value": "[parameters('enableCustomSSL')]"
                  },
                  "enableAdminT3Tunneling": {
                    "value": "[parameters('enableAdminT3Tunneling')]"
                  },
                  "enableClusterT3Tunneling": {
                    "value": "[parameters('enableClusterT3Tunneling')]"
                  },
                  "enablePV": {
                    "value": "[parameters('enablePV')]"
                  },
                  "identity": {
                    "value": "[parameters('identity')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "managedServerPrefix": {
                    "value": "[parameters('managedServerPrefix')]"
                  },
                  "ocrSSOUser": {
                    "value": "[parameters('ocrSSOUser')]"
                  },
                  "ocrSSOPSW": {
                    "value": "[parameters('ocrSSOPSW')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "t3ChannelAdminPort": {
                    "value": "[parameters('t3ChannelAdminPort')]"
                  },
                  "t3ChannelClusterPort": {
                    "value": "[parameters('t3ChannelClusterPort')]"
                  },
                  "userProvidedImagePath": {
                    "value": "[parameters('userProvidedImagePath')]"
                  },
                  "useOracleImage": {
                    "value": "[parameters('useOracleImage')]"
                  },
                  "wdtRuntimePassword": {
                    "value": "[parameters('wdtRuntimePassword')]"
                  },
                  "wlsClusterSize": {
                    "value": "[parameters('wlsClusterSize')]"
                  },
                  "wlsCPU": {
                    "value": "[parameters('wlsCPU')]"
                  },
                  "wlsDomainName": {
                    "value": "[parameters('wlsDomainName')]"
                  },
                  "wlsDomainUID": {
                    "value": "[parameters('wlsDomainUID')]"
                  },
                  "wlsIdentityKeyStoreData": {
                    "value": "[parameters('wlsIdentityKeyStoreData')]"
                  },
                  "wlsIdentityKeyStorePassphrase": {
                    "value": "[parameters('wlsIdentityKeyStorePassphrase')]"
                  },
                  "wlsIdentityKeyStoreType": {
                    "value": "[parameters('wlsIdentityKeyStoreType')]"
                  },
                  "wlsImageTag": {
                    "value": "[parameters('wlsImageTag')]"
                  },
                  "wlsJavaOption": {
                    "value": "[parameters('wlsJavaOption')]"
                  },
                  "wlsMemory": {
                    "value": "[parameters('wlsMemory')]"
                  },
                  "wlsPassword": {
                    "value": "[parameters('wlsPassword')]"
                  },
                  "wlsPrivateKeyAlias": {
                    "value": "[parameters('wlsPrivateKeyAlias')]"
                  },
                  "wlsPrivateKeyPassPhrase": {
                    "value": "[parameters('wlsPrivateKeyPassPhrase')]"
                  },
                  "wlsTrustKeyStoreData": {
                    "value": "[parameters('wlsTrustKeyStoreData')]"
                  },
                  "wlsTrustKeyStorePassPhrase": {
                    "value": "[parameters('wlsTrustKeyStorePassPhrase')]"
                  },
                  "wlsTrustKeyStoreType": {
                    "value": "[parameters('wlsTrustKeyStoreType')]"
                  },
                  "wlsUserName": {
                    "value": "[parameters('wlsUserName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "8791274137507390004"
                    }
                  },
                  "parameters": {
                    "_artifactsLocation": {
                      "type": "string"
                    },
                    "_artifactsLocationSasToken": {
                      "type": "secureString",
                      "defaultValue": ""
                    },
                    "aksClusterRGName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "aksClusterName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "acrName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "appPackageUrls": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "appReplicas": {
                      "type": "int",
                      "defaultValue": 2
                    },
                    "enableCustomSSL": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableAdminT3Tunneling": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableClusterT3Tunneling": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enablePV": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "identity": {
                      "type": "object"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "eastus"
                    },
                    "managedServerPrefix": {
                      "type": "string",
                      "defaultValue": "managed-server"
                    },
                    "ocrSSOPSW": {
                      "type": "secureString"
                    },
                    "ocrSSOUser": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string",
                      "defaultValue": "null"
                    },
                    "t3ChannelAdminPort": {
                      "type": "int",
                      "defaultValue": 7005
                    },
                    "t3ChannelClusterPort": {
                      "type": "int",
                      "defaultValue": 8011
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    },
                    "userProvidedImagePath": {
                      "type": "string",
                      "defaultValue": "null"
                    },
                    "useOracleImage": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "wdtRuntimePassword": {
                      "type": "secureString"
                    },
                    "wlsClusterSize": {
                      "type": "int",
                      "defaultValue": 5
                    },
                    "wlsCPU": {
                      "type": "string",
                      "defaultValue": "200m"
                    },
                    "wlsDomainName": {
                      "type": "string",
                      "defaultValue": "domain1"
                    },
                    "wlsDomainUID": {
                      "type": "string",
                      "defaultValue": "sample-domain1"
                    },
                    "wlsIdentityKeyStoreData": {
                      "type": "string",
                      "defaultValue": "null"
                    },
                    "wlsIdentityKeyStorePassphrase": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "wlsIdentityKeyStoreType": {
                      "type": "string",
                      "defaultValue": "PKCS12",
                      "allowedValues": [
                        "JKS",
                        "PKCS12"
                      ]
                    },
                    "wlsImageTag": {
                      "type": "string",
                      "defaultValue": "12.2.1.4"
                    },
                    "wlsJavaOption": {
                      "type": "string",
                      "defaultValue": "null"
                    },
                    "wlsMemory": {
                      "type": "string",
                      "defaultValue": "1.5Gi"
                    },
                    "wlsPassword": {
                      "type": "secureString"
                    },
                    "wlsPrivateKeyAlias": {
                      "type": "string",
                      "defaultValue": "contoso"
                    },
                    "wlsPrivateKeyPassPhrase": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "wlsTrustKeyStoreData": {
                      "type": "string",
                      "defaultValue": "null"
                    },
                    "wlsTrustKeyStorePassPhrase": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "wlsTrustKeyStoreType": {
                      "type": "string",
                      "defaultValue": "PKCS12",
                      "allowedValues": [
                        "JKS",
                        "PKCS12"
                      ]
                    },
                    "wlsUserName": {
                      "type": "string",
                      "defaultValue": "weblogic"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_arguments": "[format('{0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16} {17} {18} {19} {20} {21} {22} {23} {24} {25} {26} {27} {28} {29} {30} {31} {32} {33} \"{34}\" {35} {36}', parameters('ocrSSOUser'), parameters('ocrSSOPSW'), parameters('aksClusterRGName'), parameters('aksClusterName'), parameters('wlsImageTag'), parameters('acrName'), parameters('wlsDomainName'), parameters('wlsDomainUID'), parameters('wlsUserName'), parameters('wlsPassword'), parameters('wdtRuntimePassword'), parameters('wlsCPU'), parameters('wlsMemory'), parameters('managedServerPrefix'), parameters('appReplicas'), string(parameters('appPackageUrls')), resourceGroup().name, variables('const_scriptLocation'), parameters('storageAccountName'), parameters('wlsClusterSize'), parameters('enableCustomSSL'), parameters('wlsIdentityKeyStoreData'), parameters('wlsIdentityKeyStorePassphrase'), parameters('wlsIdentityKeyStoreType'), parameters('wlsPrivateKeyAlias'), parameters('wlsPrivateKeyPassPhrase'), parameters('wlsTrustKeyStoreData'), parameters('wlsTrustKeyStorePassPhrase'), parameters('wlsTrustKeyStoreType'), parameters('enablePV'), parameters('enableAdminT3Tunneling'), parameters('enableClusterT3Tunneling'), parameters('t3ChannelAdminPort'), parameters('t3ChannelClusterPort'), parameters('wlsJavaOption'), parameters('userProvidedImagePath'), parameters('useOracleImage'))]",
                    "const_buildDockerImageScript": "createVMAndBuildImage.sh",
                    "const_commonScript": "common.sh",
                    "const_invokeSetUpDomainScript": "invokeSetupWLSDomain.sh",
                    "const_pvTempalte": "pv.yaml.template",
                    "const_pvcTempalte": "pvc.yaml.template",
                    "const_scriptLocation": "[uri(parameters('_artifactsLocation'), 'scripts/')]",
                    "const_genDomainConfigScript": "genDomainConfig.sh",
                    "const_setUpDomainScript": "setupWLSDomain.sh",
                    "const_updateDomainConfigScript": "updateDomainConfig.sh",
                    "const_utilityScript": "utility.sh"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "ds-wls-cluster-creation",
                      "location": "[parameters('location')]",
                      "kind": "AzureCLI",
                      "identity": "[parameters('identity')]",
                      "properties": {
                        "azCliVersion": "2.15.0",
                        "arguments": "[variables('const_arguments')]",
                        "primaryScriptUri": "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_invokeSetUpDomainScript'), parameters('_artifactsLocationSasToken')))]",
                        "supportingScriptUris": [
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_setUpDomainScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_genDomainConfigScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_utilityScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_pvTempalte'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_pvcTempalte'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_commonScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_buildDockerImageScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_updateDomainConfigScript'), parameters('_artifactsLocationSasToken')))]"
                        ],
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D",
                        "forceUpdateTag": "[parameters('utcValue')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'acr-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'aks-cluster-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'storage-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "wls-aks-end-pid-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidEnd')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "8805472380936134177"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1008.15138",
                              "templateHash": "14669053462841078328"
                            }
                          },
                          "functions": [],
                          "resources": []
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "38647ff6-ea8d-59e5-832d-b036a4d29c73"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "8ba7beaa-96fd-576a-acd8-28f7a6efa83a"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "ffab0a3f-90cb-585a-a7f9-ec0a62faeec1"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "e64361eb-fea0-5f15-a313-c76daadbc648"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "39d32fcd-1d02-50b6-9455-4b767a8e769e"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "ed47756f-2475-56dd-b13a-26027749b6e1"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "17328b4d-841f-57b5-a9c5-861ad48f9d0d"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "c46a11b1-e8d2-5053-9741-45294b2e15c9"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "18121d1c-4227-51ff-a9fa-ceb890d683e3"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4218fc54-4b9b-5e5c-b6a9-bc8736c25b68"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'wls-domain-deployment')]"
              ]
            }
          ],
          "outputs": {
            "aksClusterName": {
              "type": "string",
              "value": "[if(parameters('createAKSCluster'), reference(resourceId('Microsoft.Resources/deployments', 'aks-cluster-deployment'), '2020-06-01').outputs.aksClusterName.value, parameters('aksClusterName'))]"
            },
            "aksClusterRGName": {
              "type": "string",
              "value": "[if(parameters('createAKSCluster'), resourceGroup().name, parameters('aksClusterRGName'))]"
            },
            "adminServerUrl": {
              "type": "string",
              "value": "[format('http://{0}-admin-server.{0}-ns.svc.cluster.local:7001/console', parameters('wlsDomainUID'))]"
            },
            "adminServerT3InternalUrl": {
              "type": "string",
              "value": "[if(parameters('enableAdminT3Tunneling'), format('{0}://{1}-admin-server.{1}-ns.svc.cluster.local:{2}', if(parameters('enableCustomSSL'), 't3s', 't3'), parameters('wlsDomainUID'), parameters('t3ChannelAdminPort')), '')]"
            },
            "clusterSVCUrl": {
              "type": "string",
              "value": "[format('http://{0}-cluster-cluster-1.{0}-ns.svc.cluster.local:8001/', parameters('wlsDomainUID'))]"
            },
            "clusterT3InternalUrl": {
              "type": "string",
              "value": "[if(parameters('enableClusterT3Tunneling'), format('{0}://{1}-cluster-cluster-1.{1}-ns.svc.cluster.local:{2}', if(parameters('enableCustomSSL'), 't3s', 't3'), parameters('wlsDomainUID'), parameters('t3ChannelClusterPort')), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'initialization')]",
        "[resourceId('Microsoft.Resources/deployments', 'query-existing-storage-account')]",
        "[resourceId('Microsoft.Resources/deployments', 'upload-wls-ssl-cert-to-keyvault')]"
      ]
    },
    {
      "condition": "[and(parameters('enableAppGWIngress'), not(equals(parameters('appGatewayCertificateOption'), variables('const_appGatewaySSLCertOptionHaveKeyVault'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "appgateway-certificates-secrets-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "backendCertificateDataValue": {
            "value": "[parameters('appGatewaySSLBackendRootCertData')]"
          },
          "certificateDataValue": {
            "value": "[parameters('appGatewaySSLCertData')]"
          },
          "certificatePasswordValue": {
            "value": "[parameters('appGatewaySSLCertPassword')]"
          },
          "enableCustomSSL": {
            "value": "[parameters('enableCustomSSL')]"
          },
          "identity": {
            "value": "[parameters('identity')]"
          },
          "sku": {
            "value": "[parameters('keyVaultSku')]"
          },
          "subjectName": {
            "value": "[format('CN={0}', if(parameters('enableDNSConfiguration'), format('{0}.{1}', parameters('dnsNameforApplicationGateway'), parameters('dnszoneName')), variables('const_azureSubjectName')))]"
          },
          "useExistingAppGatewaySSLCertificate": {
            "value": "[if(equals(parameters('appGatewayCertificateOption'), variables('const_appGatewaySSLCertOptionHaveCert')), true(), false())]"
          },
          "keyVaultName": {
            "value": "[variables('name_keyVaultName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "7537298927039734706"
            }
          },
          "parameters": {
            "backendCertificateDataValue": {
              "type": "string",
              "metadata": {
                "description": "Backend certificate data to store in the secret"
              }
            },
            "certificateDataValue": {
              "type": "string",
              "metadata": {
                "description": "Certificate data to store in the secret"
              }
            },
            "certificatePasswordValue": {
              "type": "string",
              "metadata": {
                "description": "Certificate password to store in the secret"
              }
            },
            "enableCustomSSL": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "true to upload trusted root certificate"
              }
            },
            "enabledForTemplateDeployment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
              }
            },
            "identity": {
              "type": "object"
            },
            "permission": {
              "type": "object",
              "defaultValue": {
                "certificates": [
                  "get",
                  "list",
                  "update",
                  "create"
                ]
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "Standard",
              "metadata": {
                "description": "Price tier for Key Vault."
              }
            },
            "subjectName": {
              "type": "string",
              "metadata": {
                "description": "Subject name to create a certificate."
              }
            },
            "useExistingAppGatewaySSLCertificate": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "If false, will create a certificate."
              }
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": "GEN_UNIQUE",
              "metadata": {
                "description": "Current deployment time. Used as a tag in deployment script."
              }
            }
          },
          "functions": [],
          "variables": {
            "name_sslBackendCertSercretName": "myAppGatewaySSLBackendRootCert",
            "name_sslCertSecretName": "myAppGatewaySSLCert",
            "name_sslCertPasswordSecretName": "myAppGatewaySSLCertPassword"
          },
          "resources": [
            {
              "condition": "[not(parameters('useExistingAppGatewaySSLCertificate'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "kv-appgw-selfsigned-certificate-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "identity": {
                    "value": "[parameters('identity')]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('keyVaultName')]"
                  },
                  "permission": {
                    "value": "[parameters('permission')]"
                  },
                  "subjectName": {
                    "value": "[parameters('subjectName')]"
                  },
                  "sku": {
                    "value": "[parameters('sku')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "93542961207007694"
                    }
                  },
                  "parameters": {
                    "identity": {
                      "type": "object",
                      "metadata": {
                        "description": "Managed identity to be used for the deployment script. Currently, only user-assigned MSI is supported."
                      }
                    },
                    "keyVaultName": {
                      "type": "string",
                      "defaultValue": "[format('wls-kv-{0}', uniqueString(parameters('utcValue')))]",
                      "metadata": {
                        "description": "Used to name the new Azure Key Vault resoure."
                      }
                    },
                    "permission": {
                      "type": "object",
                      "defaultValue": {
                        "certificates": [
                          "get",
                          "list",
                          "update",
                          "create"
                        ]
                      },
                      "metadata": {
                        "description": "Access permission of the key vault, will applied to all access policies."
                      }
                    },
                    "secretName": {
                      "type": "string",
                      "defaultValue": "mySelfSignedCertificate",
                      "metadata": {
                        "description": "Used to name the new certificate resource."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "metadata": {
                        "description": "Price tier for Key Vault."
                      }
                    },
                    "subjectName": {
                      "type": "string",
                      "metadata": {
                        "description": "Subject name to create a new certificate, example: 'CN=contoso.com'."
                      }
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_identityId": "[format('{0}', substring(string(parameters('identity').userAssignedIdentities), add(indexOf(string(parameters('identity').userAssignedIdentities), '\"'), 1), sub(lastIndexOf(string(parameters('identity').userAssignedIdentities), '\"'), add(indexOf(string(parameters('identity').userAssignedIdentities), '\"'), 1))))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2019-09-01",
                      "name": "[parameters('keyVaultName')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "sku": {
                          "family": "A",
                          "name": "[parameters('sku')]"
                        },
                        "tenantId": "[subscription().tenantId]",
                        "accessPolicies": [
                          {
                            "objectId": "[reference(variables('const_identityId'), '2018-11-30').principalId]",
                            "tenantId": "[subscription().tenantId]",
                            "permissions": "[parameters('permission')]"
                          }
                        ],
                        "enabledForDeployment": false,
                        "enabledForDiskEncryption": false,
                        "enabledForTemplateDeployment": true,
                        "enableSoftDelete": true
                      },
                      "tags": {
                        "managed-by-azure-weblogic": "[parameters('utcValue')]"
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "ds-create-add-appgw-certificate",
                      "location": "[resourceGroup().location]",
                      "identity": "[parameters('identity')]",
                      "kind": "AzurePowerShell",
                      "properties": {
                        "forceUpdateTag": "[parameters('utcValue')]",
                        "azPowerShellVersion": "5.0",
                        "timeout": "PT30M",
                        "arguments": "[format(' -vaultName {0} -certificateName {1} -subjectName {2}', parameters('keyVaultName'), parameters('secretName'), parameters('subjectName'))]",
                        "scriptContent": "\n                    param(\n                        [string] [Parameter(Mandatory=$true)] $vaultName,\n                        [string] [Parameter(Mandatory=$true)] $certificateName,\n                        [string] [Parameter(Mandatory=$true)] $subjectName\n                    )\n\n                    $ErrorActionPreference = 'Stop'\n                    $DeploymentScriptOutputs = @{}\n\n                    $existingCert = Get-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName\n\n                    if ($existingCert -and $existingCert.Certificate.Subject -eq $subjectName) {\n\n                        Write-Host 'Certificate $certificateName in vault $vaultName is already present.'\n\n                        $DeploymentScriptOutputs['certThumbprint'] = $existingCert.Thumbprint\n                        $existingCert | Out-String\n                    }\n                    else {\n                        $policy = New-AzKeyVaultCertificatePolicy -SubjectName $subjectName -IssuerName Self -ValidityInMonths 12 -Verbose\n\n                        # private key is added as a secret that can be retrieved in the ARM template\n                        Add-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName -CertificatePolicy $policy -Verbose\n\n                        $newCert = Get-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName\n\n                        # it takes a few seconds for KeyVault to finish\n                        $tries = 0\n                        do {\n                        Write-Host 'Waiting for certificate creation completion...'\n                        Start-Sleep -Seconds 10\n                        $operation = Get-AzKeyVaultCertificateOperation -VaultName $vaultName -Name $certificateName\n                        $tries++\n\n                        if ($operation.Status -eq 'failed')\n                        {\n                            throw 'Creating certificate $certificateName in vault $vaultName failed with error $($operation.ErrorMessage)'\n                        }\n\n                        if ($tries -gt 120)\n                        {\n                            throw 'Timed out waiting for creation of certificate $certificateName in vault $vaultName'\n                        }\n                        } while ($operation.Status -ne 'completed')\n\n                        $DeploymentScriptOutputs['certThumbprint'] = $newCert.Thumbprint\n                        $newCert | Out-String\n                    }\n                ",
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "keyVaultName": {
                      "type": "string",
                      "value": "[parameters('keyVaultName')]"
                    },
                    "secretName": {
                      "type": "string",
                      "value": "[parameters('secretName')]"
                    },
                    "identityId": {
                      "type": "string",
                      "value": "[variables('const_identityId')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('useExistingAppGatewaySSLCertificate')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "kv-appgw-existing-certificate-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "certificateDataName": {
                    "value": "[variables('name_sslCertSecretName')]"
                  },
                  "certificateDataValue": {
                    "value": "[parameters('certificateDataValue')]"
                  },
                  "certificatePasswordName": {
                    "value": "[variables('name_sslCertPasswordSecretName')]"
                  },
                  "certificatePasswordValue": {
                    "value": "[parameters('certificatePasswordValue')]"
                  },
                  "enabledForTemplateDeployment": {
                    "value": "[parameters('enabledForTemplateDeployment')]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('keyVaultName')]"
                  },
                  "sku": {
                    "value": "[parameters('sku')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "13398260045661163430"
                    }
                  },
                  "parameters": {
                    "certificateDataName": {
                      "type": "string",
                      "metadata": {
                        "description": "Secret name of certificate data."
                      }
                    },
                    "certificateDataValue": {
                      "type": "string",
                      "metadata": {
                        "description": "Certificate data to store in the secret"
                      }
                    },
                    "certificatePasswordName": {
                      "type": "string",
                      "metadata": {
                        "description": "Secret name of certificate password."
                      }
                    },
                    "certificatePasswordValue": {
                      "type": "string",
                      "metadata": {
                        "description": "Certificate password to store in the secret"
                      }
                    },
                    "enabledForTemplateDeployment": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
                      }
                    },
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the vault"
                      }
                    },
                    "sku": {
                      "type": "string",
                      "metadata": {
                        "description": "Price tier for Key Vault."
                      }
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2019-09-01",
                      "name": "[parameters('keyVaultName')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                        "sku": {
                          "name": "[parameters('sku')]",
                          "family": "A"
                        },
                        "accessPolicies": [],
                        "tenantId": "[subscription().tenantId]"
                      },
                      "tags": {
                        "managed-by-azure-weblogic": "[parameters('utcValue')]"
                      }
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2019-09-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('certificateDataName'))]",
                      "properties": {
                        "value": "[parameters('certificateDataValue')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2019-09-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('certificatePasswordName'))]",
                      "properties": {
                        "value": "[parameters('certificatePasswordValue')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "keyVaultName": {
                      "type": "string",
                      "value": "[parameters('keyVaultName')]"
                    },
                    "sslCertDataSecretName": {
                      "type": "string",
                      "value": "[parameters('certificateDataName')]"
                    },
                    "sslCertPwdSecretName": {
                      "type": "string",
                      "value": "[parameters('certificatePasswordName')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('enableCustomSSL')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "kv-appgw-e2e-ssl-backend-certificate",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "certificateDataName": {
                    "value": "[variables('name_sslBackendCertSercretName')]"
                  },
                  "certificateDataValue": {
                    "value": "[parameters('backendCertificateDataValue')]"
                  },
                  "enabledForTemplateDeployment": {
                    "value": "[parameters('enabledForTemplateDeployment')]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('keyVaultName')]"
                  },
                  "sku": {
                    "value": "[parameters('sku')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "17592102276074009715"
                    }
                  },
                  "parameters": {
                    "certificateDataName": {
                      "type": "string",
                      "metadata": {
                        "description": "Secret name of certificate data."
                      }
                    },
                    "certificateDataValue": {
                      "type": "string",
                      "metadata": {
                        "description": "Certificate data to store in the secret"
                      }
                    },
                    "enabledForTemplateDeployment": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
                      }
                    },
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the vault"
                      }
                    },
                    "sku": {
                      "type": "string",
                      "metadata": {
                        "description": "Price tier for Key Vault."
                      }
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2019-09-01",
                      "name": "[parameters('keyVaultName')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                        "sku": {
                          "name": "[parameters('sku')]",
                          "family": "A"
                        },
                        "accessPolicies": [],
                        "tenantId": "[subscription().tenantId]"
                      },
                      "tags": {
                        "managed-by-azure-weblogic": "[parameters('utcValue')]"
                      }
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2019-09-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('certificateDataName'))]",
                      "properties": {
                        "value": "[parameters('certificateDataValue')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "keyVaultName": {
                      "type": "string",
                      "value": "[parameters('keyVaultName')]"
                    },
                    "sslBackendCertDataSecretName": {
                      "type": "string",
                      "value": "[parameters('certificateDataName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'kv-appgw-existing-certificate-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'kv-appgw-selfsigned-certificate-deployment')]"
              ]
            }
          ],
          "outputs": {
            "keyVaultName": {
              "type": "string",
              "value": "[if(parameters('useExistingAppGatewaySSLCertificate'), reference(resourceId('Microsoft.Resources/deployments', 'kv-appgw-existing-certificate-deployment'), '2020-06-01').outputs.keyVaultName.value, reference(resourceId('Microsoft.Resources/deployments', 'kv-appgw-selfsigned-certificate-deployment'), '2020-06-01').outputs.keyVaultName.value)]"
            },
            "sslCertDataSecretName": {
              "type": "string",
              "value": "[if(parameters('useExistingAppGatewaySSLCertificate'), reference(resourceId('Microsoft.Resources/deployments', 'kv-appgw-existing-certificate-deployment'), '2020-06-01').outputs.sslCertDataSecretName.value, reference(resourceId('Microsoft.Resources/deployments', 'kv-appgw-selfsigned-certificate-deployment'), '2020-06-01').outputs.secretName.value)]"
            },
            "sslCertPwdSecretName": {
              "type": "string",
              "value": "[if(parameters('useExistingAppGatewaySSLCertificate'), reference(resourceId('Microsoft.Resources/deployments', 'kv-appgw-existing-certificate-deployment'), '2020-06-01').outputs.sslCertPwdSecretName.value, '')]"
            },
            "sslBackendCertDataSecretName": {
              "type": "string",
              "value": "[if(parameters('enableCustomSSL'), reference(resourceId('Microsoft.Resources/deployments', 'kv-appgw-e2e-ssl-backend-certificate'), '2020-06-01').outputs.sslBackendCertDataSecretName.value, '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'setup-wls-cluster')]",
        "[resourceId('Microsoft.Resources/deployments', 'setup-wls-cluster-with-custom-ssl-enabled')]"
      ]
    },
    {
      "condition": "[variables('const_enableNetworking')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "networking-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "_pidNetworkingEnd": {
            "value": "[if(equals(reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2020-06-01').outputs.networkingEnd.value, ''), variables('name_defaultPidDeployment'), reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2020-06-01').outputs.networkingEnd.value)]"
          },
          "_pidNetworkingStart": {
            "value": "[if(equals(reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2020-06-01').outputs.networkingStart.value, ''), variables('name_defaultPidDeployment'), reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2020-06-01').outputs.networkingStart.value)]"
          },
          "_pidAppgwEnd": {
            "value": "[if(equals(reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2020-06-01').outputs.appgwEnd.value, ''), variables('name_defaultPidDeployment'), reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2020-06-01').outputs.appgwEnd.value)]"
          },
          "_pidAppgwStart": {
            "value": "[if(equals(reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2020-06-01').outputs.appgwStart.value, ''), variables('name_defaultPidDeployment'), reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2020-06-01').outputs.appgwStart.value)]"
          },
          "aksClusterRGName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', if(parameters('enableCustomSSL'), 'setup-wls-cluster-with-custom-ssl-enabled', 'setup-wls-cluster'))).aksClusterRGName.value.value]"
          },
          "aksClusterName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', if(parameters('enableCustomSSL'), 'setup-wls-cluster-with-custom-ssl-enabled', 'setup-wls-cluster'))).aksClusterName.value.value]"
          },
          "appGatewayCertificateOption": {
            "value": "[parameters('appGatewayCertificateOption')]"
          },
          "appGatewayPublicIPAddressName": {
            "value": "[parameters('appGatewayPublicIPAddressName')]"
          },
          "appgwForAdminServer": {
            "value": "[parameters('appgwForAdminServer')]"
          },
          "appgwForRemoteConsole": {
            "value": "[parameters('appgwForRemoteConsole')]"
          },
          "createDNSZone": {
            "value": "[parameters('createDNSZone')]"
          },
          "dnsNameforApplicationGateway": {
            "value": "[variables('name_domainLabelforApplicationGateway')]"
          },
          "dnszoneAdminConsoleLabel": {
            "value": "[parameters('dnszoneAdminConsoleLabel')]"
          },
          "dnszoneAdminT3ChannelLabel": {
            "value": "[parameters('dnszoneAdminT3ChannelLabel')]"
          },
          "dnszoneClusterLabel": {
            "value": "[parameters('dnszoneClusterLabel')]"
          },
          "dnszoneClusterT3ChannelLabel": {
            "value": "[parameters('dnszoneClusterT3ChannelLabel')]"
          },
          "dnszoneName": {
            "value": "[parameters('dnszoneName')]"
          },
          "dnszoneRGName": {
            "value": "[parameters('dnszoneRGName')]"
          },
          "enableAppGWIngress": {
            "value": "[parameters('enableAppGWIngress')]"
          },
          "enableCookieBasedAffinity": {
            "value": "[parameters('enableCookieBasedAffinity')]"
          },
          "enableCustomSSL": {
            "value": "[parameters('enableCustomSSL')]"
          },
          "enableDNSConfiguration": {
            "value": "[parameters('enableDNSConfiguration')]"
          },
          "identity": {
            "value": "[parameters('identity')]"
          },
          "keyVaultName": {
            "value": "[if(or(not(parameters('enableAppGWIngress')), equals(parameters('appGatewayCertificateOption'), variables('const_appGatewaySSLCertOptionHaveKeyVault'))), parameters('keyVaultName'), reference(resourceId('Microsoft.Resources/deployments', 'appgateway-certificates-secrets-deployment'), '2020-06-01').outputs.keyVaultName.value)]"
          },
          "keyVaultResourceGroup": {
            "value": "[if(or(not(parameters('enableAppGWIngress')), equals(parameters('appGatewayCertificateOption'), variables('const_appGatewaySSLCertOptionHaveKeyVault'))), parameters('keyVaultResourceGroup'), resourceGroup().name)]"
          },
          "keyvaultBackendCertDataSecretName": {
            "value": "[if(or(not(parameters('enableAppGWIngress')), equals(parameters('appGatewayCertificateOption'), variables('const_appGatewaySSLCertOptionHaveKeyVault'))), parameters('keyVaultSSLBackendRootCertDataSecretName'), reference(resourceId('Microsoft.Resources/deployments', 'appgateway-certificates-secrets-deployment'), '2020-06-01').outputs.sslBackendCertDataSecretName.value)]"
          },
          "keyVaultSSLCertDataSecretName": {
            "value": "[if(or(not(parameters('enableAppGWIngress')), equals(parameters('appGatewayCertificateOption'), variables('const_appGatewaySSLCertOptionHaveKeyVault'))), parameters('keyVaultSSLCertDataSecretName'), reference(resourceId('Microsoft.Resources/deployments', 'appgateway-certificates-secrets-deployment'), '2020-06-01').outputs.sslCertDataSecretName.value)]"
          },
          "keyVaultSSLCertPasswordSecretName": {
            "value": "[if(or(not(parameters('enableAppGWIngress')), equals(parameters('appGatewayCertificateOption'), variables('const_appGatewaySSLCertOptionHaveKeyVault'))), parameters('keyVaultSSLCertPasswordSecretName'), reference(resourceId('Microsoft.Resources/deployments', 'appgateway-certificates-secrets-deployment'), '2020-06-01').outputs.sslCertPwdSecretName.value)]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "lbSvcValues": {
            "value": "[parameters('lbSvcValues')]"
          },
          "servicePrincipal": {
            "value": "[parameters('servicePrincipal')]"
          },
          "useInternalLB": {
            "value": "[parameters('useInternalLB')]"
          },
          "wlsDomainName": {
            "value": "[parameters('wlsDomainName')]"
          },
          "wlsDomainUID": {
            "value": "[parameters('wlsDomainUID')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "6708776956952610283"
            }
          },
          "parameters": {
            "_artifactsLocation": {
              "type": "string",
              "defaultValue": "[deployment().properties.templateLink.uri]"
            },
            "_artifactsLocationSasToken": {
              "type": "secureString",
              "defaultValue": ""
            },
            "_pidNetworkingEnd": {
              "type": "string"
            },
            "_pidNetworkingStart": {
              "type": "string"
            },
            "_pidAppgwEnd": {
              "type": "string"
            },
            "_pidAppgwStart": {
              "type": "string"
            },
            "aksClusterRGName": {
              "type": "string",
              "defaultValue": "aks-contoso-rg",
              "metadata": {
                "description": "Resource group name of an existing AKS cluster."
              }
            },
            "aksClusterName": {
              "type": "string",
              "defaultValue": "aks-contoso",
              "metadata": {
                "description": "Name of an existing AKS cluster."
              }
            },
            "appGatewayCertificateOption": {
              "type": "string",
              "defaultValue": "haveCert",
              "metadata": {
                "description": "Three scenarios we support for deploying app gateway"
              },
              "allowedValues": [
                "haveCert",
                "haveKeyVault",
                "generateCert"
              ]
            },
            "appGatewayPublicIPAddressName": {
              "type": "string",
              "defaultValue": "gwip",
              "metadata": {
                "description": "Public IP Name for the Application Gateway"
              }
            },
            "appgwForAdminServer": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Create Application Gateway ingress for admin console."
              }
            },
            "appgwForRemoteConsole": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Create Application Gateway ingress for remote console."
              }
            },
            "createDNSZone": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "If true, the template will update records to the existing DNS Zone. If false, the template will create a new DNS Zone."
              }
            },
            "dnsNameforApplicationGateway": {
              "type": "string",
              "defaultValue": "wlsgw",
              "metadata": {
                "description": "DNS prefix for ApplicationGateway"
              }
            },
            "dnszoneName": {
              "type": "string",
              "defaultValue": "contoso.xyz",
              "metadata": {
                "description": "Azure DNS Zone name."
              }
            },
            "dnszoneAdminConsoleLabel": {
              "type": "string",
              "defaultValue": "admin"
            },
            "dnszoneAdminT3ChannelLabel": {
              "type": "string",
              "defaultValue": "admin-t3"
            },
            "dnszoneClusterLabel": {
              "type": "string",
              "defaultValue": "www",
              "metadata": {
                "description": "Specify a label used to generate subdomain of WebLogic cluster. The final subdomain name will be label.dnszoneName, e.g. applications.contoso.xyz"
              }
            },
            "dnszoneClusterT3ChannelLabel": {
              "type": "string",
              "defaultValue": "cluster-t3"
            },
            "dnszoneRGName": {
              "type": "string",
              "defaultValue": "dns-contoso-rg"
            },
            "enableAppGWIngress": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "true to set up Application Gateway ingress."
              }
            },
            "enableCookieBasedAffinity": {
              "type": "bool",
              "defaultValue": false
            },
            "enableCustomSSL": {
              "type": "bool",
              "defaultValue": false
            },
            "enableDNSConfiguration": {
              "type": "bool",
              "defaultValue": false
            },
            "identity": {
              "type": "object"
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": "kv-contoso",
              "metadata": {
                "description": "Existing Key Vault Name"
              }
            },
            "keyVaultResourceGroup": {
              "type": "string",
              "defaultValue": "kv-contoso-rg",
              "metadata": {
                "description": "Resource group name in current subscription containing the KeyVault"
              }
            },
            "keyvaultBackendCertDataSecretName": {
              "type": "string",
              "defaultValue": "kv-ssl-backend-data"
            },
            "keyVaultSSLCertDataSecretName": {
              "type": "string",
              "defaultValue": "kv-ssl-data",
              "metadata": {
                "description": "The name of the secret in the specified KeyVault whose value is the SSL Certificate Data"
              }
            },
            "keyVaultSSLCertPasswordSecretName": {
              "type": "string",
              "defaultValue": "kv-ssl-psw",
              "metadata": {
                "description": "The name of the secret in the specified KeyVault whose value is the password for the SSL Certificate"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "eastus"
            },
            "lbSvcValues": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Object array to define Load Balancer service, each object must include service name, service target[admin-server or cluster-1], port."
              }
            },
            "servicePrincipal": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "useInternalLB": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "True to set up internal load balancer service."
              }
            },
            "wlsDomainName": {
              "type": "string",
              "defaultValue": "domain1",
              "metadata": {
                "description": "Name of WebLogic domain to create."
              }
            },
            "wlsDomainUID": {
              "type": "string",
              "defaultValue": "sample-domain1",
              "metadata": {
                "description": "UID of WebLogic domain, used in WebLogic Operator."
              }
            }
          },
          "functions": [],
          "variables": {
            "const_appgwCustomDNSAlias": "[format('{0}.{1}/', parameters('dnszoneClusterLabel'), parameters('dnszoneName'))]",
            "const_appgwAdminCustomDNSAlias": "[format('{0}.{1}/', parameters('dnszoneAdminConsoleLabel'), parameters('dnszoneName'))]",
            "const_appgwSSLCertOptionGenerateCert": "generateCert",
            "name_networkDeployment": "[if(parameters('enableAppGWIngress'), if(equals(parameters('appGatewayCertificateOption'), variables('const_appgwSSLCertOptionGenerateCert')), 'ds-networking-deployment-1', 'ds-networking-deployment'), 'ds-networking-deployment-2')]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "pid-networking-start-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidNetworkingStart')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "8805472380936134177"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1008.15138",
                              "templateHash": "14669053462841078328"
                            }
                          },
                          "functions": [],
                          "resources": []
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "38647ff6-ea8d-59e5-832d-b036a4d29c73"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "8ba7beaa-96fd-576a-acd8-28f7a6efa83a"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "ffab0a3f-90cb-585a-a7f9-ec0a62faeec1"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "e64361eb-fea0-5f15-a313-c76daadbc648"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "39d32fcd-1d02-50b6-9455-4b767a8e769e"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "ed47756f-2475-56dd-b13a-26027749b6e1"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "17328b4d-841f-57b5-a9c5-861ad48f9d0d"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "c46a11b1-e8d2-5053-9741-45294b2e15c9"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "18121d1c-4227-51ff-a9fa-ceb890d683e3"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4218fc54-4b9b-5e5c-b6a9-bc8736c25b68"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('enableAppGWIngress')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "pid-app-gateway-start-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidAppgwStart')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "8805472380936134177"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1008.15138",
                              "templateHash": "14669053462841078328"
                            }
                          },
                          "functions": [],
                          "resources": []
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "38647ff6-ea8d-59e5-832d-b036a4d29c73"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "8ba7beaa-96fd-576a-acd8-28f7a6efa83a"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "ffab0a3f-90cb-585a-a7f9-ec0a62faeec1"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "e64361eb-fea0-5f15-a313-c76daadbc648"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "39d32fcd-1d02-50b6-9455-4b767a8e769e"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "ed47756f-2475-56dd-b13a-26027749b6e1"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "17328b4d-841f-57b5-a9c5-861ad48f9d0d"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "c46a11b1-e8d2-5053-9741-45294b2e15c9"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "18121d1c-4227-51ff-a9fa-ceb890d683e3"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4218fc54-4b9b-5e5c-b6a9-bc8736c25b68"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('enableAppGWIngress')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "app-gateway-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "dnsNameforApplicationGateway": {
                    "value": "[parameters('dnsNameforApplicationGateway')]"
                  },
                  "gatewayPublicIPAddressName": {
                    "value": "[parameters('appGatewayPublicIPAddressName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "1601118008670448058"
                    }
                  },
                  "parameters": {
                    "dnsNameforApplicationGateway": {
                      "type": "string",
                      "defaultValue": "[take(format('wlsgw{0}', uniqueString(parameters('utcValue'))), 63)]",
                      "metadata": {
                        "description": "DNS for ApplicationGateway"
                      }
                    },
                    "gatewayPublicIPAddressName": {
                      "type": "string",
                      "defaultValue": "gwip",
                      "metadata": {
                        "description": "Public IP Name for the Application Gateway"
                      }
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_subnetAddressPrefix": "172.16.0.0/28",
                    "const_virtualNetworkAddressPrefix": "172.16.0.0/24",
                    "name_appGateway": "[format('appgw{0}', uniqueString(parameters('utcValue')))]",
                    "name_appGatewaySubnet": "appGatewaySubnet",
                    "name_backendAddressPool": "myGatewayBackendPool",
                    "name_frontEndIPConfig": "appGwPublicFrontendIp",
                    "name_httpListener": "HTTPListener",
                    "name_httpPort": "httpport",
                    "name_httpSetting": "myHTTPSetting",
                    "name_nsg": "[format('nsg{0}', uniqueString(parameters('utcValue')))]",
                    "name_virtualNetwork": "[format('vnet{0}', uniqueString(parameters('utcValue')))]",
                    "ref_appGatewaySubnet": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('name_virtualNetwork'), variables('name_appGatewaySubnet'))]",
                    "ref_backendAddressPool": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('name_appGateway'), variables('name_backendAddressPool'))]",
                    "ref_backendHttpSettings": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('name_appGateway'), variables('name_httpSetting'))]",
                    "ref_frontendHTTPPort": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('name_appGateway'), variables('name_httpPort'))]",
                    "ref_frontendIPConfiguration": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('name_appGateway'), variables('name_frontEndIPConfig'))]",
                    "ref_httpListener": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('name_appGateway'), variables('name_httpListener'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2020-07-01",
                      "name": "[variables('name_nsg')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "securityRules": [
                          {
                            "properties": {
                              "protocol": "Tcp",
                              "sourcePortRange": "*",
                              "destinationPortRange": "65200-65535",
                              "sourceAddressPrefix": "GatewayManager",
                              "destinationAddressPrefix": "*",
                              "access": "Allow",
                              "priority": 500,
                              "direction": "Inbound"
                            },
                            "name": "ALLOW_APPGW"
                          },
                          {
                            "properties": {
                              "protocol": "Tcp",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "Internet",
                              "destinationAddressPrefix": "*",
                              "access": "Allow",
                              "priority": 510,
                              "direction": "Inbound",
                              "sourcePortRanges": [],
                              "destinationPortRanges": [
                                "80",
                                "443"
                              ],
                              "sourceAddressPrefixes": [],
                              "destinationAddressPrefixes": []
                            },
                            "name": "ALLOW_HTTP_ACCESS"
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2020-07-01",
                      "name": "[variables('name_virtualNetwork')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "addressSpace": {
                          "addressPrefixes": [
                            "[variables('const_virtualNetworkAddressPrefix')]"
                          ]
                        },
                        "subnets": [
                          {
                            "name": "[variables('name_appGatewaySubnet')]",
                            "properties": {
                              "addressPrefix": "[variables('const_subnetAddressPrefix')]",
                              "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('name_nsg'))]"
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('name_nsg'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2020-07-01",
                      "name": "[parameters('gatewayPublicIPAddressName')]",
                      "sku": {
                        "name": "Standard"
                      },
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publicIPAllocationMethod": "Static",
                        "dnsSettings": {
                          "domainNameLabel": "[parameters('dnsNameforApplicationGateway')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/applicationGateways",
                      "apiVersion": "2020-07-01",
                      "name": "[variables('name_appGateway')]",
                      "location": "[resourceGroup().location]",
                      "tags": {
                        "managed-by-k8s-ingress": "true"
                      },
                      "properties": {
                        "sku": {
                          "name": "WAF_v2",
                          "tier": "WAF_v2"
                        },
                        "gatewayIPConfigurations": [
                          {
                            "name": "appGatewayIpConfig",
                            "properties": {
                              "subnet": {
                                "id": "[variables('ref_appGatewaySubnet')]"
                              }
                            }
                          }
                        ],
                        "frontendIPConfigurations": [
                          {
                            "name": "[variables('name_frontEndIPConfig')]",
                            "properties": {
                              "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))]"
                              }
                            }
                          }
                        ],
                        "frontendPorts": [
                          {
                            "name": "[variables('name_httpPort')]",
                            "properties": {
                              "port": 80
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "myGatewayBackendPool",
                            "properties": {
                              "backendAddresses": []
                            }
                          }
                        ],
                        "httpListeners": [
                          {
                            "name": "[variables('name_httpListener')]",
                            "properties": {
                              "protocol": "Http",
                              "frontendIPConfiguration": {
                                "id": "[variables('ref_frontendIPConfiguration')]"
                              },
                              "frontendPort": {
                                "id": "[variables('ref_frontendHTTPPort')]"
                              }
                            }
                          }
                        ],
                        "backendHttpSettingsCollection": [
                          {
                            "name": "[variables('name_httpSetting')]",
                            "properties": {
                              "port": 80,
                              "protocol": "Http"
                            }
                          }
                        ],
                        "requestRoutingRules": [
                          {
                            "name": "HTTPRoutingRule",
                            "properties": {
                              "httpListener": {
                                "id": "[variables('ref_httpListener')]"
                              },
                              "backendAddressPool": {
                                "id": "[variables('ref_backendAddressPool')]"
                              },
                              "backendHttpSettings": {
                                "id": "[variables('ref_backendHttpSettings')]"
                              }
                            }
                          }
                        ],
                        "enableHttp2": false,
                        "autoscaleConfiguration": {
                          "minCapacity": 2,
                          "maxCapacity": 3
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))]",
                        "[resourceId('Microsoft.Network/virtualNetworks', variables('name_virtualNetwork'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "appGatewayAlias": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))).dnsSettings.fqdn]"
                    },
                    "appGatewayName": {
                      "type": "string",
                      "value": "[variables('name_appGateway')]"
                    },
                    "appGatewayURL": {
                      "type": "string",
                      "value": "[format('http://{0}/', reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))).dnsSettings.fqdn)]"
                    },
                    "appGatewaySecuredURL": {
                      "type": "string",
                      "value": "[format('https://{0}/', reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))).dnsSettings.fqdn)]"
                    },
                    "vnetName": {
                      "type": "string",
                      "value": "[variables('name_virtualNetwork')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'pid-app-gateway-start-deployment')]"
              ]
            },
            {
              "condition": "[and(parameters('enableAppGWIngress'), parameters('enableCustomSSL'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "app-gateway-backend-cert-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "appgwName": {
                    "value": "[if(parameters('enableAppGWIngress'), reference(resourceId('Microsoft.Resources/deployments', 'app-gateway-deployment'), '2020-06-01').outputs.appGatewayName.value, 'null')]"
                  },
                  "sslBackendRootCertData": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('keyVaultResourceGroup')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      },
                      "secretName": "[parameters('keyvaultBackendCertDataSecretName')]"
                    }
                  },
                  "identity": {
                    "value": "[parameters('identity')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "8644091891956092471"
                    }
                  },
                  "parameters": {
                    "appgwName": {
                      "type": "string"
                    },
                    "sslBackendRootCertData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "identity": {
                      "type": "object"
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_arguments": "[format('{0} {1} {2}', resourceGroup().name, parameters('appgwName'), parameters('sslBackendRootCertData'))]",
                    "const_azcliVersion": "2.15.0",
                    "const_deploymentName": "ds-upload-trusted-root-certificatre-to-gateway"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[variables('const_deploymentName')]",
                      "location": "[resourceGroup().location]",
                      "kind": "AzureCLI",
                      "identity": "[parameters('identity')]",
                      "properties": {
                        "azCliVersion": "[variables('const_azcliVersion')]",
                        "arguments": "[variables('const_arguments')]",
                        "scriptContent": "# Copyright (c) 2021, Oracle Corporation and/or its affiliates.\n# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n# This script runs on Azure Container Instance with Alpine Linux that Azure Deployment script creates.\n\n# upload trusted root certificate to Azure Application Gateway\n# $1: resource group name\n# $2: Application Gateway name\n# $3: one line based64 string of the certificate data\n\n# The value is used in setupNetworking.sh, please do not change it.\nexport appgwBackendSecretName='backend-tls'\n\necho \"output certificate data to backend-cert.cer\"\necho \"$3\" | base64 -d >backend-cert.cer\n\naz network application-gateway root-cert create \\\n      --gateway-name $2  \\\n      --resource-group $1 \\\n      --name ${appgwBackendSecretName} \\\n      --cert-file backend-cert.cer\n\nif [ $? -ne 0 ]; then\n    echo \"Failed to upload trusted root certificate to Application Gateway ${2}\"\n    exit 1\nfi\n",
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D",
                        "forceUpdateTag": "[parameters('utcValue')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'app-gateway-deployment')]"
              ]
            },
            {
              "condition": "[and(parameters('enableDNSConfiguration'), parameters('createDNSZone'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "dnszone-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "dnszoneName": {
                    "value": "[parameters('dnszoneName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "6353609648537853708"
                    }
                  },
                  "parameters": {
                    "dnszoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure DNS Zone name."
                      }
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "type": "Microsoft.Network/dnsZones",
                      "apiVersion": "2018-05-01",
                      "name": "[parameters('dnszoneName')]",
                      "location": "global",
                      "properties": {
                        "zoneType": "Public"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'pid-networking-start-deployment')]"
              ]
            },
            {
              "condition": "[and(parameters('enableAppGWIngress'), not(equals(parameters('appGatewayCertificateOption'), variables('const_appgwSSLCertOptionGenerateCert'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "ds-networking-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "_artifactsLocation": {
                    "value": "[parameters('_artifactsLocation')]"
                  },
                  "_artifactsLocationSasToken": {
                    "value": "[parameters('_artifactsLocationSasToken')]"
                  },
                  "appgwName": {
                    "value": "[if(parameters('enableAppGWIngress'), reference(resourceId('Microsoft.Resources/deployments', 'app-gateway-deployment'), '2020-06-01').outputs.appGatewayName.value, 'null')]"
                  },
                  "appgwAlias": {
                    "value": "[if(parameters('enableAppGWIngress'), reference(resourceId('Microsoft.Resources/deployments', 'app-gateway-deployment'), '2020-06-01').outputs.appGatewayAlias.value, 'null')]"
                  },
                  "appgwCertificateOption": {
                    "value": "[parameters('appGatewayCertificateOption')]"
                  },
                  "appgwForAdminServer": {
                    "value": "[parameters('appgwForAdminServer')]"
                  },
                  "appgwForRemoteConsole": {
                    "value": "[parameters('appgwForRemoteConsole')]"
                  },
                  "appgwFrontendSSLCertData": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('keyVaultResourceGroup')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      },
                      "secretName": "[parameters('keyVaultSSLCertDataSecretName')]"
                    }
                  },
                  "appgwFrontendSSLCertPsw": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('keyVaultResourceGroup')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      },
                      "secretName": "[parameters('keyVaultSSLCertPasswordSecretName')]"
                    }
                  },
                  "aksClusterRGName": {
                    "value": "[parameters('aksClusterRGName')]"
                  },
                  "aksClusterName": {
                    "value": "[parameters('aksClusterName')]"
                  },
                  "dnszoneAdminConsoleLabel": {
                    "value": "[parameters('dnszoneAdminConsoleLabel')]"
                  },
                  "dnszoneAdminT3ChannelLabel": {
                    "value": "[parameters('dnszoneAdminT3ChannelLabel')]"
                  },
                  "dnszoneClusterLabel": {
                    "value": "[parameters('dnszoneClusterLabel')]"
                  },
                  "dnszoneClusterT3ChannelLabel": {
                    "value": "[parameters('dnszoneClusterT3ChannelLabel')]"
                  },
                  "dnszoneName": {
                    "value": "[parameters('dnszoneName')]"
                  },
                  "dnszoneRGName": {
                    "value": "[if(parameters('createDNSZone'), resourceGroup().name, parameters('dnszoneRGName'))]"
                  },
                  "enableAppGWIngress": {
                    "value": "[parameters('enableAppGWIngress')]"
                  },
                  "enableCookieBasedAffinity": {
                    "value": "[parameters('enableCookieBasedAffinity')]"
                  },
                  "enableCustomSSL": {
                    "value": "[parameters('enableCustomSSL')]"
                  },
                  "enableDNSConfiguration": {
                    "value": "[parameters('enableDNSConfiguration')]"
                  },
                  "identity": {
                    "value": "[parameters('identity')]"
                  },
                  "lbSvcValues": {
                    "value": "[parameters('lbSvcValues')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "servicePrincipal": {
                    "value": "[parameters('servicePrincipal')]"
                  },
                  "useInternalLB": {
                    "value": "[parameters('useInternalLB')]"
                  },
                  "vnetName": {
                    "value": "[if(parameters('enableAppGWIngress'), reference(resourceId('Microsoft.Resources/deployments', 'app-gateway-deployment'), '2020-06-01').outputs.vnetName.value, 'null')]"
                  },
                  "wlsDomainName": {
                    "value": "[parameters('wlsDomainName')]"
                  },
                  "wlsDomainUID": {
                    "value": "[parameters('wlsDomainUID')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "8305864557080278788"
                    }
                  },
                  "parameters": {
                    "_artifactsLocation": {
                      "type": "string"
                    },
                    "_artifactsLocationSasToken": {
                      "type": "secureString",
                      "defaultValue": ""
                    },
                    "appgwAlias": {
                      "type": "string",
                      "defaultValue": "appgw-contoso-alias"
                    },
                    "appgwName": {
                      "type": "string",
                      "defaultValue": "appgw-contoso"
                    },
                    "appgwCertificateOption": {
                      "type": "string",
                      "defaultValue": "haveCert",
                      "metadata": {
                        "description": "Three scenarios we support for deploying app gateway"
                      },
                      "allowedValues": [
                        "haveCert",
                        "haveKeyVault",
                        "generateCert"
                      ]
                    },
                    "appgwForAdminServer": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "appgwForRemoteConsole": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "appgwFrontendSSLCertData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "appgwFrontendSSLCertPsw": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "aksClusterRGName": {
                      "type": "string",
                      "defaultValue": "aks-contoso-rg"
                    },
                    "aksClusterName": {
                      "type": "string",
                      "defaultValue": "aks-contoso"
                    },
                    "dnszoneAdminConsoleLabel": {
                      "type": "string",
                      "defaultValue": "admin"
                    },
                    "dnszoneAdminT3ChannelLabel": {
                      "type": "string",
                      "defaultValue": "admin-t3"
                    },
                    "dnszoneClusterLabel": {
                      "type": "string",
                      "defaultValue": "www"
                    },
                    "dnszoneClusterT3ChannelLabel": {
                      "type": "string",
                      "defaultValue": "cluster-t3"
                    },
                    "dnszoneName": {
                      "type": "string",
                      "defaultValue": "contoso.xyz"
                    },
                    "dnszoneRGName": {
                      "type": "string",
                      "defaultValue": "dns-contoso-rg"
                    },
                    "enableAppGWIngress": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableCookieBasedAffinity": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableCustomSSL": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableDNSConfiguration": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "identity": {
                      "type": "object"
                    },
                    "lbSvcValues": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "eastus"
                    },
                    "servicePrincipal": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "useInternalLB": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    },
                    "vnetName": {
                      "type": "string",
                      "defaultValue": "vnet-contoso"
                    },
                    "wlsDomainName": {
                      "type": "string",
                      "defaultValue": "domain1"
                    },
                    "wlsDomainUID": {
                      "type": "string",
                      "defaultValue": "sample-domain1"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_appgwHelmConfigTemplate": "appgw-helm-config.yaml.template",
                    "const_appgwSARoleBindingFile": "appgw-ingress-clusterAdmin-roleBinding.yaml",
                    "const_arguments": "[format('{0} {1} {2} {3} \"{4}\" {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16} {17} {18} {19} {20} {21} {22} {23} {24} {25} {26}', parameters('aksClusterRGName'), parameters('aksClusterName'), parameters('wlsDomainName'), parameters('wlsDomainUID'), string(parameters('lbSvcValues')), parameters('enableAppGWIngress'), subscription().id, resourceGroup().name, parameters('appgwName'), parameters('vnetName'), string(parameters('servicePrincipal')), parameters('appgwForAdminServer'), parameters('enableDNSConfiguration'), parameters('dnszoneRGName'), parameters('dnszoneName'), parameters('dnszoneAdminConsoleLabel'), parameters('dnszoneClusterLabel'), parameters('appgwAlias'), parameters('useInternalLB'), parameters('appgwFrontendSSLCertData'), parameters('appgwFrontendSSLCertPsw'), parameters('appgwCertificateOption'), parameters('enableCustomSSL'), parameters('enableCookieBasedAffinity'), parameters('appgwForRemoteConsole'), parameters('dnszoneAdminT3ChannelLabel'), parameters('dnszoneClusterT3ChannelLabel'))]",
                    "const_commonScript": "common.sh",
                    "const_createDnsRecordScript": "createDnsRecord.sh",
                    "const_createLbSvcScript": "createLbSvc.sh",
                    "const_createGatewayIngressSvcScript": "createAppGatewayIngress.sh",
                    "const_scriptLocation": "[uri(parameters('_artifactsLocation'), 'scripts/')]",
                    "const_setupNetworkingScript": "setupNetworking.sh",
                    "const_primaryScript": "invokeSetupNetworking.sh",
                    "const_utilityScript": "utility.sh",
                    "name_deploymentName": "ds-networking-deployment"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "ds-networking-deployment",
                      "location": "[parameters('location')]",
                      "kind": "AzureCLI",
                      "identity": "[parameters('identity')]",
                      "properties": {
                        "azCliVersion": "2.15.0",
                        "arguments": "[variables('const_arguments')]",
                        "primaryScriptUri": "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_primaryScript'), parameters('_artifactsLocationSasToken')))]",
                        "supportingScriptUris": [
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_setupNetworkingScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_appgwHelmConfigTemplate'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_appgwSARoleBindingFile'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_commonScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_utilityScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_createDnsRecordScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_createLbSvcScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_createGatewayIngressSvcScript'), parameters('_artifactsLocationSasToken')))]"
                        ],
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D",
                        "forceUpdateTag": "[parameters('utcValue')]"
                      }
                    }
                  ],
                  "outputs": {
                    "adminConsoleLBUrl": {
                      "type": "string",
                      "value": "[if(and(and(not(parameters('enableCustomSSL')), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(variables('name_deploymentName')).outputs.adminConsoleEndpoint, 'null'))), format('http://{0}/', reference(variables('name_deploymentName')).outputs.adminConsoleEndpoint), '')]"
                    },
                    "adminConsoleLBSecuredUrl": {
                      "type": "string",
                      "value": "[if(and(and(parameters('enableCustomSSL'), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(variables('name_deploymentName')).outputs.adminConsoleEndpoint, 'null'))), format('https://{0}/', reference(variables('name_deploymentName')).outputs.adminConsoleEndpoint), '')]"
                    },
                    "adminServerT3LBUrl": {
                      "type": "string",
                      "value": "[if(and(greater(length(parameters('lbSvcValues')), 0), not(equals(reference(variables('name_deploymentName')).outputs.adminServerT3Endpoint, 'null'))), reference(variables('name_deploymentName')).outputs.adminServerT3Endpoint, '')]"
                    },
                    "adminRemoteUrl": {
                      "type": "string",
                      "value": "[if(and(and(not(parameters('enableCustomSSL')), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(variables('name_deploymentName')).outputs.adminRemoteEndpoint, 'null'))), format('http://{0}', reference(variables('name_deploymentName')).outputs.adminRemoteEndpoint), '')]"
                    },
                    "adminRemoteSecuredUrl": {
                      "type": "string",
                      "value": "[if(and(and(parameters('enableCustomSSL'), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(variables('name_deploymentName')).outputs.adminRemoteEndpoint, 'null'))), format('https://{0}', reference(variables('name_deploymentName')).outputs.adminRemoteEndpoint), '')]"
                    },
                    "clusterLBUrl": {
                      "type": "string",
                      "value": "[if(and(and(not(parameters('enableCustomSSL')), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(variables('name_deploymentName')).outputs.clusterEndpoint, 'null'))), format('http://{0}/', reference(variables('name_deploymentName')).outputs.clusterEndpoint), '')]"
                    },
                    "clusterLBSecuredUrl": {
                      "type": "string",
                      "value": "[if(and(and(parameters('enableCustomSSL'), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(variables('name_deploymentName')).outputs.clusterEndpoint, 'null'))), format('https://{0}/', reference(variables('name_deploymentName')).outputs.clusterEndpoint), '')]"
                    },
                    "clusterT3LBUrl": {
                      "type": "string",
                      "value": "[if(and(greater(length(parameters('lbSvcValues')), 0), not(equals(reference(variables('name_deploymentName')).outputs.clusterT3Endpoint, 'null'))), reference(variables('name_deploymentName')).outputs.clusterT3Endpoint, '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'app-gateway-backend-cert-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'app-gateway-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'dnszone-deployment')]"
              ]
            },
            {
              "condition": "[and(parameters('enableAppGWIngress'), equals(parameters('appGatewayCertificateOption'), variables('const_appgwSSLCertOptionGenerateCert')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "ds-networking-deployment-1",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "_artifactsLocation": {
                    "value": "[parameters('_artifactsLocation')]"
                  },
                  "_artifactsLocationSasToken": {
                    "value": "[parameters('_artifactsLocationSasToken')]"
                  },
                  "appgwName": {
                    "value": "[if(parameters('enableAppGWIngress'), reference(resourceId('Microsoft.Resources/deployments', 'app-gateway-deployment'), '2020-06-01').outputs.appGatewayName.value, 'null')]"
                  },
                  "appgwAlias": {
                    "value": "[if(parameters('enableAppGWIngress'), reference(resourceId('Microsoft.Resources/deployments', 'app-gateway-deployment'), '2020-06-01').outputs.appGatewayAlias.value, 'null')]"
                  },
                  "appgwCertificateOption": {
                    "value": "[parameters('appGatewayCertificateOption')]"
                  },
                  "appgwForAdminServer": {
                    "value": "[parameters('appgwForAdminServer')]"
                  },
                  "appgwForRemoteConsole": {
                    "value": "[parameters('appgwForRemoteConsole')]"
                  },
                  "appgwFrontendSSLCertData": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('keyVaultResourceGroup')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      },
                      "secretName": "[parameters('keyVaultSSLCertDataSecretName')]"
                    }
                  },
                  "appgwFrontendSSLCertPsw": {
                    "value": "null"
                  },
                  "aksClusterRGName": {
                    "value": "[parameters('aksClusterRGName')]"
                  },
                  "aksClusterName": {
                    "value": "[parameters('aksClusterName')]"
                  },
                  "dnszoneAdminConsoleLabel": {
                    "value": "[parameters('dnszoneAdminConsoleLabel')]"
                  },
                  "dnszoneAdminT3ChannelLabel": {
                    "value": "[parameters('dnszoneAdminT3ChannelLabel')]"
                  },
                  "dnszoneClusterLabel": {
                    "value": "[parameters('dnszoneClusterLabel')]"
                  },
                  "dnszoneClusterT3ChannelLabel": {
                    "value": "[parameters('dnszoneClusterT3ChannelLabel')]"
                  },
                  "dnszoneName": {
                    "value": "[parameters('dnszoneName')]"
                  },
                  "dnszoneRGName": {
                    "value": "[if(parameters('createDNSZone'), resourceGroup().name, parameters('dnszoneRGName'))]"
                  },
                  "enableAppGWIngress": {
                    "value": "[parameters('enableAppGWIngress')]"
                  },
                  "enableCustomSSL": {
                    "value": "[parameters('enableCustomSSL')]"
                  },
                  "enableCookieBasedAffinity": {
                    "value": "[parameters('enableCookieBasedAffinity')]"
                  },
                  "enableDNSConfiguration": {
                    "value": "[parameters('enableDNSConfiguration')]"
                  },
                  "identity": {
                    "value": "[parameters('identity')]"
                  },
                  "lbSvcValues": {
                    "value": "[parameters('lbSvcValues')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "servicePrincipal": {
                    "value": "[parameters('servicePrincipal')]"
                  },
                  "useInternalLB": {
                    "value": "[parameters('useInternalLB')]"
                  },
                  "vnetName": {
                    "value": "[if(parameters('enableAppGWIngress'), reference(resourceId('Microsoft.Resources/deployments', 'app-gateway-deployment'), '2020-06-01').outputs.vnetName.value, 'null')]"
                  },
                  "wlsDomainName": {
                    "value": "[parameters('wlsDomainName')]"
                  },
                  "wlsDomainUID": {
                    "value": "[parameters('wlsDomainUID')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "8305864557080278788"
                    }
                  },
                  "parameters": {
                    "_artifactsLocation": {
                      "type": "string"
                    },
                    "_artifactsLocationSasToken": {
                      "type": "secureString",
                      "defaultValue": ""
                    },
                    "appgwAlias": {
                      "type": "string",
                      "defaultValue": "appgw-contoso-alias"
                    },
                    "appgwName": {
                      "type": "string",
                      "defaultValue": "appgw-contoso"
                    },
                    "appgwCertificateOption": {
                      "type": "string",
                      "defaultValue": "haveCert",
                      "metadata": {
                        "description": "Three scenarios we support for deploying app gateway"
                      },
                      "allowedValues": [
                        "haveCert",
                        "haveKeyVault",
                        "generateCert"
                      ]
                    },
                    "appgwForAdminServer": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "appgwForRemoteConsole": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "appgwFrontendSSLCertData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "appgwFrontendSSLCertPsw": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "aksClusterRGName": {
                      "type": "string",
                      "defaultValue": "aks-contoso-rg"
                    },
                    "aksClusterName": {
                      "type": "string",
                      "defaultValue": "aks-contoso"
                    },
                    "dnszoneAdminConsoleLabel": {
                      "type": "string",
                      "defaultValue": "admin"
                    },
                    "dnszoneAdminT3ChannelLabel": {
                      "type": "string",
                      "defaultValue": "admin-t3"
                    },
                    "dnszoneClusterLabel": {
                      "type": "string",
                      "defaultValue": "www"
                    },
                    "dnszoneClusterT3ChannelLabel": {
                      "type": "string",
                      "defaultValue": "cluster-t3"
                    },
                    "dnszoneName": {
                      "type": "string",
                      "defaultValue": "contoso.xyz"
                    },
                    "dnszoneRGName": {
                      "type": "string",
                      "defaultValue": "dns-contoso-rg"
                    },
                    "enableAppGWIngress": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableCookieBasedAffinity": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableCustomSSL": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableDNSConfiguration": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "identity": {
                      "type": "object"
                    },
                    "lbSvcValues": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "eastus"
                    },
                    "servicePrincipal": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "useInternalLB": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    },
                    "vnetName": {
                      "type": "string",
                      "defaultValue": "vnet-contoso"
                    },
                    "wlsDomainName": {
                      "type": "string",
                      "defaultValue": "domain1"
                    },
                    "wlsDomainUID": {
                      "type": "string",
                      "defaultValue": "sample-domain1"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_appgwHelmConfigTemplate": "appgw-helm-config.yaml.template",
                    "const_appgwSARoleBindingFile": "appgw-ingress-clusterAdmin-roleBinding.yaml",
                    "const_arguments": "[format('{0} {1} {2} {3} \"{4}\" {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16} {17} {18} {19} {20} {21} {22} {23} {24} {25} {26}', parameters('aksClusterRGName'), parameters('aksClusterName'), parameters('wlsDomainName'), parameters('wlsDomainUID'), string(parameters('lbSvcValues')), parameters('enableAppGWIngress'), subscription().id, resourceGroup().name, parameters('appgwName'), parameters('vnetName'), string(parameters('servicePrincipal')), parameters('appgwForAdminServer'), parameters('enableDNSConfiguration'), parameters('dnszoneRGName'), parameters('dnszoneName'), parameters('dnszoneAdminConsoleLabel'), parameters('dnszoneClusterLabel'), parameters('appgwAlias'), parameters('useInternalLB'), parameters('appgwFrontendSSLCertData'), parameters('appgwFrontendSSLCertPsw'), parameters('appgwCertificateOption'), parameters('enableCustomSSL'), parameters('enableCookieBasedAffinity'), parameters('appgwForRemoteConsole'), parameters('dnszoneAdminT3ChannelLabel'), parameters('dnszoneClusterT3ChannelLabel'))]",
                    "const_commonScript": "common.sh",
                    "const_createDnsRecordScript": "createDnsRecord.sh",
                    "const_createLbSvcScript": "createLbSvc.sh",
                    "const_createGatewayIngressSvcScript": "createAppGatewayIngress.sh",
                    "const_scriptLocation": "[uri(parameters('_artifactsLocation'), 'scripts/')]",
                    "const_setupNetworkingScript": "setupNetworking.sh",
                    "const_primaryScript": "invokeSetupNetworking.sh",
                    "const_utilityScript": "utility.sh",
                    "name_deploymentName": "ds-networking-deployment"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "ds-networking-deployment",
                      "location": "[parameters('location')]",
                      "kind": "AzureCLI",
                      "identity": "[parameters('identity')]",
                      "properties": {
                        "azCliVersion": "2.15.0",
                        "arguments": "[variables('const_arguments')]",
                        "primaryScriptUri": "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_primaryScript'), parameters('_artifactsLocationSasToken')))]",
                        "supportingScriptUris": [
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_setupNetworkingScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_appgwHelmConfigTemplate'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_appgwSARoleBindingFile'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_commonScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_utilityScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_createDnsRecordScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_createLbSvcScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_createGatewayIngressSvcScript'), parameters('_artifactsLocationSasToken')))]"
                        ],
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D",
                        "forceUpdateTag": "[parameters('utcValue')]"
                      }
                    }
                  ],
                  "outputs": {
                    "adminConsoleLBUrl": {
                      "type": "string",
                      "value": "[if(and(and(not(parameters('enableCustomSSL')), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(variables('name_deploymentName')).outputs.adminConsoleEndpoint, 'null'))), format('http://{0}/', reference(variables('name_deploymentName')).outputs.adminConsoleEndpoint), '')]"
                    },
                    "adminConsoleLBSecuredUrl": {
                      "type": "string",
                      "value": "[if(and(and(parameters('enableCustomSSL'), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(variables('name_deploymentName')).outputs.adminConsoleEndpoint, 'null'))), format('https://{0}/', reference(variables('name_deploymentName')).outputs.adminConsoleEndpoint), '')]"
                    },
                    "adminServerT3LBUrl": {
                      "type": "string",
                      "value": "[if(and(greater(length(parameters('lbSvcValues')), 0), not(equals(reference(variables('name_deploymentName')).outputs.adminServerT3Endpoint, 'null'))), reference(variables('name_deploymentName')).outputs.adminServerT3Endpoint, '')]"
                    },
                    "adminRemoteUrl": {
                      "type": "string",
                      "value": "[if(and(and(not(parameters('enableCustomSSL')), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(variables('name_deploymentName')).outputs.adminRemoteEndpoint, 'null'))), format('http://{0}', reference(variables('name_deploymentName')).outputs.adminRemoteEndpoint), '')]"
                    },
                    "adminRemoteSecuredUrl": {
                      "type": "string",
                      "value": "[if(and(and(parameters('enableCustomSSL'), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(variables('name_deploymentName')).outputs.adminRemoteEndpoint, 'null'))), format('https://{0}', reference(variables('name_deploymentName')).outputs.adminRemoteEndpoint), '')]"
                    },
                    "clusterLBUrl": {
                      "type": "string",
                      "value": "[if(and(and(not(parameters('enableCustomSSL')), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(variables('name_deploymentName')).outputs.clusterEndpoint, 'null'))), format('http://{0}/', reference(variables('name_deploymentName')).outputs.clusterEndpoint), '')]"
                    },
                    "clusterLBSecuredUrl": {
                      "type": "string",
                      "value": "[if(and(and(parameters('enableCustomSSL'), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(variables('name_deploymentName')).outputs.clusterEndpoint, 'null'))), format('https://{0}/', reference(variables('name_deploymentName')).outputs.clusterEndpoint), '')]"
                    },
                    "clusterT3LBUrl": {
                      "type": "string",
                      "value": "[if(and(greater(length(parameters('lbSvcValues')), 0), not(equals(reference(variables('name_deploymentName')).outputs.clusterT3Endpoint, 'null'))), reference(variables('name_deploymentName')).outputs.clusterT3Endpoint, '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'app-gateway-backend-cert-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'app-gateway-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'dnszone-deployment')]"
              ]
            },
            {
              "condition": "[not(parameters('enableAppGWIngress'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "ds-networking-deployment-2",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "_artifactsLocation": {
                    "value": "[parameters('_artifactsLocation')]"
                  },
                  "_artifactsLocationSasToken": {
                    "value": "[parameters('_artifactsLocationSasToken')]"
                  },
                  "appgwName": {
                    "value": "null"
                  },
                  "appgwAlias": {
                    "value": "null"
                  },
                  "appgwCertificateOption": {
                    "value": "[parameters('appGatewayCertificateOption')]"
                  },
                  "appgwForAdminServer": {
                    "value": "[parameters('appgwForAdminServer')]"
                  },
                  "appgwForRemoteConsole": {
                    "value": "[parameters('appgwForRemoteConsole')]"
                  },
                  "appgwFrontendSSLCertData": {
                    "value": "null"
                  },
                  "appgwFrontendSSLCertPsw": {
                    "value": "null"
                  },
                  "aksClusterRGName": {
                    "value": "[parameters('aksClusterRGName')]"
                  },
                  "aksClusterName": {
                    "value": "[parameters('aksClusterName')]"
                  },
                  "dnszoneAdminConsoleLabel": {
                    "value": "[parameters('dnszoneAdminConsoleLabel')]"
                  },
                  "dnszoneAdminT3ChannelLabel": {
                    "value": "[parameters('dnszoneAdminT3ChannelLabel')]"
                  },
                  "dnszoneClusterLabel": {
                    "value": "[parameters('dnszoneClusterLabel')]"
                  },
                  "dnszoneClusterT3ChannelLabel": {
                    "value": "[parameters('dnszoneClusterT3ChannelLabel')]"
                  },
                  "dnszoneName": {
                    "value": "[parameters('dnszoneName')]"
                  },
                  "dnszoneRGName": {
                    "value": "[if(parameters('createDNSZone'), resourceGroup().name, parameters('dnszoneRGName'))]"
                  },
                  "enableAppGWIngress": {
                    "value": "[parameters('enableAppGWIngress')]"
                  },
                  "enableCookieBasedAffinity": {
                    "value": "[parameters('enableCookieBasedAffinity')]"
                  },
                  "enableCustomSSL": {
                    "value": "[parameters('enableCustomSSL')]"
                  },
                  "enableDNSConfiguration": {
                    "value": "[parameters('enableDNSConfiguration')]"
                  },
                  "identity": {
                    "value": "[parameters('identity')]"
                  },
                  "lbSvcValues": {
                    "value": "[parameters('lbSvcValues')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "servicePrincipal": {
                    "value": "[parameters('servicePrincipal')]"
                  },
                  "useInternalLB": {
                    "value": "[parameters('useInternalLB')]"
                  },
                  "vnetName": {
                    "value": "null"
                  },
                  "wlsDomainName": {
                    "value": "[parameters('wlsDomainName')]"
                  },
                  "wlsDomainUID": {
                    "value": "[parameters('wlsDomainUID')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "8305864557080278788"
                    }
                  },
                  "parameters": {
                    "_artifactsLocation": {
                      "type": "string"
                    },
                    "_artifactsLocationSasToken": {
                      "type": "secureString",
                      "defaultValue": ""
                    },
                    "appgwAlias": {
                      "type": "string",
                      "defaultValue": "appgw-contoso-alias"
                    },
                    "appgwName": {
                      "type": "string",
                      "defaultValue": "appgw-contoso"
                    },
                    "appgwCertificateOption": {
                      "type": "string",
                      "defaultValue": "haveCert",
                      "metadata": {
                        "description": "Three scenarios we support for deploying app gateway"
                      },
                      "allowedValues": [
                        "haveCert",
                        "haveKeyVault",
                        "generateCert"
                      ]
                    },
                    "appgwForAdminServer": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "appgwForRemoteConsole": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "appgwFrontendSSLCertData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "appgwFrontendSSLCertPsw": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "aksClusterRGName": {
                      "type": "string",
                      "defaultValue": "aks-contoso-rg"
                    },
                    "aksClusterName": {
                      "type": "string",
                      "defaultValue": "aks-contoso"
                    },
                    "dnszoneAdminConsoleLabel": {
                      "type": "string",
                      "defaultValue": "admin"
                    },
                    "dnszoneAdminT3ChannelLabel": {
                      "type": "string",
                      "defaultValue": "admin-t3"
                    },
                    "dnszoneClusterLabel": {
                      "type": "string",
                      "defaultValue": "www"
                    },
                    "dnszoneClusterT3ChannelLabel": {
                      "type": "string",
                      "defaultValue": "cluster-t3"
                    },
                    "dnszoneName": {
                      "type": "string",
                      "defaultValue": "contoso.xyz"
                    },
                    "dnszoneRGName": {
                      "type": "string",
                      "defaultValue": "dns-contoso-rg"
                    },
                    "enableAppGWIngress": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableCookieBasedAffinity": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableCustomSSL": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableDNSConfiguration": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "identity": {
                      "type": "object"
                    },
                    "lbSvcValues": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "eastus"
                    },
                    "servicePrincipal": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "useInternalLB": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    },
                    "vnetName": {
                      "type": "string",
                      "defaultValue": "vnet-contoso"
                    },
                    "wlsDomainName": {
                      "type": "string",
                      "defaultValue": "domain1"
                    },
                    "wlsDomainUID": {
                      "type": "string",
                      "defaultValue": "sample-domain1"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_appgwHelmConfigTemplate": "appgw-helm-config.yaml.template",
                    "const_appgwSARoleBindingFile": "appgw-ingress-clusterAdmin-roleBinding.yaml",
                    "const_arguments": "[format('{0} {1} {2} {3} \"{4}\" {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16} {17} {18} {19} {20} {21} {22} {23} {24} {25} {26}', parameters('aksClusterRGName'), parameters('aksClusterName'), parameters('wlsDomainName'), parameters('wlsDomainUID'), string(parameters('lbSvcValues')), parameters('enableAppGWIngress'), subscription().id, resourceGroup().name, parameters('appgwName'), parameters('vnetName'), string(parameters('servicePrincipal')), parameters('appgwForAdminServer'), parameters('enableDNSConfiguration'), parameters('dnszoneRGName'), parameters('dnszoneName'), parameters('dnszoneAdminConsoleLabel'), parameters('dnszoneClusterLabel'), parameters('appgwAlias'), parameters('useInternalLB'), parameters('appgwFrontendSSLCertData'), parameters('appgwFrontendSSLCertPsw'), parameters('appgwCertificateOption'), parameters('enableCustomSSL'), parameters('enableCookieBasedAffinity'), parameters('appgwForRemoteConsole'), parameters('dnszoneAdminT3ChannelLabel'), parameters('dnszoneClusterT3ChannelLabel'))]",
                    "const_commonScript": "common.sh",
                    "const_createDnsRecordScript": "createDnsRecord.sh",
                    "const_createLbSvcScript": "createLbSvc.sh",
                    "const_createGatewayIngressSvcScript": "createAppGatewayIngress.sh",
                    "const_scriptLocation": "[uri(parameters('_artifactsLocation'), 'scripts/')]",
                    "const_setupNetworkingScript": "setupNetworking.sh",
                    "const_primaryScript": "invokeSetupNetworking.sh",
                    "const_utilityScript": "utility.sh",
                    "name_deploymentName": "ds-networking-deployment"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "ds-networking-deployment",
                      "location": "[parameters('location')]",
                      "kind": "AzureCLI",
                      "identity": "[parameters('identity')]",
                      "properties": {
                        "azCliVersion": "2.15.0",
                        "arguments": "[variables('const_arguments')]",
                        "primaryScriptUri": "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_primaryScript'), parameters('_artifactsLocationSasToken')))]",
                        "supportingScriptUris": [
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_setupNetworkingScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_appgwHelmConfigTemplate'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_appgwSARoleBindingFile'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_commonScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_utilityScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_createDnsRecordScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_createLbSvcScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_createGatewayIngressSvcScript'), parameters('_artifactsLocationSasToken')))]"
                        ],
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D",
                        "forceUpdateTag": "[parameters('utcValue')]"
                      }
                    }
                  ],
                  "outputs": {
                    "adminConsoleLBUrl": {
                      "type": "string",
                      "value": "[if(and(and(not(parameters('enableCustomSSL')), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(variables('name_deploymentName')).outputs.adminConsoleEndpoint, 'null'))), format('http://{0}/', reference(variables('name_deploymentName')).outputs.adminConsoleEndpoint), '')]"
                    },
                    "adminConsoleLBSecuredUrl": {
                      "type": "string",
                      "value": "[if(and(and(parameters('enableCustomSSL'), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(variables('name_deploymentName')).outputs.adminConsoleEndpoint, 'null'))), format('https://{0}/', reference(variables('name_deploymentName')).outputs.adminConsoleEndpoint), '')]"
                    },
                    "adminServerT3LBUrl": {
                      "type": "string",
                      "value": "[if(and(greater(length(parameters('lbSvcValues')), 0), not(equals(reference(variables('name_deploymentName')).outputs.adminServerT3Endpoint, 'null'))), reference(variables('name_deploymentName')).outputs.adminServerT3Endpoint, '')]"
                    },
                    "adminRemoteUrl": {
                      "type": "string",
                      "value": "[if(and(and(not(parameters('enableCustomSSL')), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(variables('name_deploymentName')).outputs.adminRemoteEndpoint, 'null'))), format('http://{0}', reference(variables('name_deploymentName')).outputs.adminRemoteEndpoint), '')]"
                    },
                    "adminRemoteSecuredUrl": {
                      "type": "string",
                      "value": "[if(and(and(parameters('enableCustomSSL'), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(variables('name_deploymentName')).outputs.adminRemoteEndpoint, 'null'))), format('https://{0}', reference(variables('name_deploymentName')).outputs.adminRemoteEndpoint), '')]"
                    },
                    "clusterLBUrl": {
                      "type": "string",
                      "value": "[if(and(and(not(parameters('enableCustomSSL')), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(variables('name_deploymentName')).outputs.clusterEndpoint, 'null'))), format('http://{0}/', reference(variables('name_deploymentName')).outputs.clusterEndpoint), '')]"
                    },
                    "clusterLBSecuredUrl": {
                      "type": "string",
                      "value": "[if(and(and(parameters('enableCustomSSL'), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(variables('name_deploymentName')).outputs.clusterEndpoint, 'null'))), format('https://{0}/', reference(variables('name_deploymentName')).outputs.clusterEndpoint), '')]"
                    },
                    "clusterT3LBUrl": {
                      "type": "string",
                      "value": "[if(and(greater(length(parameters('lbSvcValues')), 0), not(equals(reference(variables('name_deploymentName')).outputs.clusterT3Endpoint, 'null'))), reference(variables('name_deploymentName')).outputs.clusterT3Endpoint, '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'dnszone-deployment')]"
              ]
            },
            {
              "condition": "[parameters('enableAppGWIngress')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "pid-app-gateway-end-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidAppgwEnd')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "8805472380936134177"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1008.15138",
                              "templateHash": "14669053462841078328"
                            }
                          },
                          "functions": [],
                          "resources": []
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "38647ff6-ea8d-59e5-832d-b036a4d29c73"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "8ba7beaa-96fd-576a-acd8-28f7a6efa83a"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "ffab0a3f-90cb-585a-a7f9-ec0a62faeec1"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "e64361eb-fea0-5f15-a313-c76daadbc648"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "39d32fcd-1d02-50b6-9455-4b767a8e769e"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "ed47756f-2475-56dd-b13a-26027749b6e1"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "17328b4d-841f-57b5-a9c5-861ad48f9d0d"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "c46a11b1-e8d2-5053-9741-45294b2e15c9"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "18121d1c-4227-51ff-a9fa-ceb890d683e3"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4218fc54-4b9b-5e5c-b6a9-bc8736c25b68"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'app-gateway-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "pid-networking-end-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidNetworkingEnd')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "8805472380936134177"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1008.15138",
                              "templateHash": "14669053462841078328"
                            }
                          },
                          "functions": [],
                          "resources": []
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "38647ff6-ea8d-59e5-832d-b036a4d29c73"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "8ba7beaa-96fd-576a-acd8-28f7a6efa83a"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "ffab0a3f-90cb-585a-a7f9-ec0a62faeec1"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "e64361eb-fea0-5f15-a313-c76daadbc648"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "39d32fcd-1d02-50b6-9455-4b767a8e769e"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "ed47756f-2475-56dd-b13a-26027749b6e1"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "17328b4d-841f-57b5-a9c5-861ad48f9d0d"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "c46a11b1-e8d2-5053-9741-45294b2e15c9"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "18121d1c-4227-51ff-a9fa-ceb890d683e3"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4218fc54-4b9b-5e5c-b6a9-bc8736c25b68"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'ds-networking-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'ds-networking-deployment-1')]",
                "[resourceId('Microsoft.Resources/deployments', 'ds-networking-deployment-2')]"
              ]
            }
          ],
          "outputs": {
            "adminConsoleExternalUrl": {
              "type": "string",
              "value": "[if(parameters('enableAppGWIngress'), if(parameters('enableDNSConfiguration'), format('http://{0}console', variables('const_appgwAdminCustomDNSAlias')), format('http://{0}/console', reference(resourceId('Microsoft.Resources/deployments', 'app-gateway-deployment'), '2020-06-01').outputs.appGatewayAlias.value)), reference(variables('name_networkDeployment')).adminConsoleLBUrl.value.value)]"
            },
            "adminConsoleExternalSecuredUrl": {
              "type": "string",
              "value": "[if(and(and(parameters('enableAppGWIngress'), parameters('enableCustomSSL')), parameters('enableDNSConfiguration')), format('https://{0}console', variables('const_appgwAdminCustomDNSAlias')), reference(variables('name_networkDeployment')).adminConsoleLBSecuredUrl.value.value)]"
            },
            "adminRemoteConsoleUrl": {
              "type": "string",
              "value": "[if(parameters('enableAppGWIngress'), if(parameters('enableDNSConfiguration'), format('http://{0}remoteconsole', variables('const_appgwAdminCustomDNSAlias')), format('http://{0}/remoteconsole', reference(resourceId('Microsoft.Resources/deployments', 'app-gateway-deployment'), '2020-06-01').outputs.appGatewayAlias.value)), reference(variables('name_networkDeployment')).adminRemoteUrl.value.value)]"
            },
            "adminRemoteConsoleSecuredUrl": {
              "type": "string",
              "value": "[if(and(and(parameters('enableAppGWIngress'), parameters('enableCustomSSL')), parameters('enableDNSConfiguration')), format('https://{0}remoteconsole', variables('const_appgwAdminCustomDNSAlias')), reference(variables('name_networkDeployment')).adminRemoteSecuredUrl.value.value)]"
            },
            "adminServerT3ChannelUrl": {
              "type": "string",
              "value": "[reference(variables('name_networkDeployment')).adminServerT3LBUrl.value.value]"
            },
            "clusterExternalUrl": {
              "type": "string",
              "value": "[if(parameters('enableAppGWIngress'), if(parameters('enableDNSConfiguration'), format('http://{0}', variables('const_appgwCustomDNSAlias')), reference(resourceId('Microsoft.Resources/deployments', 'app-gateway-deployment'), '2020-06-01').outputs.appGatewayURL.value), reference(variables('name_networkDeployment')).clusterLBUrl.value.value)]"
            },
            "clusterExternalSecuredUrl": {
              "type": "string",
              "value": "[if(parameters('enableAppGWIngress'), if(parameters('enableDNSConfiguration'), format('https://{0}', variables('const_appgwCustomDNSAlias')), reference(resourceId('Microsoft.Resources/deployments', 'app-gateway-deployment'), '2020-06-01').outputs.appGatewaySecuredURL.value), reference(variables('name_networkDeployment')).clusterLBSecuredUrl.value.value)]"
            },
            "clusterT3ChannelUrl": {
              "type": "string",
              "value": "[reference(variables('name_networkDeployment')).clusterT3LBUrl.value.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'appgateway-certificates-secrets-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'initialization')]"
      ]
    },
    {
      "condition": "[parameters('enableDB')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "datasource-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "_pidEnd": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2020-06-01').outputs.dbEnd.value]"
          },
          "_pidStart": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2020-06-01').outputs.dbStart.value]"
          },
          "aksClusterRGName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', if(parameters('enableCustomSSL'), 'setup-wls-cluster-with-custom-ssl-enabled', 'setup-wls-cluster'))).aksClusterRGName.value.value]"
          },
          "aksClusterName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', if(parameters('enableCustomSSL'), 'setup-wls-cluster-with-custom-ssl-enabled', 'setup-wls-cluster'))).aksClusterName.value.value]"
          },
          "databaseType": {
            "value": "[parameters('databaseType')]"
          },
          "dbConfigurationType": {
            "value": "[parameters('dbConfigurationType')]"
          },
          "dbPassword": {
            "value": "[parameters('dbPassword')]"
          },
          "dbUser": {
            "value": "[parameters('dbUser')]"
          },
          "dsConnectionURL": {
            "value": "[parameters('dsConnectionURL')]"
          },
          "identity": {
            "value": "[parameters('identity')]"
          },
          "jdbcDataSourceName": {
            "value": "[parameters('jdbcDataSourceName')]"
          },
          "wlsDomainUID": {
            "value": "[parameters('wlsDomainUID')]"
          },
          "wlsPassword": {
            "value": "[parameters('wlsPassword')]"
          },
          "wlsUserName": {
            "value": "[parameters('wlsUserName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "7571799785544485715"
            }
          },
          "parameters": {
            "_artifactsLocation": {
              "type": "string",
              "defaultValue": ""
            },
            "_artifactsLocationSasToken": {
              "type": "secureString",
              "defaultValue": ""
            },
            "_pidEnd": {
              "type": "string",
              "defaultValue": ""
            },
            "_pidStart": {
              "type": "string",
              "defaultValue": ""
            },
            "aksClusterName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of an existing AKS cluster."
              }
            },
            "aksClusterRGName": {
              "type": "string",
              "defaultValue": ""
            },
            "databaseType": {
              "type": "string",
              "defaultValue": "oracle",
              "metadata": {
                "description": "One of the supported database types"
              }
            },
            "dbConfigurationType": {
              "type": "string",
              "defaultValue": "createOrUpdate",
              "allowedValues": [
                "createOrUpdate",
                "delete"
              ]
            },
            "dbPassword": {
              "type": "string",
              "defaultValue": "[newGuid()]",
              "metadata": {
                "description": "Password for Database"
              }
            },
            "dbUser": {
              "type": "string",
              "defaultValue": "contosoDbUser",
              "metadata": {
                "description": "User id of Database"
              }
            },
            "dsConnectionURL": {
              "type": "string",
              "defaultValue": "jdbc:postgresql://contoso.postgres.database.azure.com:5432/postgres",
              "metadata": {
                "description": "JDBC Connection String"
              }
            },
            "identity": {
              "type": "object"
            },
            "jdbcDataSourceName": {
              "type": "string",
              "defaultValue": "jdbc/contoso",
              "metadata": {
                "description": "JNDI Name for JDBC Datasource"
              }
            },
            "wlsDomainUID": {
              "type": "string",
              "defaultValue": "sample-domain1",
              "metadata": {
                "description": "UID of WebLogic domain, used in WebLogic Operator."
              }
            },
            "wlsPassword": {
              "type": "secureString"
            },
            "wlsUserName": {
              "type": "string",
              "defaultValue": "weblogic",
              "metadata": {
                "description": "User name for WebLogic Administrator."
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "wls-aks-db-start-pid-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidStart')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "8805472380936134177"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1008.15138",
                              "templateHash": "14669053462841078328"
                            }
                          },
                          "functions": [],
                          "resources": []
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "38647ff6-ea8d-59e5-832d-b036a4d29c73"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "8ba7beaa-96fd-576a-acd8-28f7a6efa83a"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "ffab0a3f-90cb-585a-a7f9-ec0a62faeec1"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "e64361eb-fea0-5f15-a313-c76daadbc648"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "39d32fcd-1d02-50b6-9455-4b767a8e769e"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "ed47756f-2475-56dd-b13a-26027749b6e1"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "17328b4d-841f-57b5-a9c5-861ad48f9d0d"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "c46a11b1-e8d2-5053-9741-45294b2e15c9"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "18121d1c-4227-51ff-a9fa-ceb890d683e3"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4218fc54-4b9b-5e5c-b6a9-bc8736c25b68"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "create-update-datasource",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "_artifactsLocation": {
                    "value": "[parameters('_artifactsLocation')]"
                  },
                  "_artifactsLocationSasToken": {
                    "value": "[parameters('_artifactsLocationSasToken')]"
                  },
                  "aksClusterName": {
                    "value": "[parameters('aksClusterName')]"
                  },
                  "aksClusterRGName": {
                    "value": "[parameters('aksClusterRGName')]"
                  },
                  "databaseType": {
                    "value": "[parameters('databaseType')]"
                  },
                  "dbConfigurationType": {
                    "value": "[parameters('dbConfigurationType')]"
                  },
                  "dbPassword": {
                    "value": "[parameters('dbPassword')]"
                  },
                  "dbUser": {
                    "value": "[parameters('dbUser')]"
                  },
                  "dsConnectionURL": {
                    "value": "[parameters('dsConnectionURL')]"
                  },
                  "identity": {
                    "value": "[parameters('identity')]"
                  },
                  "jdbcDataSourceName": {
                    "value": "[parameters('jdbcDataSourceName')]"
                  },
                  "wlsDomainUID": {
                    "value": "[parameters('wlsDomainUID')]"
                  },
                  "wlsPassword": {
                    "value": "[parameters('wlsPassword')]"
                  },
                  "wlsUserName": {
                    "value": "[parameters('wlsUserName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "6023401087828814504"
                    }
                  },
                  "parameters": {
                    "_artifactsLocation": {
                      "type": "string"
                    },
                    "_artifactsLocationSasToken": {
                      "type": "secureString",
                      "defaultValue": ""
                    },
                    "aksClusterName": {
                      "type": "string"
                    },
                    "aksClusterRGName": {
                      "type": "string"
                    },
                    "databaseType": {
                      "type": "string",
                      "defaultValue": "oracle"
                    },
                    "dbConfigurationType": {
                      "type": "string"
                    },
                    "dbPassword": {
                      "type": "string",
                      "defaultValue": "[newGuid()]"
                    },
                    "dbUser": {
                      "type": "string"
                    },
                    "dsConnectionURL": {
                      "type": "string"
                    },
                    "identity": {
                      "type": "object"
                    },
                    "jdbcDataSourceName": {
                      "type": "string"
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    },
                    "wlsDomainUID": {
                      "type": "string",
                      "defaultValue": "sample-domain1"
                    },
                    "wlsPassword": {
                      "type": "secureString"
                    },
                    "wlsUserName": {
                      "type": "string",
                      "defaultValue": "weblogic",
                      "metadata": {
                        "description": "User name for WebLogic Administrator."
                      }
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_arguments": "[format('{0} {1} {2} {3} {4} \"{5}\" {6} {7} {8} {9} {10}', parameters('aksClusterRGName'), parameters('aksClusterName'), parameters('databaseType'), parameters('dbPassword'), parameters('dbUser'), parameters('dsConnectionURL'), parameters('jdbcDataSourceName'), parameters('wlsDomainUID'), parameters('wlsUserName'), parameters('wlsPassword'), parameters('dbConfigurationType'))]",
                    "const_azcliVersion": "2.15.0",
                    "const_commonScript": "common.sh",
                    "const_datasourceScript": "setupDBConnections.sh",
                    "const_datasourceModelScript": "genDatasourceModel.sh",
                    "const_dbUtilityScript": "dbUtility.sh",
                    "const_invokeSetupDBConnectionsScript": "invokeSetupDBConnections.sh",
                    "const_scriptLocation": "[uri(parameters('_artifactsLocation'), 'scripts/')]",
                    "const_utilityScript": "utility.sh"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "ds-wls-db-connection",
                      "location": "[resourceGroup().location]",
                      "kind": "AzureCLI",
                      "identity": "[parameters('identity')]",
                      "properties": {
                        "azCliVersion": "[variables('const_azcliVersion')]",
                        "arguments": "[variables('const_arguments')]",
                        "primaryScriptUri": "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_invokeSetupDBConnectionsScript'), parameters('_artifactsLocationSasToken')))]",
                        "supportingScriptUris": [
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_datasourceScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_commonScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_utilityScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_dbUtilityScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_datasourceModelScript'), parameters('_artifactsLocationSasToken')))]"
                        ],
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D",
                        "forceUpdateTag": "[parameters('utcValue')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'wls-aks-db-start-pid-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "wls-aks-db-end-pid-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidEnd')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "8805472380936134177"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1008.15138",
                              "templateHash": "14669053462841078328"
                            }
                          },
                          "functions": [],
                          "resources": []
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "38647ff6-ea8d-59e5-832d-b036a4d29c73"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "8ba7beaa-96fd-576a-acd8-28f7a6efa83a"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "ffab0a3f-90cb-585a-a7f9-ec0a62faeec1"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "e64361eb-fea0-5f15-a313-c76daadbc648"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "39d32fcd-1d02-50b6-9455-4b767a8e769e"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "ed47756f-2475-56dd-b13a-26027749b6e1"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "17328b4d-841f-57b5-a9c5-861ad48f9d0d"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "c46a11b1-e8d2-5053-9741-45294b2e15c9"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "18121d1c-4227-51ff-a9fa-ceb890d683e3"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4218fc54-4b9b-5e5c-b6a9-bc8736c25b68"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'create-update-datasource')]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'networking-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'initialization')]"
      ]
    }
  ],
  "outputs": {
    "aksClusterName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', if(parameters('enableCustomSSL'), 'setup-wls-cluster-with-custom-ssl-enabled', 'setup-wls-cluster'))).aksClusterName.value.value]"
    },
    "adminConsoleInternalUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', if(parameters('enableCustomSSL'), 'setup-wls-cluster-with-custom-ssl-enabled', 'setup-wls-cluster'))).adminServerUrl.value.value]"
    },
    "adminConsoleExternalUrl": {
      "type": "string",
      "value": "[if(variables('const_enableNetworking'), reference(resourceId('Microsoft.Resources/deployments', 'networking-deployment'), '2020-06-01').outputs.adminConsoleExternalUrl.value, '')]"
    },
    "adminConsoleExternalSecuredUrl": {
      "type": "string",
      "value": "[if(variables('const_enableNetworking'), reference(resourceId('Microsoft.Resources/deployments', 'networking-deployment'), '2020-06-01').outputs.adminConsoleExternalSecuredUrl.value, '')]"
    },
    "adminRemoteConsoleUrl": {
      "type": "string",
      "value": "[if(and(variables('const_enableNetworking'), not(parameters('enableCustomSSL'))), reference(resourceId('Microsoft.Resources/deployments', 'networking-deployment'), '2020-06-01').outputs.adminRemoteConsoleUrl.value, '')]"
    },
    "adminRemoteConsoleSecuredUrl": {
      "type": "string",
      "value": "[if(variables('const_enableNetworking'), reference(resourceId('Microsoft.Resources/deployments', 'networking-deployment'), '2020-06-01').outputs.adminRemoteConsoleSecuredUrl.value, '')]"
    },
    "adminServerT3InternalUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', if(parameters('enableCustomSSL'), 'setup-wls-cluster-with-custom-ssl-enabled', 'setup-wls-cluster'))).adminServerT3InternalUrl.value.value]"
    },
    "adminServerT3ExternalUrl": {
      "type": "string",
      "value": "[if(and(parameters('enableAdminT3Tunneling'), variables('const_enableNetworking')), format('{0}://{1}', if(parameters('enableCustomSSL'), 't3s', 't3'), reference(resourceId('Microsoft.Resources/deployments', 'networking-deployment'), '2020-06-01').outputs.adminServerT3ChannelUrl.value), '')]"
    },
    "clusterInternalUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', if(parameters('enableCustomSSL'), 'setup-wls-cluster-with-custom-ssl-enabled', 'setup-wls-cluster'))).clusterSVCUrl.value.value]"
    },
    "clusterExternalUrl": {
      "type": "string",
      "value": "[if(variables('const_enableNetworking'), reference(resourceId('Microsoft.Resources/deployments', 'networking-deployment'), '2020-06-01').outputs.clusterExternalUrl.value, '')]"
    },
    "clusterExternalSecuredUrl": {
      "type": "string",
      "value": "[if(variables('const_enableNetworking'), reference(resourceId('Microsoft.Resources/deployments', 'networking-deployment'), '2020-06-01').outputs.clusterExternalSecuredUrl.value, '')]"
    },
    "clusterT3InternalUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', if(parameters('enableCustomSSL'), 'setup-wls-cluster-with-custom-ssl-enabled', 'setup-wls-cluster'))).clusterT3InternalUrl.value.value]"
    },
    "clusterT3ExternalUrl": {
      "type": "string",
      "value": "[if(and(parameters('enableAdminT3Tunneling'), variables('const_enableNetworking')), format('{0}://{1}', if(parameters('enableCustomSSL'), 't3s', 't3'), reference(resourceId('Microsoft.Resources/deployments', 'networking-deployment'), '2020-06-01').outputs.clusterT3ChannelUrl.value), '')]"
    }
  }
}