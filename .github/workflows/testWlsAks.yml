name: Test WLS on AKS

on:
  workflow_dispatch:
    inputs:
      isForDemo:
        description: 'If set to true, JMS configuration for Cargo Tracker will be applied, and resources will not be deleted'
        required: true
        default: 'false'
  repository_dispatch:

env:
    refJavaee: 1a21a792d6bae6768b155945cf2703c3026ac691
    azCliVersion: 2.23.0
    azureCredentials: ${{ secrets.AZURE_CREDENTIALS }}
    location: eastus
    resourceGroupForWlsAks: wlsd-aks-${{ github.run_id }}-${{ github.run_number }}
    dbAdminUser: weblogic
    dbPassword: ${{ secrets.DB_PASSWORD }}
    dbName: wlsdb${{ github.run_id }}${{ github.run_number }}
    servicePrincipal: ${{ secrets.SERVICE_PRINCIPAL }}
    ocrSSOPSW: ${{ secrets.ORC_SSOPSW }}
    ocrSSOUser: ${{ secrets.ORC_SSOUSER }}
    wdtRuntimePassword: ${{ secrets.WDT_RUNTIMEPSW}}
    wlsUserName: ${{ secrets.WLS_USERNAME }}
    wlsPassword: ${{ secrets.WLS_PSW }}
    userAssignedManagedIdentity: ${{ secrets.USER_ASSIGNED_MANAGED_IDENTITY_ID }}
    aksRepoUserName: oracle
    aksRepoBranchName: main
    resourceGroupForDB: wlsd-db-${{ github.run_id }}-${{ github.run_number }}
    resourceGroupForStorageAccount: wlsd-sa-${{ github.run_id }}-${{ github.run_number }}
    storageAccountName: wlsdsa${{ github.run_id }}${{ github.run_number }}
    storageContainerName: wlsdcon${{ github.run_id }}${{ github.run_number }}

jobs:
    preflight:
        runs-on: ubuntu-latest
        steps:
            - name: Set up JDK 1.8
              uses: actions/setup-java@v1
              with:
                java-version: 1.8
            - name: Set up bicep
              run: |
                curl -Lo bicep https://github.com/Azure/bicep/releases/download/v0.4.451/bicep-linux-x64
                chmod +x ./bicep
                sudo mv ./bicep /usr/local/bin/bicep
                bicep --version
            - name: Checkout azure-javaee-iaas
              uses: actions/checkout@v2
              with:
                repository: Azure/azure-javaee-iaas
                path: azure-javaee-iaas
                ref: ${{ env.refJavaee }}
            - name: Build azure-javaee-iaas
              run: mvn -DskipTests clean install --file azure-javaee-iaas/pom.xml
            - name: Checkout ${{ env.aksRepoUserName }}/weblogic-azure
              uses: actions/checkout@v2
              with:
                repository: ${{ env.aksRepoUserName }}/weblogic-azure
                path: weblogic-azure
                ref: ${{ env.aksRepoBranchName }}
            - name: Build and test weblogic-azure/weblogic-azure-aks
              run: mvn -Pbicep -Ddev -Passembly clean install --file weblogic-azure/weblogic-azure-aks/pom.xml
            - name: Generate artifact file name and path
              id: artifact_file
              run: |
                version=$(awk '/<version>[^<]+<\/version>/{gsub(/<version>|<\/version>/,"",$1);print $1;exit;}' weblogic-azure/weblogic-azure-aks/pom.xml)
                artifactName=wls-on-aks-azure-marketplace-$version-arm-assembly
                unzip weblogic-azure/weblogic-azure-aks/target/$artifactName.zip -d weblogic-azure/weblogic-azure-aks/target/$artifactName
                echo "##[set-output name=artifactName;]${artifactName}"
                echo "##[set-output name=artifactPath;]weblogic-azure/weblogic-azure-aks/target/$artifactName"
            - name: Archive weblogic-azure/weblogic-azure-aks template
              uses: actions/upload-artifact@v1
              if: success()
              with:
                name: ${{steps.artifact_file.outputs.artifactName}}
                path: ${{steps.artifact_file.outputs.artifactPath}}
    deploy-db:
        needs: preflight
        runs-on: ubuntu-latest
        steps:
            - uses: azure/login@v1
              id: azure-login
              with:
                creds: ${{ env.azureCredentials }}
            - name: Create Resource Group
              uses: azure/CLI@v1
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    echo "create resource group" ${{ env.resourceGroupForDB }}
                    az group create --verbose --name ${{ env.resourceGroupForDB }} --location ${{ env.location }}
            - name: Set Up Azure Postgresql to Test dbTemplate
              id: setup-postgresql
              uses: azure/CLI@v1
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    echo "Deploy DB with name " ${{ env.dbName }}
                    az postgres server create \
                    --resource-group ${{ env.resourceGroupForDB }} \
                    --name ${{ env.dbName }}  \
                    --location ${{ env.location }} \
                    --admin-user ${{ env.dbAdminUser }} \
                    --ssl-enforcement Enabled \
                    --public-network-access Enabled \
                    --admin-password ${{ env.dbPassword }} \
                    --sku-name B_Gen5_1
                    echo "Allow Access To Azure Services"
                    az postgres server firewall-rule create \
                    -g ${{ env.resourceGroupForDB }} \
                    -s ${{ env.dbName }} \
                    -n "AllowAllWindowsAzureIps" \
                    --start-ip-address "0.0.0.0" \
                    --end-ip-address "0.0.0.0"
    deploy-storage-account:
        needs: preflight
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Azure-Samples/cargotracker-azure
              uses: actions/checkout@v2
              with:
                repository: Azure-Samples/cargotracker-azure
                path: cargotracker
            - name: Maven build web app
              run: |
                mvn clean install -PweblogicOnAks --file cargotracker/pom.xml
            - name: Query version string for deployment verification
              run: |
                PROPERTY_FILE="cargotracker/target/cargo-tracker/WEB-INF/classes/org/eclipse/cargotracker/messages.properties"
                PROP_KEY=versionString
                deployVersion=$(cat $PROPERTY_FILE | grep "$PROP_KEY" | cut -d '=' -f 2)
                echo "deployVersion=${deployVersion}" >> $GITHUB_ENV
            - uses: azure/login@v1
              id: azure-login
              with:
                creds: ${{ env.azureCredentials }}
            - name: Create Resource Group
              uses: azure/CLI@v1
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    echo "create resource group" ${{ env.resourceGroupForStorageAccount }}
                    az group create --verbose --name ${{ env.resourceGroupForStorageAccount }} --location ${{ env.location }}
            - name: Create Storage Account
              uses: azure/CLI@v1
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    az storage account create --name ${{ env.storageAccountName }} \
                        --resource-group ${{ env.resourceGroupForStorageAccount }} \
                        --location ${{ env.location }} \
                        --sku Standard_LRS \
                        --kind StorageV2
            - name: Create Storage Container
              uses: azure/CLI@v1
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    az storage container create -n ${{ env.storageContainerName }} --public-access container --account-name ${{ env.storageAccountName }}
            - name: Upload built web app war file
              uses: azure/CLI@v1
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    az storage blob upload --account-name ${{ env.storageAccountName }} --container-name ${{ env.storageContainerName }} --file cargotracker/target/cargo-tracker.war --name cargo-tracker.war         
    deploy-wls-on-aks:
        needs: [deploy-storage-account, deploy-db]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout ${{ env.aksRepoUserName }}/weblogic-azure
              uses: actions/checkout@v2
              with:
                repository: ${{ env.aksRepoUserName }}/weblogic-azure
                path: weblogic-azure
                ref: ${{ env.aksRepoBranchName }}
            - name: Get version information from weblogic-azure/weblogic-azure-aks/pom.xml
              id: version
              run: |
                version=$(awk '/<version>[^<]+<\/version>/{gsub(/<version>|<\/version>/,"",$1);print $1;exit;}' weblogic-azure/weblogic-azure-aks/pom.xml)
                echo "version=${version}" >> $GITHUB_ENV
            - name: Output artifact name for Download action
              id: artifact_file
              run: |
                artifactName=wls-on-aks-azure-marketplace-$version-arm-assembly
                echo "artifactName=${artifactName}" >> $GITHUB_ENV
                echo "##[set-output name=artifactName;]${artifactName}"
            - name: Download artifact for deployment
              uses: actions/download-artifact@v1
              with:
                name: ${{steps.artifact_file.outputs.artifactName}}
            - uses: azure/login@v1
              id: azure-login
              with:
                creds: ${{ env.azureCredentials }}
            - name: Query web app blob url and set to env
              uses: azure/CLI@v1
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    cargoTrackerBlobUrl=$(az storage blob url --account-name ${{ env.storageAccountName }} --container-name ${{ env.storageContainerName }} --name cargo-tracker.war -o tsv)
                    polishedUrl=$(echo ${cargoTrackerBlobUrl} | sed 's,/,\\\/,g')
                    echo "cargoTrackerBlobUrl=${polishedUrl}" >> $GITHUB_ENV
            - name: Create Resource Group
              uses: azure/CLI@v1
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    echo "create resource group" ${{ env.resourceGroupForWlsAks }}
                    az group create --verbose --name ${{ env.resourceGroupForWlsAks }} --location ${{ env.location }}
            - name: Checkout Azure-Samples/cargotracker-azure
              uses: actions/checkout@v2
              with:
                repository: Azure-Samples/cargotracker-azure
                path: cargotracker
            - name: Prepare parameter file
              run: |
                echo "replace placeholders using real parameter"
                sed -i "s/#location#/${location}/g; \
                        s/#wlsUserName#/${wlsUserName}/g; \
                        s/#wlsPassword#/${wlsPassword}/g; \
                        s/#userAssignedManagedIdentity#/${userAssignedManagedIdentity}/g; \
                        s/#ocrSSOPSW#/${ocrSSOPSW}/g; \
                        s/#ocrSSOUser#/${ocrSSOUser}/g; \
                        s/#appPackageUrls#/${cargoTrackerBlobUrl}/g; \
                        s/#servicePrincipal#/${servicePrincipal}/g; \
                        s/#wdtRuntimePassword#/${wdtRuntimePassword}/g; \
                        s/#testbranchName#/${aksRepoBranchName}/g; \
                        s/#gitUserName#/${aksRepoUserName}/g; \
                        s/#dbPassword#/${dbPassword}/g; \
                        s/#dbUser#/${dbAdminUser}@${dbName}/g; \
                        s/#dsConnectionURL#/jdbc:postgresql:\/\/${dbName}.postgres.database.azure.com:5432\/postgres/g" \
                        weblogic-azure/weblogic-azure-aks/src/test/setupWlsAksParameters.json
            - name: Deploy WebLogic Server Cluster Domain offer
              id: deploy-wls-cluster
              uses: azure/CLI@v1
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    az deployment group create \
                    --verbose \
                    --resource-group ${{ env.resourceGroupForWlsAks }} \
                    --name wls-on-aks \
                    --parameters @weblogic-azure/weblogic-azure-aks/src/test/setupWlsAksParameters.json \
                    --template-file ${artifactName}/mainTemplate.json
            - name: Query Application Gateway URL
              run: |
                appgatewayname=$(az resource list --resource-group ${{ env.resourceGroupForWlsAks }} --query "[?type=='Microsoft.Network/applicationGateways'].name|[0]" -o tsv)
                echo $appgatewayname
                publicIpAddressId=$(az network application-gateway show --resource-group ${{ env.resourceGroupForWlsAks }} --name ${appgatewayname} --query frontendIpConfigurations[0].publicIpAddress.id -o tsv)
                echo $publicIpAddressId
                appGatewayURL=$(az network public-ip show --resource-group ${{ env.resourceGroupForWlsAks }} --ids ${publicIpAddressId} --query dnsSettings.fqdn -o tsv)
                echo $appGatewayURL
                echo "appGatewayURL=${appGatewayURL}" >> $GITHUB_ENV
            - name: Verify Cargo Tracker is deployed as expected
              run: |
                echo "Verifying Cargo Tracker is deployed as expected"
                curl --verbose http://${{ env.appGatewayURL }}/cargo-tracker/
                response=$(curl --write-out '%{http_code}' --silent --output /dev/null http://${{ env.appGatewayURL }}/cargo-tracker/)
                echo "$response"
                if [ "$response" -ne 200 ]; then
                  echo "Cargo Tracker is not accessible"
                  exit 1
                else
                  echo "Cargo Tracker is accessible"
                fi
            - name: Install kubectl
              if: ${{ github.event.inputs.isForDemo == 'true' }}
              run: |
                curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
                sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
                kubectl version --client
            - name: Connect to AKS cluster
              if: ${{ github.event.inputs.isForDemo == 'true' }}
              run: |
                echo "connect to cluster"
                aksClusterName=$(az resource list --resource-group ${{ env.resourceGroupForWlsAks }} --query "[?type=='Microsoft.ContainerService/managedClusters'].name|[0]" -o tsv)
                az aks get-credentials --resource-group ${{ env.resourceGroupForWlsAks }} --name $aksClusterName
            - name: Generate&Apply configmap
              if: ${{ github.event.inputs.isForDemo == 'true' }}
              run: |
                wlsConfigmapName=sample-domain1-wdt-config-map
                wlsConfigmapJson=cargo-tracker-db.json
                modelFilePath=models
                mkdir ${modelFilePath}
                echo "create configmap"
                echo "export exisiting configmap"
                kubectl -n sample-domain1-ns get configmap ${wlsConfigmapName} -o json >${wlsConfigmapJson}

                echo "query model keys"
                keyList=$(cat ${wlsConfigmapJson} | jq '.data | keys[]' | tr -d "\"")
                for item in $keyList; do
                    data=$(cat ${wlsConfigmapJson} | jq ".data[\"${item}\"]")
                    data=$(echo "${data:1:${#data}-2}")
                    echo -e "${data}" >${modelFilePath}/${item}
                done

                # remove current configmap and create a new one
                kubectl -n sample-domain1-ns delete configmap ${wlsConfigmapName}

                cp cargotracker/src/test/aks/cargo-tracker-jms.yaml ${modelFilePath}/cargo-tracker-jms.yaml

                kubectl -n sample-domain1-ns create configmap ${wlsConfigmapName} \
                --from-file=${modelFilePath}

                kubectl -n sample-domain1-ns label configmap ${wlsConfigmapName} \
                weblogic.domainUID=sample-domain1
                restartVersion=$(kubectl -n sample-domain1-ns get domain sample-domain1 '-o=jsonpath={.spec.restartVersion}')
                # increase restart version
                restartVersion=$((restartVersion + 1))
                echo "append configmap and update restart version"
                kubectl -n sample-domain1-ns patch domain sample-domain1 \
                    --type=json \
                    '-p=[{"op": "replace", "path": "/spec/restartVersion", "value": "'${restartVersion}'" }, {"op": "add", "path": "/spec/configuration/model/configMap", "value": "'${wlsConfigmapName}'" }]'
    cleanup:
      needs: deploy-wls-on-aks
      if: ${{ github.event.inputs.isForDemo == 'false' }}
      runs-on: ubuntu-latest
      steps:
      - uses: azure/login@v1
        id: azure-login
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Delete Storage Account Resource Group
        id: delete-sa-resource-group
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.azCliVersion }}
          inlineScript: |
            echo "delete... " ${{ env.resourceGroupForStorageAccount }}
            az group delete --yes --no-wait --verbose --name ${{ env.resourceGroupForStorageAccount }}
      - name: Delete DB Resource Group
        id: delete-db-resource-group
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.azCliVersion }}
          inlineScript: |
            echo "delete... " ${{ env.resourceGroupForDB }}
            az group delete --yes --no-wait --verbose --name ${{ env.resourceGroupForDB }}
      - name: Delete AKS Resource Group
        id: delete-aks-resource-group
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.azCliVersion }}
          inlineScript: |
            echo "delete... " ${{ env.resourceGroupForWlsAks }}
            az group delete --yes --no-wait --verbose --name ${{ env.resourceGroupForWlsAks }}