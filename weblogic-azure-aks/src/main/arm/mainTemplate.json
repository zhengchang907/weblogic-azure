{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.613.9944",
      "templateHash": "18170192633155645767"
    }
  },
  "parameters": {
    "_artifactsLocation": {
      "type": "string",
      "defaultValue": "[deployment().properties.templateLink.uri]"
    },
    "_artifactsLocationSasToken": {
      "type": "secureString",
      "defaultValue": ""
    },
    "aciResourcePermissions": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "true to use resource or workspace permissions. false to require workspace permissions."
      }
    },
    "aciRetentionInDays": {
      "type": "int",
      "defaultValue": 120,
      "metadata": {
        "description": "Number of days to retain data in Azure Monitor workspace."
      }
    },
    "aciWorkspaceSku": {
      "type": "string",
      "defaultValue": "pergb2018",
      "metadata": {
        "description": "Pricing tier: PerGB2018 or legacy tiers (Free, Standalone, PerNode, Standard or Premium) which are not available to all customers."
      }
    },
    "acrName": {
      "type": "string",
      "defaultValue": "acr-contoso"
    },
    "aksAgentPoolName": {
      "type": "string",
      "defaultValue": "agentpool",
      "metadata": {
        "description": "The name for this node pool. Node pool must contain only lowercase letters and numbers. For Linux node pools the name cannot be longer than 12 characters."
      },
      "minLength": 1,
      "maxLength": 12
    },
    "aksAgentPoolNodeCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "The number of nodes that should be created along with the cluster. You will be able to resize the cluster later."
      },
      "minValue": 1,
      "maxValue": 10000
    },
    "aksAgentPoolVMSize": {
      "type": "string",
      "defaultValue": "Standard_DS2_v2",
      "metadata": {
        "description": "The size of the virtual machines that will form the nodes in the cluster. This cannot be changed after creating the cluster"
      }
    },
    "aksClusterNamePrefix": {
      "type": "string",
      "defaultValue": "wlsonaks",
      "metadata": {
        "description": "Prefix for cluster name. Only The name can contain only letters, numbers, underscores and hyphens. The name must start with letter or number."
      }
    },
    "aksClusterRGName": {
      "type": "string",
      "defaultValue": "aks-contoso-rg",
      "metadata": {
        "description": "Resource group name of an existing AKS cluster."
      }
    },
    "aksClusterName": {
      "type": "string",
      "defaultValue": "aks-contoso",
      "metadata": {
        "description": "Name of an existing AKS cluster."
      }
    },
    "aksVersion": {
      "type": "string",
      "defaultValue": "default",
      "metadata": {
        "description": "The AKS version."
      }
    },
    "appGatewayCertificateOption": {
      "type": "string",
      "defaultValue": "haveCert",
      "metadata": {
        "description": "Three scenarios we support for deploying app gateway"
      },
      "allowedValues": [
        "haveCert",
        "haveKeyVault",
        "generateCert"
      ]
    },
    "appGatewayPublicIPAddressName": {
      "type": "string",
      "defaultValue": "gwip",
      "metadata": {
        "description": "Public IP Name for the Application Gateway"
      }
    },
    "appGatewaySSLBackendRootCertData": {
      "type": "string",
      "defaultValue": "appgw-ssl-backend-data",
      "metadata": {
        "description": "The one-line, base64 string of the backend SSL root certificate data."
      }
    },
    "appGatewaySSLCertData": {
      "type": "string",
      "defaultValue": "appgw-ssl-data",
      "metadata": {
        "description": "The one-line, base64 string of the SSL certificate data."
      }
    },
    "appGatewaySSLCertPassword": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "The value of the password for the SSL Certificate"
      }
    },
    "appgwForAdminServer": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Create Application Gateway ingress for admin console."
      }
    },
    "appgwForRemoteConsole": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Create Application Gateway ingress for remote console."
      }
    },
    "appgwUsePrivateIP": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "If true, configure Azure Application Gateway frontend IP with private IP."
      }
    },
    "appPackageUrls": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Urls of Java EE application packages."
      }
    },
    "appReplicas": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The number of managed server to start."
      }
    },
    "createACR": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "true to create a new Azure Container Registry."
      }
    },
    "createAKSCluster": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "true to create a new AKS cluster."
      }
    },
    "createDNSZone": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "If true, the template will update records to the existing DNS Zone. If false, the template will create a new DNS Zone."
      }
    },
    "databaseType": {
      "type": "string",
      "defaultValue": "oracle",
      "metadata": {
        "description": "One of the supported database types"
      },
      "allowedValues": [
        "oracle",
        "postgresql",
        "sqlserver",
        "otherdb"
      ]
    },
    "dbConfigurationType": {
      "type": "string",
      "defaultValue": "createOrUpdate",
      "metadata": {
        "description": "createOrUpdate: create a new data source connection, or update an existing data source connection. delete: delete an existing data source connection"
      },
      "allowedValues": [
        "createOrUpdate",
        "delete"
      ]
    },
    "dbDriverLibrariesUrls": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Urls of datasource drivers, must be specified if database type is otherdb"
      }
    },
    "dbDriverName": {
      "type": "string",
      "defaultValue": "org.contoso.Driver",
      "metadata": {
        "description": "Datasource driver name, must be specified if database type is otherdb"
      }
    },
    "dbGlobalTranPro": {
      "type": "string",
      "defaultValue": "EmulateTwoPhaseCommit",
      "metadata": {
        "description": "Determines the transaction protocol (global transaction processing behavior) for the data source."
      }
    },
    "dbPassword": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Password for Database"
      }
    },
    "dbTestTableName": {
      "type": "string",
      "defaultValue": "Null",
      "metadata": {
        "description": "The name of the database table to use when testing physical database connections. This name is required when you specify a Test Frequency and enable Test Reserved Connections."
      }
    },
    "dbUser": {
      "type": "string",
      "defaultValue": "contosoDbUser",
      "metadata": {
        "description": "User id of Database"
      }
    },
    "dnsNameforApplicationGateway": {
      "type": "string",
      "defaultValue": "wlsgw",
      "metadata": {
        "description": "DNS prefix for ApplicationGateway"
      }
    },
    "dnszoneAdminConsoleLabel": {
      "type": "string",
      "defaultValue": "admin",
      "metadata": {
        "description": "Specify a label used to generate subdomain of Admin server. The final subdomain name will be label.dnszoneName, e.g. admin.contoso.xyz"
      }
    },
    "dnszoneAdminT3ChannelLabel": {
      "type": "string",
      "defaultValue": "admin-t3",
      "metadata": {
        "description": "Specify a label used to generate subdomain of Admin server T3 channel. The final subdomain name will be label.dnszoneName, e.g. admin-t3.contoso.xyz"
      }
    },
    "dnszoneClusterLabel": {
      "type": "string",
      "defaultValue": "www",
      "metadata": {
        "description": "Specify a label used to generate subdomain of WebLogic cluster. The final subdomain name will be label.dnszoneName, e.g. applications.contoso.xyz"
      }
    },
    "dnszoneClusterT3ChannelLabel": {
      "type": "string",
      "defaultValue": "cluster-t3"
    },
    "dnszoneName": {
      "type": "string",
      "defaultValue": "contoso.xyz",
      "metadata": {
        "description": "Azure DNS Zone name."
      }
    },
    "dnszoneRGName": {
      "type": "string",
      "defaultValue": "dns-contoso-rg"
    },
    "dsConnectionURL": {
      "type": "string",
      "defaultValue": "jdbc:postgresql://contoso.postgres.database.azure.com:5432/postgres",
      "metadata": {
        "description": "JDBC Connection String"
      }
    },
    "enableAppGWIngress": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "true to set up Application Gateway ingress."
      }
    },
    "enableAzureMonitoring": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "In addition to the CPU and memory metrics included in AKS by default, you can enable Container Insights for more comprehensive data on the overall performance and health of your cluster. Billing is based on data ingestion and retention settings."
      }
    },
    "enableAzureFileShare": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "true to create persistent volume using file share."
      }
    },
    "enableCookieBasedAffinity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "true to enable cookie based affinity."
      }
    },
    "enableCustomSSL": {
      "type": "bool",
      "defaultValue": false
    },
    "enableDB": {
      "type": "bool",
      "defaultValue": false
    },
    "enableDNSConfiguration": {
      "type": "bool",
      "defaultValue": false
    },
    "enableAdminT3Tunneling": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Configure a custom channel in Admin Server for the T3 protocol that enables HTTP tunneling"
      }
    },
    "enableClusterT3Tunneling": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Configure a custom channel in WebLogic cluster for the T3 protocol that enables HTTP tunneling"
      }
    },
    "isSSOSupportEntitled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Is the specified SSO account associated with an active Oracle support contract?"
      }
    },
    "jdbcDataSourceName": {
      "type": "string",
      "defaultValue": "jdbc/contoso",
      "metadata": {
        "description": "JNDI Name for JDBC Datasource"
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "kv-contoso",
      "metadata": {
        "description": "Existing Key Vault Name"
      }
    },
    "keyVaultResourceGroup": {
      "type": "string",
      "defaultValue": "kv-contoso-rg",
      "metadata": {
        "description": "Resource group name in current subscription containing the KeyVault"
      }
    },
    "keyVaultSku": {
      "type": "string",
      "defaultValue": "Standard",
      "metadata": {
        "description": "Price tier for Key Vault."
      }
    },
    "keyVaultSSLBackendRootCertDataSecretName": {
      "type": "string",
      "defaultValue": "kv-ssl-backend-data",
      "metadata": {
        "description": "The name of the secret in the specified KeyVault whose value is the SSL Root Certificate Data for Appliation Gateway backend TLS/SSL."
      }
    },
    "keyVaultSSLCertDataSecretName": {
      "type": "string",
      "defaultValue": "kv-ssl-data",
      "metadata": {
        "description": "The name of the secret in the specified KeyVault whose value is the SSL Certificate Data for Appliation Gateway frontend TLS/SSL."
      }
    },
    "keyVaultSSLCertPasswordSecretName": {
      "type": "string",
      "defaultValue": "kv-ssl-psw",
      "metadata": {
        "description": "The name of the secret in the specified KeyVault whose value is the password for the SSL Certificate of Appliation Gateway frontend TLS/SSL"
      }
    },
    "location": {
      "type": "string"
    },
    "lbSvcValues": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Object array to define Load Balancer service, each object must include service name, service target[admin-server or cluster-1], port."
      }
    },
    "managedServerPrefix": {
      "type": "string",
      "defaultValue": "managed-server",
      "metadata": {
        "description": "Name prefix of managed server."
      }
    },
    "newOrExistingVnetForApplicationGateway": {
      "type": "string",
      "defaultValue": "new",
      "metadata": {
        "description": "To mitigate ARM-TTK error: Control Named vnetForApplicationGateway must output the newOrExisting property when hideExisting is false"
      }
    },
    "ocrSSOPSW": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Password of Oracle SSO account."
      }
    },
    "ocrSSOUser": {
      "type": "string",
      "defaultValue": "null",
      "metadata": {
        "description": "User name of Oracle SSO account."
      }
    },
    "sslConfigurationAccessOption": {
      "type": "string",
      "defaultValue": "uploadConfig",
      "metadata": {
        "description": "Two scenarios to refer to WebLogic Server TLS/SSL certificates."
      },
      "allowedValues": [
        "uploadConfig",
        "keyVaultStoredConfig"
      ]
    },
    "sslKeyVaultCustomIdentityKeyStoreDataSecretName": {
      "type": "string",
      "defaultValue": "kv-wls-identity-data",
      "metadata": {
        "description": "Secret name in KeyVault containing Weblogic Custom Identity Keystore Data"
      }
    },
    "sslKeyVaultCustomIdentityKeyStorePassPhraseSecretName": {
      "type": "string",
      "defaultValue": "kv-wls-identity-psw",
      "metadata": {
        "description": "Secret name in KeyVault containing Weblogic Custom Identity Keystore Passphrase"
      }
    },
    "sslKeyVaultCustomIdentityKeyStoreType": {
      "type": "string",
      "defaultValue": "PKCS12",
      "allowedValues": [
        "JKS",
        "PKCS12"
      ],
      "metadata": {
        "description": "Weblogic Custom Identity Keystore type"
      }
    },
    "sslKeyVaultCustomTrustKeyStoreDataSecretName": {
      "type": "string",
      "defaultValue": "kv-wls-trust-data",
      "metadata": {
        "description": "Secret name in KeyVault containing Weblogic Custom Trust Store Data"
      }
    },
    "sslKeyVaultCustomTrustKeyStorePassPhraseSecretName": {
      "type": "string",
      "defaultValue": "kv-wls-trust-psw",
      "metadata": {
        "description": "Secret name in KeyVault containing Weblogic Custom Trust Store Passphrase"
      }
    },
    "sslKeyVaultCustomTrustKeyStoreType": {
      "type": "string",
      "defaultValue": "PKCS12",
      "allowedValues": [
        "JKS",
        "PKCS12"
      ],
      "metadata": {
        "description": "WWeblogic Custom Trust Store type"
      }
    },
    "sslKeyVaultName": {
      "type": "string",
      "defaultValue": "kv-wls-ssl-name",
      "metadata": {
        "description": "Resource group containing Weblogic SSL certificates"
      }
    },
    "sslKeyVaultPrivateKeyAliasSecretName": {
      "type": "string",
      "defaultValue": "contoso",
      "metadata": {
        "description": "Secret name in KeyVault containing Weblogic Server private key alias"
      }
    },
    "sslKeyVaultPrivateKeyPassPhraseSecretName": {
      "type": "string",
      "defaultValue": "kv-wls-ssl-alias",
      "metadata": {
        "description": "Secret name in KeyVault containing Weblogic Server private key passphrase"
      }
    },
    "sslKeyVaultResourceGroup": {
      "type": "string",
      "defaultValue": "rg-kv-wls-ssl-name",
      "metadata": {
        "description": "Keyvault name containing Weblogic SSL certificates"
      }
    },
    "sslUploadedCustomIdentityKeyStoreData": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Custom Identity Store Data"
      }
    },
    "sslUploadedCustomIdentityKeyStorePassphrase": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Custom Identity Store passphrase"
      }
    },
    "sslUploadedCustomIdentityKeyStoreType": {
      "type": "string",
      "defaultValue": "PKCS12",
      "allowedValues": [
        "JKS",
        "PKCS12"
      ],
      "metadata": {
        "description": "Weblogic Custom Identity Store Type"
      }
    },
    "sslUploadedCustomTrustKeyStoreData": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Custom Trust Store data"
      }
    },
    "sslUploadedCustomTrustKeyStorePassPhrase": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Custom Trust Store passphrase"
      }
    },
    "sslUploadedCustomTrustKeyStoreType": {
      "type": "string",
      "defaultValue": "PKCS12",
      "allowedValues": [
        "JKS",
        "PKCS12"
      ],
      "metadata": {
        "description": "Weblogic Custom Trust Store Type"
      }
    },
    "sslUploadedPrivateKeyAlias": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Alias of the private key"
      }
    },
    "sslUploadedPrivateKeyPassPhrase": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Password of the private key"
      }
    },
    "t3ChannelAdminPort": {
      "type": "int",
      "defaultValue": 7005,
      "metadata": {
        "description": "Public port of the custom T3 channel in admin server"
      }
    },
    "t3ChannelClusterPort": {
      "type": "int",
      "defaultValue": 8011,
      "metadata": {
        "description": "Public port of the custom T3 channel in WebLoigc cluster"
      }
    },
    "useLatestSupportedAksVersion": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "True to use latest supported Kubernetes version."
      }
    },
    "useInternalLB": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "True to set up internal load balancer service."
      }
    },
    "utcValue": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "ture to upload Java EE applications and deploy the applications to WebLogic domain."
      }
    },
    "userProvidedAcr": {
      "type": "string",
      "defaultValue": "null",
      "metadata": {
        "description": "User provided ACR for base image"
      }
    },
    "userProvidedImagePath": {
      "type": "string",
      "defaultValue": "null",
      "metadata": {
        "description": "User provided base image path"
      }
    },
    "useOracleImage": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Use Oracle images or user provided patched images"
      }
    },
    "validateApplications": {
      "type": "bool",
      "defaultValue": false
    },
    "vnetForApplicationGateway": {
      "type": "object",
      "defaultValue": {
        "name": "wlsaks-app-gateway-vnet",
        "resourceGroup": "[resourceGroup().name]",
        "addressPrefixes": [
          "172.16.0.0/24"
        ],
        "addressPrefix": "172.16.0.0/24",
        "newOrExisting": "new",
        "subnets": {
          "gatewaySubnet": {
            "name": "wlsaks-gateway-subnet",
            "addressPrefix": "172.16.0.0/24",
            "startAddress": "172.16.0.4"
          }
        }
      },
      "metadata": {
        "description": "VNET for Application Gateway."
      }
    },
    "vnetRGNameForApplicationGateway": {
      "type": "string",
      "defaultValue": "vnet-contoso-rg-name",
      "metadata": {
        "description": "To mitigate ARM-TTK error: Control Named vnetForApplicationGateway must output the resourceGroup property when hideExisting is false"
      }
    },
    "wdtRuntimePassword": {
      "type": "secureString",
      "metadata": {
        "description": "Password for model WebLogic Deploy Tooling runtime encrytion."
      }
    },
    "wlsClusterSize": {
      "type": "int",
      "defaultValue": 5,
      "metadata": {
        "description": "Maximum cluster size."
      }
    },
    "wlsCPU": {
      "type": "string",
      "defaultValue": "200m",
      "metadata": {
        "description": "Requests for CPU resources for admin server and managed server."
      }
    },
    "wlsDomainName": {
      "type": "string",
      "defaultValue": "domain1",
      "metadata": {
        "description": "Name of WebLogic domain to create."
      }
    },
    "wlsDomainUID": {
      "type": "string",
      "defaultValue": "sample-domain1",
      "metadata": {
        "description": "UID of WebLogic domain, used in WebLogic Operator."
      }
    },
    "wlsImageTag": {
      "type": "string",
      "defaultValue": "12.2.1.4",
      "metadata": {
        "description": "Docker tag that comes after \"container-registry.oracle.com/middleware/weblogic:\""
      }
    },
    "wlsJavaOption": {
      "type": "string",
      "defaultValue": "null"
    },
    "wlsMemory": {
      "type": "string",
      "defaultValue": "1.5Gi",
      "metadata": {
        "description": "Memory requests for admin server and managed server."
      }
    },
    "wlsPassword": {
      "type": "secureString"
    },
    "wlsUserName": {
      "type": "string",
      "defaultValue": "weblogic",
      "metadata": {
        "description": "User name for WebLogic Administrator."
      }
    }
  },
  "functions": [],
  "variables": {
    "_enableCustomSSL": "[parameters('enableCustomSSL')]",
    "_enableAppGWIngress": "[parameters('enableAppGWIngress')]",
    "_useExistingAppGatewaySSLCertificate": "[if(equals(parameters('appGatewayCertificateOption'), variables('const_appGatewaySSLCertOptionHaveCert')), true(), false())]",
    "const_appGatewaySSLCertOptionHaveCert": "haveCert",
    "const_appGatewaySSLCertOptionHaveKeyVault": "haveKeyVault",
    "const_azcliVersion": "2.33.1",
    "const_azureSubjectName": "[format('{0}.{1}.{2}', variables('name_domainLabelforApplicationGateway'), parameters('location'), 'cloudapp.azure.com')]",
    "const_hasTags": "[contains(resourceGroup(), 'tags')]",
    "const_bCreateNewKeyVault": "[and(or(or(not(variables('const_hasTags')), not(contains(resourceGroup().tags, variables('name_tagNameForKeyVault')))), empty(resourceGroup().tags.wlsKeyVault)), or(and(parameters('enableCustomSSL'), not(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')))), and(parameters('enableAppGWIngress'), not(equals(parameters('appGatewayCertificateOption'), variables('const_appGatewaySSLCertOptionHaveKeyVault'))))))]",
    "const_createNewAcr": "[and(parameters('useOracleImage'), parameters('createACR'))]",
    "const_defaultKeystoreType": "PKCS12",
    "const_enableNetworking": "[or(greater(length(parameters('lbSvcValues')), 0), parameters('enableAppGWIngress'))]",
    "const_enablePV": "[or(parameters('enableCustomSSL'), parameters('enableAzureFileShare'))]",
    "const_identityKeyStoreType": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultCustomIdentityKeyStoreType'), parameters('sslUploadedCustomIdentityKeyStoreType'))]",
    "const_keyvaultNameFromTag": "[if(and(variables('const_hasTags'), contains(resourceGroup().tags, variables('name_tagNameForKeyVault'))), resourceGroup().tags.wlsKeyVault, '')]",
    "const_showAdminConsoleExUrl": "[or(greater(length(parameters('lbSvcValues')), 0), and(parameters('enableAppGWIngress'), parameters('appgwForAdminServer')))]",
    "const_showRemoteAdminConsoleExUrl": "[and(or(greater(length(parameters('lbSvcValues')), 0), and(parameters('enableAppGWIngress'), parameters('appgwForRemoteConsole'))), not(parameters('enableCustomSSL')))]",
    "const_showRemoteAdminConsoleSecuredExUrl": "[and(or(greater(length(parameters('lbSvcValues')), 0), and(parameters('enableAppGWIngress'), parameters('appgwForRemoteConsole'))), parameters('enableCustomSSL'))]",
    "const_trustKeyStoreType": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultCustomTrustKeyStoreType'), parameters('sslUploadedCustomTrustKeyStoreType'))]",
    "const_wlsClusterName": "cluster-1",
    "const_wlsJavaOptions": "[if(equals(parameters('wlsJavaOption'), ''), 'null', parameters('wlsJavaOption'))]",
    "const_wlsSSLCertOptionKeyVault": "keyVaultStoredConfig",
    "name_appgwFrontendSSLCertName": "appGatewaySslCert",
    "name_appgwBackendRootCertName": "appGatewayTrustedRootCert",
    "name_defaultPidDeployment": "pid",
    "name_dnsNameforApplicationGateway": "[format('{0}{1}', parameters('dnsNameforApplicationGateway'), take(parameters('utcValue'), 6))]",
    "name_domainLabelforApplicationGateway": "[take(format('{0}-{1}-{2}', variables('name_dnsNameforApplicationGateway'), toLower(variables('name_rgNameWithoutSpecialCharacter')), toLower(parameters('wlsDomainName'))), 63)]",
    "name_identityKeyStoreDataSecret": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultCustomIdentityKeyStoreDataSecretName'), 'myIdentityKeyStoreData')]",
    "name_identityKeyStorePswSecret": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultCustomIdentityKeyStorePassPhraseSecretName'), 'myIdentityKeyStorePsw')]",
    "name_keyVaultName": "[if(empty(variables('const_keyvaultNameFromTag')), take(format('wls-kv{0}', uniqueString(parameters('utcValue'))), 24), resourceGroup().tags.wlsKeyVault)]",
    "name_privateKeyAliasSecret": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultPrivateKeyAliasSecretName'), 'privateKeyAlias')]",
    "name_privateKeyPswSecret": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultPrivateKeyPassPhraseSecretName'), 'privateKeyPsw')]",
    "name_rgNameWithoutSpecialCharacter": "[replace(replace(replace(replace(resourceGroup().name, '.', ''), '(', ''), ')', ''), '_', '')]",
    "name_rgKeyvaultForWLSSSL": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultResourceGroup'), resourceGroup().name)]",
    "name_tagNameForKeyVault": "wlsKeyVault",
    "name_tagNameForStorageAccount": "wlsStorageAccount",
    "name_trustKeyStoreDataSecret": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultCustomTrustKeyStoreDataSecretName'), 'myTrustKeyStoreData')]",
    "name_trustKeyStorePswSecret": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultCustomTrustKeyStorePassPhraseSecretName'), 'myTrustKeyStorePsw')]",
    "ref_wlsDomainDeployment": "[if(variables('_enableCustomSSL'), reference(resourceId('Microsoft.Resources/deployments', 'setup-wls-cluster-with-custom-ssl-enabled'), '2019-10-01').outputs, reference(resourceId('Microsoft.Resources/deployments', 'setup-wls-cluster'), '2019-10-01').outputs)]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/tags",
      "apiVersion": "2021-04-01",
      "name": "default",
      "properties": {
        "tags": {
          "[variables('name_tagNameForKeyVault')]": "[if(variables('const_bCreateNewKeyVault'), variables('name_keyVaultName'), variables('const_keyvaultNameFromTag'))]",
          "[variables('name_tagNameForStorageAccount')]": "[if(or(and(or(parameters('createAKSCluster'), not(and(not(parameters('createAKSCluster')), not(equals(reference(resourceId('Microsoft.Resources/deployments', 'query-existing-storage-account'), '2019-10-01').outputs.storageAccount.value, 'null'))))), variables('const_enablePV')), and(not(parameters('createAKSCluster')), not(equals(reference(resourceId('Microsoft.Resources/deployments', 'query-existing-storage-account'), '2019-10-01').outputs.storageAccount.value, 'null')))), if(and(not(parameters('createAKSCluster')), not(equals(reference(resourceId('Microsoft.Resources/deployments', 'query-existing-storage-account'), '2019-10-01').outputs.storageAccount.value, 'null'))), reference(resourceId('Microsoft.Resources/deployments', 'query-existing-storage-account'), '2019-10-01').outputs.storageAccount.value, format('wls{0}', uniqueString(parameters('utcValue')))), '')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'appgateway-certificates-secrets-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'query-existing-storage-account')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "initialization",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.613.9944",
              "templateHash": "3360241215376299589"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "pid"
            }
          },
          "functions": [],
          "resources": [
            {
              "condition": "[not(equals(parameters('name'), 'pid'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "[parameters('name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "6023100456016179368"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "This is an empty deployment"
                    }
                  },
                  "functions": [],
                  "resources": [],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "appgwEnd": {
              "type": "string",
              "value": "47ea43a0-95cf-52c7-aee8-7ee6106fc1bf"
            },
            "appgwStart": {
              "type": "string",
              "value": "01288010-2672-5831-a66b-7b8b45cace1b"
            },
            "dbEnd": {
              "type": "string",
              "value": "d7a9c78e-39d9-5a47-928d-8645ed86dafd"
            },
            "dbStart": {
              "type": "string",
              "value": "0cc86800-37f4-5191-9368-2953394309ec"
            },
            "dnsEnd": {
              "type": "string",
              "value": "754e16bc-4d81-5343-b99b-7532abd6587d"
            },
            "dnsStart": {
              "type": "string",
              "value": "64ae895c-feb3-529e-8435-5d2e49f94e09"
            },
            "lbEnd": {
              "type": "string",
              "value": "ce664543-77bd-515a-832e-107e32f99da9"
            },
            "lbStart": {
              "type": "string",
              "value": "44732bbc-04c4-5df7-a0c6-b9be9ec00ee6"
            },
            "networkingEnd": {
              "type": "string",
              "value": "2798165c-49fa-5701-b608-b80ed3986176"
            },
            "networkingStart": {
              "type": "string",
              "value": "0793308f-de9d-5f0d-92f9-d9fc4b413b8b"
            },
            "wlsAKSEnd": {
              "type": "string",
              "value": "2571f846-2f66-5c22-9fe6-38ecea7889ac"
            },
            "wlsAKSStart": {
              "type": "string",
              "value": "3e6acde5-9a62-5488-9fd4-87c46f4105f4"
            },
            "wlsClusterAppEnd": {
              "type": "string",
              "value": "e6e33240-e5db-52fc-9154-7fc7b3b8b508"
            },
            "wlsClusterAppStart": {
              "type": "string",
              "value": "4570a81a-3f3a-53d5-b178-7f985d9c5ecf"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "pid-a1775ed4-512c-4cfa-9e68-f0b09b36de90-partnercenter",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.613.9944",
              "templateHash": "6023100456016179368"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "This is an empty deployment"
            }
          },
          "functions": [],
          "resources": [],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "uami-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.613.9944",
              "templateHash": "5089096914697670348"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "const_roleDefinitionIdOfContributor": "b24988ac-6180-42a0-ab88-20f7382dd24c",
            "name_deploymentScriptUserDefinedManagedIdentity": "wls-aks-deployment-script-user-defined-managed-itentity",
            "name_deploymentScriptContributorRoleAssignmentName": "[guid(format('{0}{1}Deployment Script', resourceGroup().id, variables('name_deploymentScriptUserDefinedManagedIdentity')))]"
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2021-09-30-preview",
              "name": "[variables('name_deploymentScriptUserDefinedManagedIdentity')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "[variables('name_deploymentScriptContributorRoleAssignmentName')]",
              "subscriptionId": "[subscription().subscriptionId]",
              "location": "[resourceGroup().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleDefinitionId": {
                    "value": "[variables('const_roleDefinitionIdOfContributor')]"
                  },
                  "principalId": {
                    "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('name_deploymentScriptUserDefinedManagedIdentity'))).principalId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "6553098195663843505"
                    }
                  },
                  "parameters": {
                    "roleDefinitionId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "principalId": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "functions": [],
                  "variables": {
                    "name_roleAssignmentName": "[guid(format('{0}{1}Role assignment in subscription scope', subscription().id, parameters('principalId')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-10-01-preview",
                      "name": "[variables('name_roleAssignmentName')]",
                      "properties": {
                        "description": "Assign subscription scope role to User Assigned Managed Identity ",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal",
                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
                      }
                    }
                  ],
                  "outputs": {
                    "roleId": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "uamiIdForDeploymentScript": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('name_deploymentScriptUserDefinedManagedIdentity'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "pre-azure-resources-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "acrName": {
            "value": "[parameters('acrName')]"
          },
          "createNewAcr": {
            "value": "[variables('const_createNewAcr')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.613.9944",
              "templateHash": "16379657565991259128"
            }
          },
          "parameters": {
            "acrName": {
              "type": "string",
              "defaultValue": "acr-contoso"
            },
            "createNewAcr": {
              "type": "bool",
              "defaultValue": false
            },
            "location": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "condition": "[parameters('createNewAcr')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "acr-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "12077006738513481980"
                    }
                  },
                  "parameters": {
                    "acrNamePrefix": {
                      "type": "string",
                      "defaultValue": "wlsaksacr"
                    },
                    "location": {
                      "type": "string"
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "name_acr": "[format('{0}{1}', parameters('acrNamePrefix'), uniqueString(parameters('utcValue')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ContainerRegistry/registries",
                      "apiVersion": "2021-09-01",
                      "name": "[variables('name_acr')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Standard",
                        "tier": "Standard"
                      },
                      "properties": {
                        "adminUserEnabled": true,
                        "policies": {
                          "quarantinePolicy": {
                            "status": "disabled"
                          },
                          "trustPolicy": {
                            "type": "Notary",
                            "status": "disabled"
                          },
                          "retentionPolicy": {
                            "days": 7,
                            "status": "disabled"
                          }
                        },
                        "encryption": {
                          "status": "disabled"
                        },
                        "dataEndpointEnabled": false,
                        "publicNetworkAccess": "Enabled",
                        "networkRuleBypassOptions": "AzureServices",
                        "zoneRedundancy": "Disabled",
                        "anonymousPullEnabled": false
                      }
                    }
                  ],
                  "outputs": {
                    "acrName": {
                      "type": "string",
                      "value": "[variables('name_acr')]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "acrName": {
              "type": "string",
              "value": "[if(parameters('createNewAcr'), reference(resourceId('Microsoft.Resources/deployments', 'acr-deployment'), '2019-10-01').outputs.acrName.value, parameters('acrName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'pid-a1775ed4-512c-4cfa-9e68-f0b09b36de90-partnercenter')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "validate-parameters-and-fail-fast",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "acrName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'pre-azure-resources-deployment'), '2019-10-01').outputs.acrName.value]"
          },
          "aksAgentPoolNodeCount": {
            "value": "[parameters('aksAgentPoolNodeCount')]"
          },
          "aksAgentPoolVMSize": {
            "value": "[parameters('aksAgentPoolVMSize')]"
          },
          "aksClusterRGName": {
            "value": "[parameters('aksClusterRGName')]"
          },
          "aksClusterName": {
            "value": "[parameters('aksClusterName')]"
          },
          "aksVersion": {
            "value": "[parameters('aksVersion')]"
          },
          "appGatewayCertificateOption": {
            "value": "[parameters('appGatewayCertificateOption')]"
          },
          "appGatewaySSLCertData": {
            "value": "[parameters('appGatewaySSLCertData')]"
          },
          "appGatewaySSLCertPassword": {
            "value": "[parameters('appGatewaySSLCertPassword')]"
          },
          "azCliVersion": {
            "value": "[variables('const_azcliVersion')]"
          },
          "createAKSCluster": {
            "value": "[parameters('createAKSCluster')]"
          },
          "createDNSZone": {
            "value": "[parameters('createDNSZone')]"
          },
          "dnszoneName": {
            "value": "[parameters('dnszoneName')]"
          },
          "dnszoneRGName": {
            "value": "[parameters('dnszoneRGName')]"
          },
          "enableAppGWIngress": {
            "value": "[parameters('enableAppGWIngress')]"
          },
          "enableCustomSSL": {
            "value": "[parameters('enableCustomSSL')]"
          },
          "enableDNSConfiguration": {
            "value": "[parameters('enableDNSConfiguration')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultResourceGroup": {
            "value": "[parameters('keyVaultResourceGroup')]"
          },
          "keyVaultSSLCertDataSecretName": {
            "value": "[parameters('keyVaultSSLCertDataSecretName')]"
          },
          "keyVaultSSLCertPasswordSecretName": {
            "value": "[parameters('keyVaultSSLCertPasswordSecretName')]"
          },
          "identity": {
            "value": {
              "type": "UserAssigned",
              "userAssignedIdentities": {
                "[reference(resourceId('Microsoft.Resources/deployments', 'uami-deployment'), '2019-10-01').outputs.uamiIdForDeploymentScript.value]": {}
              }
            }
          },
          "isSSOSupportEntitled": {
            "value": "[parameters('isSSOSupportEntitled')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "ocrSSOPSW": {
            "value": "[parameters('ocrSSOPSW')]"
          },
          "ocrSSOUser": {
            "value": "[parameters('ocrSSOUser')]"
          },
          "sslConfigurationAccessOption": {
            "value": "[parameters('sslConfigurationAccessOption')]"
          },
          "sslKeyVaultCustomIdentityKeyStoreDataSecretName": {
            "value": "[parameters('sslKeyVaultCustomIdentityKeyStoreDataSecretName')]"
          },
          "sslKeyVaultCustomIdentityKeyStorePassPhraseSecretName": {
            "value": "[parameters('sslKeyVaultCustomIdentityKeyStorePassPhraseSecretName')]"
          },
          "sslKeyVaultCustomIdentityKeyStoreType": {
            "value": "[parameters('sslKeyVaultCustomIdentityKeyStoreType')]"
          },
          "sslKeyVaultCustomTrustKeyStoreDataSecretName": {
            "value": "[parameters('sslKeyVaultCustomTrustKeyStoreDataSecretName')]"
          },
          "sslKeyVaultCustomTrustKeyStorePassPhraseSecretName": {
            "value": "[parameters('sslKeyVaultCustomTrustKeyStorePassPhraseSecretName')]"
          },
          "sslKeyVaultCustomTrustKeyStoreType": {
            "value": "[parameters('sslKeyVaultCustomTrustKeyStoreType')]"
          },
          "sslKeyVaultName": {
            "value": "[parameters('sslKeyVaultName')]"
          },
          "sslKeyVaultPrivateKeyAliasSecretName": {
            "value": "[parameters('sslKeyVaultPrivateKeyAliasSecretName')]"
          },
          "sslKeyVaultPrivateKeyPassPhraseSecretName": {
            "value": "[parameters('sslKeyVaultPrivateKeyPassPhraseSecretName')]"
          },
          "sslKeyVaultResourceGroup": {
            "value": "[parameters('sslKeyVaultResourceGroup')]"
          },
          "sslUploadedCustomIdentityKeyStoreData": {
            "value": "[parameters('sslUploadedCustomIdentityKeyStoreData')]"
          },
          "sslUploadedCustomIdentityKeyStorePassphrase": {
            "value": "[parameters('sslUploadedCustomIdentityKeyStorePassphrase')]"
          },
          "sslUploadedCustomIdentityKeyStoreType": {
            "value": "[parameters('sslUploadedCustomIdentityKeyStoreType')]"
          },
          "sslUploadedCustomTrustKeyStoreData": {
            "value": "[parameters('sslUploadedCustomTrustKeyStoreData')]"
          },
          "sslUploadedCustomTrustKeyStorePassPhrase": {
            "value": "[parameters('sslUploadedCustomTrustKeyStorePassPhrase')]"
          },
          "sslUploadedCustomTrustKeyStoreType": {
            "value": "[parameters('sslUploadedCustomTrustKeyStoreType')]"
          },
          "sslUploadedPrivateKeyAlias": {
            "value": "[parameters('sslUploadedPrivateKeyAlias')]"
          },
          "sslUploadedPrivateKeyPassPhrase": {
            "value": "[parameters('sslUploadedPrivateKeyPassPhrase')]"
          },
          "useAksWellTestedVersion": {
            "value": "[parameters('useLatestSupportedAksVersion')]"
          },
          "userProvidedAcr": {
            "value": "[parameters('userProvidedAcr')]"
          },
          "userProvidedImagePath": {
            "value": "[parameters('userProvidedImagePath')]"
          },
          "useOracleImage": {
            "value": "[parameters('useOracleImage')]"
          },
          "vnetForApplicationGateway": {
            "value": "[parameters('vnetForApplicationGateway')]"
          },
          "wlsImageTag": {
            "value": "[parameters('wlsImageTag')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.613.9944",
              "templateHash": "4111003038987587782"
            }
          },
          "parameters": {
            "acrName": {
              "type": "string"
            },
            "aksAgentPoolNodeCount": {
              "type": "int"
            },
            "aksAgentPoolVMSize": {
              "type": "string"
            },
            "aksClusterRGName": {
              "type": "string"
            },
            "aksClusterName": {
              "type": "string"
            },
            "aksVersion": {
              "type": "string",
              "defaultValue": "default"
            },
            "appGatewayCertificateOption": {
              "type": "string"
            },
            "appGatewaySSLCertData": {
              "type": "string"
            },
            "appGatewaySSLCertPassword": {
              "type": "secureString"
            },
            "azCliVersion": {
              "type": "string",
              "defaultValue": ""
            },
            "createAKSCluster": {
              "type": "bool"
            },
            "createDNSZone": {
              "type": "bool"
            },
            "dnszoneName": {
              "type": "string"
            },
            "dnszoneRGName": {
              "type": "string"
            },
            "enableAppGWIngress": {
              "type": "bool"
            },
            "enableCustomSSL": {
              "type": "bool"
            },
            "enableDNSConfiguration": {
              "type": "bool"
            },
            "keyVaultName": {
              "type": "string"
            },
            "keyVaultResourceGroup": {
              "type": "string"
            },
            "keyVaultSSLCertDataSecretName": {
              "type": "string"
            },
            "keyVaultSSLCertPasswordSecretName": {
              "type": "string"
            },
            "identity": {
              "type": "object",
              "defaultValue": {}
            },
            "isSSOSupportEntitled": {
              "type": "bool"
            },
            "location": {
              "type": "string"
            },
            "ocrSSOPSW": {
              "type": "secureString"
            },
            "ocrSSOUser": {
              "type": "string"
            },
            "sslConfigurationAccessOption": {
              "type": "string"
            },
            "sslKeyVaultCustomIdentityKeyStoreDataSecretName": {
              "type": "string"
            },
            "sslKeyVaultCustomIdentityKeyStorePassPhraseSecretName": {
              "type": "string"
            },
            "sslKeyVaultCustomIdentityKeyStoreType": {
              "type": "string"
            },
            "sslKeyVaultCustomTrustKeyStoreDataSecretName": {
              "type": "string"
            },
            "sslKeyVaultCustomTrustKeyStorePassPhraseSecretName": {
              "type": "string"
            },
            "sslKeyVaultCustomTrustKeyStoreType": {
              "type": "string"
            },
            "sslKeyVaultName": {
              "type": "string"
            },
            "sslKeyVaultPrivateKeyAliasSecretName": {
              "type": "string"
            },
            "sslKeyVaultPrivateKeyPassPhraseSecretName": {
              "type": "string"
            },
            "sslKeyVaultResourceGroup": {
              "type": "string"
            },
            "sslUploadedCustomIdentityKeyStoreData": {
              "type": "secureString"
            },
            "sslUploadedCustomIdentityKeyStorePassphrase": {
              "type": "secureString"
            },
            "sslUploadedCustomIdentityKeyStoreType": {
              "type": "string"
            },
            "sslUploadedCustomTrustKeyStoreData": {
              "type": "secureString"
            },
            "sslUploadedCustomTrustKeyStorePassPhrase": {
              "type": "secureString"
            },
            "sslUploadedCustomTrustKeyStoreType": {
              "type": "string"
            },
            "sslUploadedPrivateKeyAlias": {
              "type": "secureString"
            },
            "sslUploadedPrivateKeyPassPhrase": {
              "type": "secureString"
            },
            "useAksWellTestedVersion": {
              "type": "bool",
              "defaultValue": true
            },
            "userProvidedAcr": {
              "type": "string"
            },
            "userProvidedImagePath": {
              "type": "string"
            },
            "useOracleImage": {
              "type": "bool"
            },
            "vnetForApplicationGateway": {
              "type": "object"
            },
            "utcValue": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            },
            "wlsImageTag": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "base64_common": "IyBDb3B5cmlnaHQgKGMpIDIwMjEsIE9yYWNsZSBDb3Jwb3JhdGlvbiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXMuCiMgTGljZW5zZWQgdW5kZXIgdGhlIFVuaXZlcnNhbCBQZXJtaXNzaXZlIExpY2Vuc2UgdiAxLjAgYXMgc2hvd24gYXQgaHR0cHM6Ly9vc3Mub3JhY2xlLmNvbS9saWNlbnNlcy91cGwuCiMgVGhpcyBzY3JpcHQgcnVucyBvbiBBenVyZSBDb250YWluZXIgSW5zdGFuY2Ugd2l0aCBBbHBpbmUgTGludXggdGhhdCBBenVyZSBEZXBsb3ltZW50IHNjcmlwdCBjcmVhdGVzLgoKZXhwb3J0IGNoZWNrUG9kU3RhdHVzSW50ZXJ2YWw9MjAgIyBpbnRlcnZhbCBvZiBjaGVja2luZyBwb2Qgc3RhdHVzLgpleHBvcnQgY2hlY2tQb2RTdGF0dXNNYXhBdHRlbXBzPTEwMCAjIG1heCBhdHRlbXB0IHRvIGNoZWNrIHBvZCBzdGF0dXMuCmV4cG9ydCBjaGVja1BWU3RhdGVJbnRlcnZhbD01ICMgaW50ZXJ2YWwgb2YgY2hlY2tpbmcgcHZjIHN0YXR1cy4KZXhwb3J0IGNoZWNrUFZTdGF0ZU1heEF0dGVtcHQ9MTAgIyBtYXggYXR0ZW1wdCB0byBjaGVjayBwdmMgc3RhdHVzLgpleHBvcnQgY2hlY2tTVkNTdGF0ZU1heEF0dGVtcHQ9NTAKZXhwb3J0IGNoZWNrU1ZDSW50ZXJ2YWw9MzAgI3NlY29uZHMKZXhwb3J0IGNoZWNrQUdJQ1N0YXR1c01heEF0dGVtcHQ9MTAKZXhwb3J0IGNoZWNrQUdJQ1N0YXR1c0ludGVydmFsPTMwCmV4cG9ydCBjaGVja0luZ3Jlc3NTdGF0ZU1heEF0dGVtcHQ9NTAKCmV4cG9ydCBjb25zdEFkbWluVDNBZGRyZXNzRW52TmFtZT0iVDNfVFVOTkVMSU5HX0FETUlOX0FERFJFU1MiCmV4cG9ydCBjb25zdEFkbWluU2VydmVyTmFtZT0nYWRtaW4tc2VydmVyJwpleHBvcnQgY29uc3RDbHVzdGVyTmFtZT0nY2x1c3Rlci0xJwpleHBvcnQgY29uc3RDbHVzdGVyVDNBZGRyZXNzRW52TmFtZT0iVDNfVFVOTkVMSU5HX0NMVVNURVJfQUREUkVTUyIKZXhwb3J0IGNvbnN0RGVmYXVsdEphdmFPcHRpb25zPSItRGxvZzRqMi5mb3JtYXRNc2dOb0xvb2t1cHM9dHJ1ZSAtRHdlYmxvZ2ljLlN0ZG91dERlYnVnRW5hYmxlZD1mYWxzZSIgIyB0aGUgamF2YSBvcHRpb25zIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgY2x1c3RlcgpleHBvcnQgY29uc3REZWZhdWx0SlZNQXJncz0iLURqYXZhLnNlY3VyaXR5LmVnZD1maWxlOi9kZXYvLi91cmFuZG9tIC1YbXMyNTZtIC1YbXg1MTJtIC1YWDpNaW5SQU1QZXJjZW50YWdlPTI1LjAgLVhYOk1heFJBTVBlcmNlbnRhZ2U9NTAuMCAiICMgdGhlIEpWTSBvcHRpb25zIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgY2x1c3RlcgpleHBvcnQgY29uc3REZWZhdWx0QUtTVmVyc2lvbj0iZGVmYXVsdCIKZXhwb3J0IGNvbnN0RmFsc2U9ImZhbHNlIgpleHBvcnQgY29uc3RUcnVlPSJ0cnVlIgpleHBvcnQgY29uc3RJbnRyb3NwZWN0b3JKb2JBY3RpdmVEZWFkbGluZVNlY29uZHM9MzAwICAjIGZvciBHdWFyYW50ZWVkIFFvcwpleHBvcnQgY29uc3RQb3N0Z3JlRHJpdmVyTmFtZT0icG9zdGdyZXNxbC00Mi4zLjYuamFyIgpleHBvcnQgY29uc3RNU1NRTERyaXZlck5hbWU9Im1zc3FsLWpkYmMtMTAuMi4xLmpyZTguamFyIgoKZXhwb3J0IGN1cmxNYXhUaW1lPTEyMCAjIHNlY29uZHMKZXhwb3J0IG9jckxvZ2luU2VydmVyPSJjb250YWluZXItcmVnaXN0cnkub3JhY2xlLmNvbSIKZXhwb3J0IG9jckdhSW1hZ2VQYXRoPSJtaWRkbGV3YXJlL3dlYmxvZ2ljIgpleHBvcnQgb2NyQ3B1SW1hZ2VQYXRoPSJtaWRkbGV3YXJlL3dlYmxvZ2ljX2NwdSIKZXhwb3J0IGdpdFVybDRDcHVJbWFnZXM9Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9vcmFjbGUvd2VibG9naWMtYXp1cmUvbWFpbi93ZWJsb2dpYy1henVyZS1ha3Mvc3JjL21haW4vcmVzb3VyY2VzL3dlYmxvZ2ljX2NwdV9pbWFnZXMuanNvbiIKZXhwb3J0IGdpdFVybDRBa3NXZWxsVGVzdGVkVmVyc2lvbkpzb25GaWxlPSJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vb3JhY2xlL3dlYmxvZ2ljLWF6dXJlL21haW4vd2VibG9naWMtYXp1cmUtYWtzL3NyYy9tYWluL3Jlc291cmNlcy9ha3Nfd2VsbF90ZXN0ZWRfdmVyc2lvbi5qc29uIgpleHBvcnQgZ2l0VXJsNFdMU1Rvb2xpbmdGYW1pbHlKc29uRmlsZT0iaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29yYWNsZS93ZWJsb2dpYy1henVyZS9tYWluL3dlYmxvZ2ljLWF6dXJlLWFrcy9zcmMvbWFpbi9yZXNvdXJjZXMvd2VibG9naWNfdG9vbGluZ19mYW1pbHkuanNvbiIKCmV4cG9ydCBvcHRVbmluc3RhbGxNYXhUcnk9NSAjIE1heCBhdHRlbXB0cyB0byB3YWl0IGZvciB0aGUgb3BlcmF0b3IgdW5pbnN0YWxsZWQKZXhwb3J0IG9wdFVuaW5zdGFsbEludGVydmFsPTEwCgpleHBvcnQgcmV0cnlNYXhBdHRlbXB0PTUgIyByZXRyeSBhdHRlbXB0IGZvciBjdXJsIGNvbW1hbmQKZXhwb3J0IHJldHJ5SW50ZXJ2YWw9MTAKCmV4cG9ydCB3bHNDb250YWluZXJOYW1lPSJ3ZWJsb2dpYy1zZXJ2ZXIiCmV4cG9ydCB3bHNQb3N0Z3Jlc3FsRHJpdmVyVXJsPSJodHRwczovL2pkYmMucG9zdGdyZXNxbC5vcmcvZG93bmxvYWQvcG9zdGdyZXNxbC00Mi4zLjYuamFyIgpleHBvcnQgd2xzTVNTUUxEcml2ZXJVcmw9Imh0dHBzOi8vcmVwby5tYXZlbi5hcGFjaGUub3JnL21hdmVuMi9jb20vbWljcm9zb2Z0L3NxbHNlcnZlci9tc3NxbC1qZGJjLzEwLjIuMS5qcmU4L21zc3FsLWpkYmMtMTAuMi4xLmpyZTguamFyIgo=",
            "base64_utility": "",
            "base64_validateParameters": "",
            "const_arguments": "[format('{0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11}', parameters('location'), parameters('createAKSCluster'), parameters('aksAgentPoolVMSize'), parameters('aksAgentPoolNodeCount'), parameters('useOracleImage'), parameters('wlsImageTag'), parameters('userProvidedImagePath'), parameters('enableCustomSSL'), parameters('sslConfigurationAccessOption'), parameters('appGatewayCertificateOption'), parameters('enableAppGWIngress'), variables('const_checkDNSZone'))]",
            "const_checkDNSZone": "[and(parameters('enableDNSConfiguration'), not(parameters('createDNSZone')))]",
            "const_deploymentName": "ds-validate-parameters-and-fail-fast"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[variables('const_deploymentName')]",
              "location": "[parameters('location')]",
              "kind": "AzureCLI",
              "identity": "[parameters('identity')]",
              "properties": {
                "azCliVersion": "[parameters('azCliVersion')]",
                "arguments": "[variables('const_arguments')]",
                "environmentVariables": [
                  {
                    "name": "ORACLE_ACCOUNT_NAME",
                    "value": "[parameters('ocrSSOUser')]"
                  },
                  {
                    "name": "ORACLE_ACCOUNT_PASSWORD",
                    "secureValue": "[parameters('ocrSSOPSW')]"
                  },
                  {
                    "name": "ORACLE_ACCOUNT_ENTITLED",
                    "value": "[string(parameters('isSSOSupportEntitled'))]"
                  },
                  {
                    "name": "ACR_NAME",
                    "value": "[parameters('acrName')]"
                  },
                  {
                    "name": "ACR_NAME_FOR_USER_PROVIDED_IMAGE",
                    "value": "[parameters('userProvidedAcr')]"
                  },
                  {
                    "name": "AKS_CLUSTER_NAME",
                    "value": "[parameters('aksClusterName')]"
                  },
                  {
                    "name": "AKS_CLUSTER_RESOURCEGROUP_NAME",
                    "value": "[parameters('aksClusterRGName')]"
                  },
                  {
                    "name": "AKS_VERSION",
                    "value": "[parameters('aksVersion')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_NAME",
                    "value": "[parameters('sslKeyVaultName')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_RESOURCEGROUP_NAME",
                    "value": "[parameters('sslKeyVaultResourceGroup')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_IDENTITY_DATA_SECRET_NAME",
                    "value": "[parameters('sslKeyVaultCustomIdentityKeyStoreDataSecretName')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_IDENTITY_PASSWORD_SECRET_NAME",
                    "value": "[parameters('sslKeyVaultCustomIdentityKeyStorePassPhraseSecretName')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_IDENTITY_TYPE",
                    "value": "[parameters('sslKeyVaultCustomIdentityKeyStoreType')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_TRUST_DATA_SECRET_NAME",
                    "value": "[parameters('sslKeyVaultCustomTrustKeyStoreDataSecretName')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_TRUST_PASSWORD_SECRET_NAME",
                    "value": "[parameters('sslKeyVaultCustomTrustKeyStorePassPhraseSecretName')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_TRUST_TYPE",
                    "value": "[parameters('sslKeyVaultCustomTrustKeyStoreType')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_PRIVATE_KEY_ALIAS",
                    "value": "[parameters('sslKeyVaultPrivateKeyAliasSecretName')]"
                  },
                  {
                    "name": "WLS_SSL_KEYVAULT_PRIVATE_KEY_PASSWORD",
                    "value": "[parameters('sslKeyVaultPrivateKeyPassPhraseSecretName')]"
                  },
                  {
                    "name": "WLS_SSL_IDENTITY_DATA",
                    "secureValue": "[parameters('sslUploadedCustomIdentityKeyStoreData')]"
                  },
                  {
                    "name": "WLS_SSL_IDENTITY_PASSWORD",
                    "secureValue": "[parameters('sslUploadedCustomIdentityKeyStorePassphrase')]"
                  },
                  {
                    "name": "WLS_SSL_IDENTITY_TYPE",
                    "value": "[parameters('sslUploadedCustomIdentityKeyStoreType')]"
                  },
                  {
                    "name": "WLS_SSL_TRUST_DATA",
                    "secureValue": "[parameters('sslUploadedCustomTrustKeyStoreData')]"
                  },
                  {
                    "name": "WLS_SSL_TRUST_PASSWORD",
                    "secureValue": "[parameters('sslUploadedCustomTrustKeyStorePassPhrase')]"
                  },
                  {
                    "name": "WLS_SSL_TRUST_TYPE",
                    "value": "[parameters('sslUploadedCustomTrustKeyStoreType')]"
                  },
                  {
                    "name": "WLS_SSL_PRIVATE_KEY_ALIAS",
                    "secureValue": "[parameters('sslUploadedPrivateKeyAlias')]"
                  },
                  {
                    "name": "WLS_SSL_PRIVATE_KEY_PASSWORD",
                    "secureValue": "[parameters('sslUploadedPrivateKeyPassPhrase')]"
                  },
                  {
                    "name": "APPLICATION_GATEWAY_SSL_KEYVAULT_NAME",
                    "value": "[parameters('keyVaultName')]"
                  },
                  {
                    "name": "APPLICATION_GATEWAY_SSL_KEYVAULT_RESOURCEGROUP",
                    "value": "[parameters('keyVaultResourceGroup')]"
                  },
                  {
                    "name": "APPLICATION_GATEWAY_SSL_KEYVAULT_FRONTEND_CERT_DATA_SECRET_NAME",
                    "value": "[parameters('keyVaultSSLCertDataSecretName')]"
                  },
                  {
                    "name": "APPLICATION_GATEWAY_SSL_KEYVAULT_FRONTEND_CERT_PASSWORD_SECRET_NAME",
                    "value": "[parameters('keyVaultSSLCertPasswordSecretName')]"
                  },
                  {
                    "name": "APPLICATION_GATEWAY_SSL_FRONTEND_CERT_DATA",
                    "value": "[parameters('appGatewaySSLCertData')]"
                  },
                  {
                    "name": "APPLICATION_GATEWAY_SSL_FRONTEND_CERT_PASSWORD",
                    "value": "[parameters('appGatewaySSLCertPassword')]"
                  },
                  {
                    "name": "DNS_ZONE_NAME",
                    "value": "[parameters('dnszoneName')]"
                  },
                  {
                    "name": "DNS_ZONE_RESOURCEGROUP_NAME",
                    "value": "[parameters('dnszoneRGName')]"
                  },
                  {
                    "name": "USE_AKS_WELL_TESTED_VERSION",
                    "value": "[string(parameters('useAksWellTestedVersion'))]"
                  },
                  {
                    "name": "VNET_FOR_APPLICATIONGATEWAY",
                    "value": "[string(parameters('vnetForApplicationGateway'))]"
                  }
                ],
                "scriptContent": "[format('{0}\r\n\r\n{1}\r\n\r\n{2}', base64ToString(variables('base64_common')), base64ToString(variables('base64_utility')), base64ToString(variables('base64_validateParameters')))]",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D",
                "forceUpdateTag": "[parameters('utcValue')]"
              }
            }
          ],
          "outputs": {
            "aksVersion": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', variables('const_deploymentName'))).outputs.aksVersion]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'initialization')]",
        "[resourceId('Microsoft.Resources/deployments', 'pre-azure-resources-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'uami-deployment')]"
      ]
    },
    {
      "condition": "[and(parameters('enableCustomSSL'), not(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "upload-wls-ssl-cert-to-keyvault",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[variables('name_keyVaultName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "sku": {
            "value": "[parameters('keyVaultSku')]"
          },
          "wlsIdentityKeyStoreData": {
            "value": "[parameters('sslUploadedCustomIdentityKeyStoreData')]"
          },
          "wlsIdentityKeyStoreDataSecretName": {
            "value": "[variables('name_identityKeyStoreDataSecret')]"
          },
          "wlsIdentityKeyStorePassphrase": {
            "value": "[parameters('sslUploadedCustomIdentityKeyStorePassphrase')]"
          },
          "wlsIdentityKeyStorePassphraseSecretName": {
            "value": "[variables('name_identityKeyStorePswSecret')]"
          },
          "wlsPrivateKeyAlias": {
            "value": "[parameters('sslUploadedPrivateKeyAlias')]"
          },
          "wlsPrivateKeyAliasSecretName": {
            "value": "[variables('name_privateKeyAliasSecret')]"
          },
          "wlsPrivateKeyPassPhrase": {
            "value": "[parameters('sslUploadedPrivateKeyPassPhrase')]"
          },
          "wlsPrivateKeyPassPhraseSecretName": {
            "value": "[variables('name_privateKeyPswSecret')]"
          },
          "wlsTrustKeyStoreData": {
            "value": "[parameters('sslUploadedCustomTrustKeyStoreData')]"
          },
          "wlsTrustKeyStoreDataSecretName": {
            "value": "[variables('name_trustKeyStoreDataSecret')]"
          },
          "wlsTrustKeyStorePassPhrase": {
            "value": "[parameters('sslUploadedCustomTrustKeyStorePassPhrase')]"
          },
          "wlsTrustKeyStorePassPhraseSecretName": {
            "value": "[variables('name_trustKeyStorePswSecret')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.613.9944",
              "templateHash": "3588284649734005005"
            }
          },
          "parameters": {
            "enabledForTemplateDeployment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Name of the vault"
              }
            },
            "location": {
              "type": "string"
            },
            "sku": {
              "type": "string",
              "defaultValue": "Standard",
              "metadata": {
                "description": "Price tier for Key Vault."
              }
            },
            "utcValue": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            },
            "wlsIdentityKeyStoreData": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsIdentityKeyStoreDataSecretName": {
              "type": "string",
              "defaultValue": "myIdentityKeyStoreData"
            },
            "wlsIdentityKeyStorePassphrase": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsIdentityKeyStorePassphraseSecretName": {
              "type": "string",
              "defaultValue": "myIdentityKeyStorePsw"
            },
            "wlsPrivateKeyAlias": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsPrivateKeyAliasSecretName": {
              "type": "string",
              "defaultValue": "privateKeyAlias"
            },
            "wlsPrivateKeyPassPhrase": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsPrivateKeyPassPhraseSecretName": {
              "type": "string",
              "defaultValue": "privateKeyPsw"
            },
            "wlsTrustKeyStoreData": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsTrustKeyStoreDataSecretName": {
              "type": "string",
              "defaultValue": "myTrustKeyStoreData"
            },
            "wlsTrustKeyStorePassPhrase": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsTrustKeyStorePassPhraseSecretName": {
              "type": "string",
              "defaultValue": "myTrustKeyStorePsw"
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-10-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "properties": {
                "accessPolicies": [],
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "sku": {
                  "name": "[parameters('sku')]",
                  "family": "A"
                },
                "tenantId": "[subscription().tenantId]"
              },
              "tags": {
                "managed-by-azure-weblogic": "[parameters('utcValue')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-10-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('wlsIdentityKeyStoreDataSecretName'))]",
              "properties": {
                "value": "[parameters('wlsIdentityKeyStoreData')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-10-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('wlsIdentityKeyStorePassphraseSecretName'))]",
              "properties": {
                "value": "[parameters('wlsIdentityKeyStorePassphrase')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-10-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('wlsPrivateKeyAliasSecretName'))]",
              "properties": {
                "value": "[parameters('wlsPrivateKeyAlias')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-10-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('wlsPrivateKeyPassPhraseSecretName'))]",
              "properties": {
                "value": "[parameters('wlsPrivateKeyPassPhrase')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-10-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('wlsTrustKeyStoreDataSecretName'))]",
              "properties": {
                "value": "[parameters('wlsTrustKeyStoreData')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-10-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('wlsTrustKeyStorePassPhraseSecretName'))]",
              "properties": {
                "value": "[parameters('wlsTrustKeyStorePassPhrase')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'validate-parameters-and-fail-fast')]"
      ]
    },
    {
      "condition": "[not(parameters('createAKSCluster'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "query-existing-storage-account",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aksClusterName": {
            "value": "[parameters('aksClusterName')]"
          },
          "aksClusterRGName": {
            "value": "[parameters('aksClusterRGName')]"
          },
          "azCliVersion": {
            "value": "[variables('const_azcliVersion')]"
          },
          "identity": {
            "value": {
              "type": "UserAssigned",
              "userAssignedIdentities": {
                "[reference(resourceId('Microsoft.Resources/deployments', 'uami-deployment'), '2019-10-01').outputs.uamiIdForDeploymentScript.value]": {}
              }
            }
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.613.9944",
              "templateHash": "15211430966055088813"
            }
          },
          "parameters": {
            "aksClusterName": {
              "type": "string",
              "defaultValue": ""
            },
            "aksClusterRGName": {
              "type": "string",
              "defaultValue": ""
            },
            "azCliVersion": {
              "type": "string",
              "defaultValue": ""
            },
            "identity": {
              "type": "object",
              "defaultValue": {}
            },
            "location": {
              "type": "string"
            },
            "utcValue": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            }
          },
          "functions": [],
          "variables": {
            "base64_queryStorageAccount": "ZXhwb3J0IGFrc0NsdXN0ZXJSR05hbWU9JDEKZXhwb3J0IGFrc0NsdXN0ZXJOYW1lPSQyCgpleHBvcnQgY3VycmVudFN0b3JhZ2VBY2NvdW50PSJudWxsIgoKIyBDb25uZWN0IHRvIEFLUyBjbHVzdGVyCmZ1bmN0aW9uIGNvbm5lY3RfYWtzX2NsdXN0ZXIoKSB7CiAgYXogYWtzIGdldC1jcmVkZW50aWFscyBcCiAgICAtLXJlc291cmNlLWdyb3VwICR7YWtzQ2x1c3RlclJHTmFtZX0gXAogICAgLS1uYW1lICR7YWtzQ2x1c3Rlck5hbWV9IFwKICAgIC0tb3ZlcndyaXRlLWV4aXN0aW5nCn0KCmZ1bmN0aW9uIHF1ZXJ5X3N0b3JhZ2VfYWNjb3VudCgpIHsKICBlY2hvICJpbnN0YWxsIGt1YmVjdGwiCiAgYXogYWtzIGluc3RhbGwtY2xpCgogIGVjaG8gImdldCBwdiBuYW1lIgogIHB2TmFtZT0kKGt1YmVjdGwgZ2V0IHB2IC1vIGpzb24gfAogICAganEgJy5pdGVtc1tdIHwgc2VsZWN0KC5zdGF0dXMucGhhc2U9PSJCb3VuZCIpIHwgWy5tZXRhZGF0YS5uYW1lXSB8IC5bMF0nIHwKICAgIHRyIC1kICJcIiIpCgogIGlmIFtbICIke3B2TmFtZX0iICE9ICJudWxsIiBdXSAmJiBbWyAiJHtwdk5hbWV9IiAhPSAiIiBdXTsgdGhlbgogICAgIyB0aGlzIGlzIGEgd29ya2Fyb3VuZCBmb3IgdXBkYXRlIGRvbWFpbiB1c2luZyBtYXJrZXRwbGFjZSBvZmZlci4KICAgICMgdGhlIG9mZmVyIHdpbGwgY3JlYXRlIGEgbmV3IHN0b3JhZ2UgYWNjb3VudCBpbiBhIG5ldyByZXNvdXJjZSBncm91cCBpZiB0aGVyZSBpcyBubyBzdG9yYWdlIGF0dGFjaGVkLgogICAgY3VycmVudFN0b3JhZ2VBY2NvdW50PSQoa3ViZWN0bCBnZXQgcHYgJHtwdk5hbWV9IC1vIGpzb24gfCBqcSAnLiB8IC5tZXRhZGF0YS5sYWJlbHMuc3RvcmFnZUFjY291bnQnIHwgdHIgLWQgIlwiIikKICBmaQp9CgpmdW5jdGlvbiBvdXRwdXRfcmVzdWx0KCkgewogIGVjaG8gJHtjdXJyZW50U3RvcmFnZUFjY291bnR9CgogIHJlc3VsdD0kKGpxIC1uIC1jIFwKICAgIC0tYXJnIHN0b3JhZ2VBY2NvdW50ICRjdXJyZW50U3RvcmFnZUFjY291bnQgXAogICAgJ3tzdG9yYWdlQWNjb3VudDogJHN0b3JhZ2VBY2NvdW50fScpCiAgZWNobyAicmVzdWx0IGlzOiAkcmVzdWx0IgogIGVjaG8gJHJlc3VsdCA+JEFaX1NDUklQVFNfT1VUUFVUX1BBVEgKfQoKY29ubmVjdF9ha3NfY2x1c3RlcgoKcXVlcnlfc3RvcmFnZV9hY2NvdW50CgpvdXRwdXRfcmVzdWx0Cg==",
            "const_arguments": "[format('{0} {1}', parameters('aksClusterRGName'), parameters('aksClusterName'))]",
            "const_deploymentName": "ds-query-storage-account"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[variables('const_deploymentName')]",
              "location": "[parameters('location')]",
              "kind": "AzureCLI",
              "identity": "[parameters('identity')]",
              "properties": {
                "azCliVersion": "[parameters('azCliVersion')]",
                "arguments": "[variables('const_arguments')]",
                "scriptContent": "[base64ToString(variables('base64_queryStorageAccount'))]",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D",
                "forceUpdateTag": "[parameters('utcValue')]"
              }
            }
          ],
          "outputs": {
            "storageAccount": {
              "type": "string",
              "value": "[string(reference(resourceId('Microsoft.Resources/deploymentScripts', variables('const_deploymentName'))).outputs.storageAccount)]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'uami-deployment')]"
      ]
    },
    {
      "condition": "[and(parameters('enableAppGWIngress'), not(equals(parameters('appGatewayCertificateOption'), variables('const_appGatewaySSLCertOptionHaveKeyVault'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "appgateway-certificates-secrets-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "backendCertificateDataValue": {
            "value": "[parameters('appGatewaySSLBackendRootCertData')]"
          },
          "certificateDataValue": {
            "value": "[parameters('appGatewaySSLCertData')]"
          },
          "certificatePasswordValue": {
            "value": "[parameters('appGatewaySSLCertPassword')]"
          },
          "enableCustomSSL": {
            "value": "[parameters('enableCustomSSL')]"
          },
          "identity": {
            "value": {
              "type": "UserAssigned",
              "userAssignedIdentities": {
                "[reference(resourceId('Microsoft.Resources/deployments', 'uami-deployment'), '2019-10-01').outputs.uamiIdForDeploymentScript.value]": {}
              }
            }
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "sku": {
            "value": "[parameters('keyVaultSku')]"
          },
          "subjectName": {
            "value": "[format('CN={0}', if(parameters('enableDNSConfiguration'), format('{0}.{1}', parameters('dnsNameforApplicationGateway'), parameters('dnszoneName')), variables('const_azureSubjectName')))]"
          },
          "useExistingAppGatewaySSLCertificate": {
            "value": "[variables('_useExistingAppGatewaySSLCertificate')]"
          },
          "keyVaultName": {
            "value": "[variables('name_keyVaultName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.613.9944",
              "templateHash": "5179958511696247274"
            }
          },
          "parameters": {
            "backendCertificateDataValue": {
              "type": "string",
              "defaultValue": "[newGuid()]",
              "metadata": {
                "description": "Backend certificate data to store in the secret"
              }
            },
            "certificateDataValue": {
              "type": "string",
              "defaultValue": "[newGuid()]",
              "metadata": {
                "description": "Certificate data to store in the secret"
              }
            },
            "certificatePasswordValue": {
              "type": "secureString",
              "defaultValue": "[newGuid()]",
              "metadata": {
                "description": "Certificate password to store in the secret"
              }
            },
            "enableCustomSSL": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "true to upload trusted root certificate"
              }
            },
            "enabledForTemplateDeployment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
              }
            },
            "identity": {
              "type": "object",
              "defaultValue": {}
            },
            "location": {
              "type": "string"
            },
            "permission": {
              "type": "object",
              "defaultValue": {
                "certificates": [
                  "get",
                  "list",
                  "update",
                  "create"
                ]
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "Standard",
              "metadata": {
                "description": "Price tier for Key Vault."
              }
            },
            "subjectName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Subject name to create a certificate."
              }
            },
            "useExistingAppGatewaySSLCertificate": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "If false, will create a certificate."
              }
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": "GEN_UNIQUE",
              "metadata": {
                "description": "Current deployment time. Used as a tag in deployment script."
              }
            }
          },
          "functions": [],
          "variables": {
            "name_sslBackendCertSercretName": "myAppGatewaySSLBackendRootCert",
            "name_sslCertSecretName": "myAppGatewaySSLCert",
            "name_sslCertPasswordSecretName": "myAppGatewaySSLCertPassword"
          },
          "resources": [
            {
              "condition": "[not(parameters('useExistingAppGatewaySSLCertificate'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "kv-appgw-selfsigned-certificate-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "identity": {
                    "value": "[parameters('identity')]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('keyVaultName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "permission": {
                    "value": "[parameters('permission')]"
                  },
                  "subjectName": {
                    "value": "[parameters('subjectName')]"
                  },
                  "sku": {
                    "value": "[parameters('sku')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "6439337092706794203"
                    }
                  },
                  "parameters": {
                    "identity": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Managed identity to be used for the deployment script. Currently, only user-assigned MSI is supported."
                      }
                    },
                    "keyVaultName": {
                      "type": "string",
                      "defaultValue": "[format('wls-kv-{0}', uniqueString(parameters('utcValue')))]",
                      "metadata": {
                        "description": "Used to name the new Azure Key Vault resoure."
                      }
                    },
                    "location": {
                      "type": "string"
                    },
                    "permission": {
                      "type": "object",
                      "defaultValue": {
                        "certificates": [
                          "get",
                          "list",
                          "update",
                          "create"
                        ]
                      },
                      "metadata": {
                        "description": "Access permission of the key vault, will applied to all access policies."
                      }
                    },
                    "secretName": {
                      "type": "string",
                      "defaultValue": "mySelfSignedCertificate",
                      "metadata": {
                        "description": "Used to name the new certificate resource."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "metadata": {
                        "description": "Price tier for Key Vault."
                      }
                    },
                    "subjectName": {
                      "type": "string",
                      "defaultValue": "contoso.xyz",
                      "metadata": {
                        "description": "Subject name to create a new certificate, example: 'CN=contoso.com'."
                      }
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_identityId": "[substring(string(parameters('identity').userAssignedIdentities), add(indexOf(string(parameters('identity').userAssignedIdentities), '\"'), 1), sub(lastIndexOf(string(parameters('identity').userAssignedIdentities), '\"'), add(indexOf(string(parameters('identity').userAssignedIdentities), '\"'), 1)))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2021-10-01",
                      "name": "[parameters('keyVaultName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "sku": {
                          "family": "A",
                          "name": "[parameters('sku')]"
                        },
                        "tenantId": "[subscription().tenantId]",
                        "accessPolicies": [
                          {
                            "objectId": "[reference(variables('const_identityId'), '2018-11-30').principalId]",
                            "tenantId": "[subscription().tenantId]",
                            "permissions": "[parameters('permission')]"
                          }
                        ],
                        "enabledForDeployment": false,
                        "enabledForDiskEncryption": false,
                        "enabledForTemplateDeployment": true,
                        "enableSoftDelete": true
                      },
                      "tags": {
                        "managed-by-azure-weblogic": "[parameters('utcValue')]"
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "ds-create-add-appgw-certificate",
                      "location": "[parameters('location')]",
                      "identity": "[parameters('identity')]",
                      "kind": "AzurePowerShell",
                      "properties": {
                        "forceUpdateTag": "[parameters('utcValue')]",
                        "azPowerShellVersion": "5.0",
                        "timeout": "PT30M",
                        "arguments": "[format(' -vaultName {0} -certificateName {1} -subjectName {2}', parameters('keyVaultName'), parameters('secretName'), parameters('subjectName'))]",
                        "scriptContent": "\n                    param(\n                        [string] [Parameter(Mandatory=$true)] $vaultName,\n                        [string] [Parameter(Mandatory=$true)] $certificateName,\n                        [string] [Parameter(Mandatory=$true)] $subjectName\n                    )\n\n                    $ErrorActionPreference = 'Stop'\n                    $DeploymentScriptOutputs = @{}\n\n                    $existingCert = Get-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName\n\n                    if ($existingCert -and $existingCert.Certificate.Subject -eq $subjectName) {\n\n                        Write-Host 'Certificate $certificateName in vault $vaultName is already present.'\n\n                        $DeploymentScriptOutputs['certThumbprint'] = $existingCert.Thumbprint\n                        $existingCert | Out-String\n                    }\n                    else {\n                        $policy = New-AzKeyVaultCertificatePolicy -SubjectName $subjectName -IssuerName Self -ValidityInMonths 12 -Verbose\n\n                        # private key is added as a secret that can be retrieved in the ARM template\n                        Add-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName -CertificatePolicy $policy -Verbose\n\n                        $newCert = Get-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName\n\n                        # it takes a few seconds for KeyVault to finish\n                        $tries = 0\n                        do {\n                        Write-Host 'Waiting for certificate creation completion...'\n                        Start-Sleep -Seconds 10\n                        $operation = Get-AzKeyVaultCertificateOperation -VaultName $vaultName -Name $certificateName\n                        $tries++\n\n                        if ($operation.Status -eq 'failed')\n                        {\n                            throw 'Creating certificate $certificateName in vault $vaultName failed with error $($operation.ErrorMessage)'\n                        }\n\n                        if ($tries -gt 120)\n                        {\n                            throw 'Timed out waiting for creation of certificate $certificateName in vault $vaultName'\n                        }\n                        } while ($operation.Status -ne 'completed')\n\n                        $DeploymentScriptOutputs['certThumbprint'] = $newCert.Thumbprint\n                        $newCert | Out-String\n                    }\n                ",
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "keyVaultName": {
                      "type": "string",
                      "value": "[parameters('keyVaultName')]"
                    },
                    "secretName": {
                      "type": "string",
                      "value": "[parameters('secretName')]"
                    },
                    "identityId": {
                      "type": "string",
                      "value": "[variables('const_identityId')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('useExistingAppGatewaySSLCertificate')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "kv-appgw-existing-certificate-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "certificateDataName": {
                    "value": "[variables('name_sslCertSecretName')]"
                  },
                  "certificateDataValue": {
                    "value": "[parameters('certificateDataValue')]"
                  },
                  "certificatePswSecretName": {
                    "value": "[variables('name_sslCertPasswordSecretName')]"
                  },
                  "certificatePasswordValue": {
                    "value": "[parameters('certificatePasswordValue')]"
                  },
                  "enabledForTemplateDeployment": {
                    "value": "[parameters('enabledForTemplateDeployment')]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('keyVaultName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "sku": {
                    "value": "[parameters('sku')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "15580247868160436600"
                    }
                  },
                  "parameters": {
                    "certificateDataName": {
                      "type": "string",
                      "defaultValue": "myIdentityKeyStoreData",
                      "metadata": {
                        "description": "Secret name of certificate data."
                      }
                    },
                    "certificateDataValue": {
                      "type": "string",
                      "defaultValue": "[newGuid()]",
                      "metadata": {
                        "description": "Certificate data to store in the secret"
                      }
                    },
                    "certificatePswSecretName": {
                      "type": "string",
                      "defaultValue": "myIdentityKeyStorePsw",
                      "metadata": {
                        "description": "Secret name of certificate password."
                      }
                    },
                    "certificatePasswordValue": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]",
                      "metadata": {
                        "description": "Certificate password to store in the secret"
                      }
                    },
                    "enabledForTemplateDeployment": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
                      }
                    },
                    "keyVaultName": {
                      "type": "string",
                      "defaultValue": "kv-contoso",
                      "metadata": {
                        "description": "Name of the vault"
                      }
                    },
                    "location": {
                      "type": "string"
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "metadata": {
                        "description": "Price tier for Key Vault."
                      }
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2021-10-01",
                      "name": "[parameters('keyVaultName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "accessPolicies": [],
                        "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                        "sku": {
                          "name": "[parameters('sku')]",
                          "family": "A"
                        },
                        "tenantId": "[subscription().tenantId]"
                      },
                      "tags": {
                        "managed-by-azure-weblogic": "[parameters('utcValue')]"
                      }
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2021-10-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('certificateDataName'))]",
                      "properties": {
                        "value": "[parameters('certificateDataValue')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2021-10-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('certificatePswSecretName'))]",
                      "properties": {
                        "value": "[parameters('certificatePasswordValue')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "keyVaultName": {
                      "type": "string",
                      "value": "[parameters('keyVaultName')]"
                    },
                    "sslCertDataSecretName": {
                      "type": "string",
                      "value": "[parameters('certificateDataName')]"
                    },
                    "sslCertPwdSecretName": {
                      "type": "string",
                      "value": "[parameters('certificatePswSecretName')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('enableCustomSSL')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "kv-appgw-e2e-ssl-backend-certificate",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "certificateDataName": {
                    "value": "[variables('name_sslBackendCertSercretName')]"
                  },
                  "certificateDataValue": {
                    "value": "[parameters('backendCertificateDataValue')]"
                  },
                  "enabledForTemplateDeployment": {
                    "value": "[parameters('enabledForTemplateDeployment')]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('keyVaultName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "sku": {
                    "value": "[parameters('sku')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "629816166833826732"
                    }
                  },
                  "parameters": {
                    "certificateDataName": {
                      "type": "string",
                      "defaultValue": "[newGuid()]",
                      "metadata": {
                        "description": "Secret name of certificate data."
                      }
                    },
                    "certificateDataValue": {
                      "type": "string",
                      "defaultValue": "[newGuid()]",
                      "metadata": {
                        "description": "Certificate data to store in the secret"
                      }
                    },
                    "enabledForTemplateDeployment": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
                      }
                    },
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the vault"
                      }
                    },
                    "location": {
                      "type": "string"
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "metadata": {
                        "description": "Price tier for Key Vault."
                      }
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2021-10-01",
                      "name": "[parameters('keyVaultName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "accessPolicies": [],
                        "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                        "sku": {
                          "name": "[parameters('sku')]",
                          "family": "A"
                        },
                        "tenantId": "[subscription().tenantId]"
                      },
                      "tags": {
                        "managed-by-azure-weblogic": "[parameters('utcValue')]"
                      }
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2021-10-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('certificateDataName'))]",
                      "properties": {
                        "value": "[parameters('certificateDataValue')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "keyVaultName": {
                      "type": "string",
                      "value": "[parameters('keyVaultName')]"
                    },
                    "sslBackendCertDataSecretName": {
                      "type": "string",
                      "value": "[parameters('certificateDataName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'kv-appgw-existing-certificate-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'kv-appgw-selfsigned-certificate-deployment')]"
              ]
            }
          ],
          "outputs": {
            "keyVaultName": {
              "type": "string",
              "value": "[if(parameters('useExistingAppGatewaySSLCertificate'), reference(resourceId('Microsoft.Resources/deployments', 'kv-appgw-existing-certificate-deployment'), '2019-10-01').outputs.keyVaultName.value, reference(resourceId('Microsoft.Resources/deployments', 'kv-appgw-selfsigned-certificate-deployment'), '2019-10-01').outputs.keyVaultName.value)]"
            },
            "sslCertDataSecretName": {
              "type": "string",
              "value": "[if(parameters('useExistingAppGatewaySSLCertificate'), reference(resourceId('Microsoft.Resources/deployments', 'kv-appgw-existing-certificate-deployment'), '2019-10-01').outputs.sslCertDataSecretName.value, reference(resourceId('Microsoft.Resources/deployments', 'kv-appgw-selfsigned-certificate-deployment'), '2019-10-01').outputs.secretName.value)]"
            },
            "sslCertPwdSecretName": {
              "type": "string",
              "value": "[if(parameters('useExistingAppGatewaySSLCertificate'), reference(resourceId('Microsoft.Resources/deployments', 'kv-appgw-existing-certificate-deployment'), '2019-10-01').outputs.sslCertPwdSecretName.value, '')]"
            },
            "sslBackendCertDataSecretName": {
              "type": "string",
              "value": "[if(parameters('enableCustomSSL'), reference(resourceId('Microsoft.Resources/deployments', 'kv-appgw-e2e-ssl-backend-certificate'), '2019-10-01').outputs.sslBackendCertDataSecretName.value, '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'uami-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'upload-wls-ssl-cert-to-keyvault')]"
      ]
    },
    {
      "condition": "[parameters('enableAppGWIngress')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "application-gateway-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "_pidAppgwEnd": {
            "value": "[if(equals(reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2019-10-01').outputs.appgwEnd.value, ''), variables('name_defaultPidDeployment'), reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2019-10-01').outputs.appgwEnd.value)]"
          },
          "_pidAppgwStart": {
            "value": "[if(equals(reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2019-10-01').outputs.appgwStart.value, ''), variables('name_defaultPidDeployment'), reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2019-10-01').outputs.appgwStart.value)]"
          },
          "appgwPublicIPAddressName": {
            "value": "[parameters('appGatewayPublicIPAddressName')]"
          },
          "appgwUsePrivateIP": {
            "value": "[parameters('appgwUsePrivateIP')]"
          },
          "appgwSslCertName": {
            "value": "[variables('name_appgwFrontendSSLCertName')]"
          },
          "appgwTrustedRootCertName": {
            "value": "[variables('name_appgwBackendRootCertName')]"
          },
          "azCliVersion": {
            "value": "[variables('const_azcliVersion')]"
          },
          "dnsNameforApplicationGateway": {
            "value": "[variables('name_domainLabelforApplicationGateway')]"
          },
          "enableCustomSSL": {
            "value": "[parameters('enableCustomSSL')]"
          },
          "identity": {
            "value": {
              "type": "UserAssigned",
              "userAssignedIdentities": {
                "[reference(resourceId('Microsoft.Resources/deployments', 'uami-deployment'), '2019-10-01').outputs.uamiIdForDeploymentScript.value]": {}
              }
            }
          },
          "keyVaultName": {
            "value": "[if(or(not(parameters('enableAppGWIngress')), equals(parameters('appGatewayCertificateOption'), variables('const_appGatewaySSLCertOptionHaveKeyVault'))), parameters('keyVaultName'), reference(resourceId('Microsoft.Resources/deployments', 'appgateway-certificates-secrets-deployment'), '2019-10-01').outputs.keyVaultName.value)]"
          },
          "keyVaultResourceGroup": {
            "value": "[if(or(not(parameters('enableAppGWIngress')), equals(parameters('appGatewayCertificateOption'), variables('const_appGatewaySSLCertOptionHaveKeyVault'))), parameters('keyVaultResourceGroup'), resourceGroup().name)]"
          },
          "keyvaultBackendCertDataSecretName": {
            "value": "[if(or(not(parameters('enableAppGWIngress')), equals(parameters('appGatewayCertificateOption'), variables('const_appGatewaySSLCertOptionHaveKeyVault'))), parameters('keyVaultSSLBackendRootCertDataSecretName'), reference(resourceId('Microsoft.Resources/deployments', 'appgateway-certificates-secrets-deployment'), '2019-10-01').outputs.sslBackendCertDataSecretName.value)]"
          },
          "keyvaultFrontendCertDataSecretName": {
            "value": "[if(or(not(parameters('enableAppGWIngress')), equals(parameters('appGatewayCertificateOption'), variables('const_appGatewaySSLCertOptionHaveKeyVault'))), parameters('keyVaultSSLCertDataSecretName'), reference(resourceId('Microsoft.Resources/deployments', 'appgateway-certificates-secrets-deployment'), '2019-10-01').outputs.sslCertDataSecretName.value)]"
          },
          "keyvaultFrontendCertPswSecretName": {
            "value": "[if(or(not(parameters('enableAppGWIngress')), equals(parameters('appGatewayCertificateOption'), variables('const_appGatewaySSLCertOptionHaveKeyVault'))), parameters('keyVaultSSLCertPasswordSecretName'), reference(resourceId('Microsoft.Resources/deployments', 'appgateway-certificates-secrets-deployment'), '2019-10-01').outputs.sslCertPwdSecretName.value)]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "newOrExistingVnetForApplicationGateway": {
            "value": "[parameters('newOrExistingVnetForApplicationGateway')]"
          },
          "vnetForApplicationGateway": {
            "value": "[parameters('vnetForApplicationGateway')]"
          },
          "vnetRGNameForApplicationGateway": {
            "value": "[parameters('vnetRGNameForApplicationGateway')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.613.9944",
              "templateHash": "9049549390396650584"
            }
          },
          "parameters": {
            "_pidAppgwEnd": {
              "type": "string",
              "defaultValue": "pid-networking-appgateway-end"
            },
            "_pidAppgwStart": {
              "type": "string",
              "defaultValue": "pid-networking-appgateway-start"
            },
            "appgwPublicIPAddressName": {
              "type": "string",
              "defaultValue": "gwip"
            },
            "appgwUsePrivateIP": {
              "type": "bool"
            },
            "appgwSslCertName": {
              "type": "string",
              "defaultValue": "appGatewaySslCert"
            },
            "appgwTrustedRootCertName": {
              "type": "string",
              "defaultValue": "appGatewayTrustedRootCert"
            },
            "azCliVersion": {
              "type": "string",
              "defaultValue": ""
            },
            "dnsNameforApplicationGateway": {
              "type": "string",
              "defaultValue": "wlsgw"
            },
            "enableCustomSSL": {
              "type": "bool"
            },
            "identity": {
              "type": "object",
              "defaultValue": {}
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": "kv-contoso"
            },
            "keyVaultResourceGroup": {
              "type": "string",
              "defaultValue": "kv-contoso-rg"
            },
            "keyvaultBackendCertDataSecretName": {
              "type": "string",
              "defaultValue": "kv-ssl-backend-data"
            },
            "keyvaultFrontendCertDataSecretName": {
              "type": "string",
              "defaultValue": "kv-ssl-frontend-data"
            },
            "keyvaultFrontendCertPswSecretName": {
              "type": "string",
              "defaultValue": "kv-ssl-frontend-psw"
            },
            "location": {
              "type": "string"
            },
            "newOrExistingVnetForApplicationGateway": {
              "type": "string"
            },
            "vnetForApplicationGateway": {
              "type": "object"
            },
            "vnetRGNameForApplicationGateway": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "_appgwUsePrivateIP": "[parameters('appgwUsePrivateIP')]",
            "_selfSignedFrontendCertAndNoBackendCert": "[and(empty(parameters('keyvaultFrontendCertPswSecretName')), not(parameters('enableCustomSSL')))]",
            "_selfSignedFrontendCertAndBackendCert": "[and(empty(parameters('keyvaultFrontendCertPswSecretName')), parameters('enableCustomSSL'))]",
            "_signedFrontendCertAndNoBackendCert": "[and(not(empty(parameters('keyvaultFrontendCertPswSecretName'))), not(parameters('enableCustomSSL')))]",
            "_signedFrontendCertAndBackendCert": "[and(not(empty(parameters('keyvaultFrontendCertPswSecretName'))), parameters('enableCustomSSL'))]",
            "const_null": "null",
            "name_gatewayDeploymentPrefix": "app-gateway-deployment-",
            "ref_gatewayDeployment": "[if(variables('_selfSignedFrontendCertAndNoBackendCert'), reference(resourceId('Microsoft.Resources/deployments', format('{0}1', variables('name_gatewayDeploymentPrefix'))), '2019-10-01').outputs, if(variables('_selfSignedFrontendCertAndBackendCert'), reference(resourceId('Microsoft.Resources/deployments', format('{0}2', variables('name_gatewayDeploymentPrefix'))), '2019-10-01').outputs, if(variables('_signedFrontendCertAndNoBackendCert'), reference(resourceId('Microsoft.Resources/deployments', format('{0}3', variables('name_gatewayDeploymentPrefix'))), '2019-10-01').outputs, reference(resourceId('Microsoft.Resources/deployments', format('{0}4', variables('name_gatewayDeploymentPrefix'))), '2019-10-01').outputs)))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "pid-app-gateway-start-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidAppgwStart')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "3360241215376299589"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2019-10-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.613.9944",
                              "templateHash": "6023100456016179368"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "This is an empty deployment"
                            }
                          },
                          "functions": [],
                          "resources": [],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "47ea43a0-95cf-52c7-aee8-7ee6106fc1bf"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "01288010-2672-5831-a66b-7b8b45cace1b"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "d7a9c78e-39d9-5a47-928d-8645ed86dafd"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "0cc86800-37f4-5191-9368-2953394309ec"
                    },
                    "dnsEnd": {
                      "type": "string",
                      "value": "754e16bc-4d81-5343-b99b-7532abd6587d"
                    },
                    "dnsStart": {
                      "type": "string",
                      "value": "64ae895c-feb3-529e-8435-5d2e49f94e09"
                    },
                    "lbEnd": {
                      "type": "string",
                      "value": "ce664543-77bd-515a-832e-107e32f99da9"
                    },
                    "lbStart": {
                      "type": "string",
                      "value": "44732bbc-04c4-5df7-a0c6-b9be9ec00ee6"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "2798165c-49fa-5701-b608-b80ed3986176"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "0793308f-de9d-5f0d-92f9-d9fc4b413b8b"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "2571f846-2f66-5c22-9fe6-38ecea7889ac"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "3e6acde5-9a62-5488-9fd4-87c46f4105f4"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "e6e33240-e5db-52fc-9154-7fc7b3b8b508"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4570a81a-3f3a-53d5-b178-7f985d9c5ecf"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "vnet-application-gateway",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "vnetForApplicationGateway": {
                    "value": "[parameters('vnetForApplicationGateway')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "5409345075225713610"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "vnetForApplicationGateway": {
                      "type": "object",
                      "defaultValue": {
                        "name": "wlsaks-app-gateway-vnet",
                        "resourceGroup": "[resourceGroup().name]",
                        "addressPrefixes": [
                          "172.16.0.0/24"
                        ],
                        "addressPrefix": "172.16.0.0/24",
                        "newOrExisting": "new",
                        "subnets": {
                          "gatewaySubnet": {
                            "name": "wlsaks-gateway-subnet",
                            "addressPrefix": "172.16.0.0/24",
                            "startAddress": "172.16.0.4"
                          }
                        }
                      }
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_subnetAddressPrefixes": "[parameters('vnetForApplicationGateway').subnets.gatewaySubnet.addressPrefix]",
                    "const_vnetAddressPrefixes": "[parameters('vnetForApplicationGateway').addressPrefixes]",
                    "const_newVnet": "[if(equals(parameters('vnetForApplicationGateway').newOrExisting, 'new'), true(), false())]",
                    "name_nsg": "[format('wlsaks-nsg-{0}', uniqueString(parameters('utcValue')))]",
                    "name_subnet": "[parameters('vnetForApplicationGateway').subnets.gatewaySubnet.name]",
                    "name_vnet": "[parameters('vnetForApplicationGateway').name]"
                  },
                  "resources": [
                    {
                      "condition": "[variables('const_newVnet')]",
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2021-08-01",
                      "name": "[variables('name_nsg')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "securityRules": [
                          {
                            "properties": {
                              "protocol": "Tcp",
                              "sourcePortRange": "*",
                              "destinationPortRange": "65200-65535",
                              "sourceAddressPrefix": "GatewayManager",
                              "destinationAddressPrefix": "*",
                              "access": "Allow",
                              "priority": 500,
                              "direction": "Inbound"
                            },
                            "name": "ALLOW_APPGW"
                          },
                          {
                            "properties": {
                              "protocol": "Tcp",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "Internet",
                              "destinationAddressPrefix": "*",
                              "access": "Allow",
                              "priority": 510,
                              "direction": "Inbound",
                              "destinationPortRanges": [
                                "80",
                                "443"
                              ]
                            },
                            "name": "ALLOW_HTTP_ACCESS"
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[variables('const_newVnet')]",
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2021-08-01",
                      "name": "[variables('name_vnet')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "addressSpace": {
                          "addressPrefixes": "[variables('const_vnetAddressPrefixes')]"
                        },
                        "subnets": [
                          {
                            "name": "[variables('name_subnet')]",
                            "properties": {
                              "addressPrefix": "[variables('const_subnetAddressPrefixes')]",
                              "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('name_nsg'))]"
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('name_nsg'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "subIdForApplicationGateway": {
                      "type": "string",
                      "value": "[if(variables('const_newVnet'), resourceId('Microsoft.Network/virtualNetworks/subnets', variables('name_vnet'), variables('name_subnet')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetForApplicationGateway').resourceGroup), 'Microsoft.Network/virtualNetworks/subnets', variables('name_vnet'), variables('name_subnet')))]"
                    },
                    "knownIPAddress": {
                      "type": "string",
                      "value": "[parameters('vnetForApplicationGateway').subnets.gatewaySubnet.startAddress]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'pid-app-gateway-start-deployment')]"
              ]
            },
            {
              "condition": "[parameters('appgwUsePrivateIP')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "query-available-private-ip-for-app-gateway",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "azCliVersion": {
                    "value": "[parameters('azCliVersion')]"
                  },
                  "identity": {
                    "value": "[parameters('identity')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "subnetId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-application-gateway'), '2019-10-01').outputs.subIdForApplicationGateway.value]"
                  },
                  "knownIP": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-application-gateway'), '2019-10-01').outputs.knownIPAddress.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "18081491036784737106"
                    }
                  },
                  "parameters": {
                    "azCliVersion": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "subnetId": {
                      "type": "string",
                      "defaultValue": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/resourcegroupname/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnetname"
                    },
                    "knownIP": {
                      "type": "string",
                      "defaultValue": "10.0.0.1"
                    },
                    "identity": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "location": {
                      "type": "string"
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "base64_common": "IyBDb3B5cmlnaHQgKGMpIDIwMjEsIE9yYWNsZSBDb3Jwb3JhdGlvbiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXMuCiMgTGljZW5zZWQgdW5kZXIgdGhlIFVuaXZlcnNhbCBQZXJtaXNzaXZlIExpY2Vuc2UgdiAxLjAgYXMgc2hvd24gYXQgaHR0cHM6Ly9vc3Mub3JhY2xlLmNvbS9saWNlbnNlcy91cGwuCiMgVGhpcyBzY3JpcHQgcnVucyBvbiBBenVyZSBDb250YWluZXIgSW5zdGFuY2Ugd2l0aCBBbHBpbmUgTGludXggdGhhdCBBenVyZSBEZXBsb3ltZW50IHNjcmlwdCBjcmVhdGVzLgoKZXhwb3J0IGNoZWNrUG9kU3RhdHVzSW50ZXJ2YWw9MjAgIyBpbnRlcnZhbCBvZiBjaGVja2luZyBwb2Qgc3RhdHVzLgpleHBvcnQgY2hlY2tQb2RTdGF0dXNNYXhBdHRlbXBzPTEwMCAjIG1heCBhdHRlbXB0IHRvIGNoZWNrIHBvZCBzdGF0dXMuCmV4cG9ydCBjaGVja1BWU3RhdGVJbnRlcnZhbD01ICMgaW50ZXJ2YWwgb2YgY2hlY2tpbmcgcHZjIHN0YXR1cy4KZXhwb3J0IGNoZWNrUFZTdGF0ZU1heEF0dGVtcHQ9MTAgIyBtYXggYXR0ZW1wdCB0byBjaGVjayBwdmMgc3RhdHVzLgpleHBvcnQgY2hlY2tTVkNTdGF0ZU1heEF0dGVtcHQ9NTAKZXhwb3J0IGNoZWNrU1ZDSW50ZXJ2YWw9MzAgI3NlY29uZHMKZXhwb3J0IGNoZWNrQUdJQ1N0YXR1c01heEF0dGVtcHQ9MTAKZXhwb3J0IGNoZWNrQUdJQ1N0YXR1c0ludGVydmFsPTMwCmV4cG9ydCBjaGVja0luZ3Jlc3NTdGF0ZU1heEF0dGVtcHQ9NTAKCmV4cG9ydCBjb25zdEFkbWluVDNBZGRyZXNzRW52TmFtZT0iVDNfVFVOTkVMSU5HX0FETUlOX0FERFJFU1MiCmV4cG9ydCBjb25zdEFkbWluU2VydmVyTmFtZT0nYWRtaW4tc2VydmVyJwpleHBvcnQgY29uc3RDbHVzdGVyTmFtZT0nY2x1c3Rlci0xJwpleHBvcnQgY29uc3RDbHVzdGVyVDNBZGRyZXNzRW52TmFtZT0iVDNfVFVOTkVMSU5HX0NMVVNURVJfQUREUkVTUyIKZXhwb3J0IGNvbnN0RGVmYXVsdEphdmFPcHRpb25zPSItRGxvZzRqMi5mb3JtYXRNc2dOb0xvb2t1cHM9dHJ1ZSAtRHdlYmxvZ2ljLlN0ZG91dERlYnVnRW5hYmxlZD1mYWxzZSIgIyB0aGUgamF2YSBvcHRpb25zIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgY2x1c3RlcgpleHBvcnQgY29uc3REZWZhdWx0SlZNQXJncz0iLURqYXZhLnNlY3VyaXR5LmVnZD1maWxlOi9kZXYvLi91cmFuZG9tIC1YbXMyNTZtIC1YbXg1MTJtIC1YWDpNaW5SQU1QZXJjZW50YWdlPTI1LjAgLVhYOk1heFJBTVBlcmNlbnRhZ2U9NTAuMCAiICMgdGhlIEpWTSBvcHRpb25zIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgY2x1c3RlcgpleHBvcnQgY29uc3REZWZhdWx0QUtTVmVyc2lvbj0iZGVmYXVsdCIKZXhwb3J0IGNvbnN0RmFsc2U9ImZhbHNlIgpleHBvcnQgY29uc3RUcnVlPSJ0cnVlIgpleHBvcnQgY29uc3RJbnRyb3NwZWN0b3JKb2JBY3RpdmVEZWFkbGluZVNlY29uZHM9MzAwICAjIGZvciBHdWFyYW50ZWVkIFFvcwpleHBvcnQgY29uc3RQb3N0Z3JlRHJpdmVyTmFtZT0icG9zdGdyZXNxbC00Mi4zLjYuamFyIgpleHBvcnQgY29uc3RNU1NRTERyaXZlck5hbWU9Im1zc3FsLWpkYmMtMTAuMi4xLmpyZTguamFyIgoKZXhwb3J0IGN1cmxNYXhUaW1lPTEyMCAjIHNlY29uZHMKZXhwb3J0IG9jckxvZ2luU2VydmVyPSJjb250YWluZXItcmVnaXN0cnkub3JhY2xlLmNvbSIKZXhwb3J0IG9jckdhSW1hZ2VQYXRoPSJtaWRkbGV3YXJlL3dlYmxvZ2ljIgpleHBvcnQgb2NyQ3B1SW1hZ2VQYXRoPSJtaWRkbGV3YXJlL3dlYmxvZ2ljX2NwdSIKZXhwb3J0IGdpdFVybDRDcHVJbWFnZXM9Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9vcmFjbGUvd2VibG9naWMtYXp1cmUvbWFpbi93ZWJsb2dpYy1henVyZS1ha3Mvc3JjL21haW4vcmVzb3VyY2VzL3dlYmxvZ2ljX2NwdV9pbWFnZXMuanNvbiIKZXhwb3J0IGdpdFVybDRBa3NXZWxsVGVzdGVkVmVyc2lvbkpzb25GaWxlPSJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vb3JhY2xlL3dlYmxvZ2ljLWF6dXJlL21haW4vd2VibG9naWMtYXp1cmUtYWtzL3NyYy9tYWluL3Jlc291cmNlcy9ha3Nfd2VsbF90ZXN0ZWRfdmVyc2lvbi5qc29uIgpleHBvcnQgZ2l0VXJsNFdMU1Rvb2xpbmdGYW1pbHlKc29uRmlsZT0iaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29yYWNsZS93ZWJsb2dpYy1henVyZS9tYWluL3dlYmxvZ2ljLWF6dXJlLWFrcy9zcmMvbWFpbi9yZXNvdXJjZXMvd2VibG9naWNfdG9vbGluZ19mYW1pbHkuanNvbiIKCmV4cG9ydCBvcHRVbmluc3RhbGxNYXhUcnk9NSAjIE1heCBhdHRlbXB0cyB0byB3YWl0IGZvciB0aGUgb3BlcmF0b3IgdW5pbnN0YWxsZWQKZXhwb3J0IG9wdFVuaW5zdGFsbEludGVydmFsPTEwCgpleHBvcnQgcmV0cnlNYXhBdHRlbXB0PTUgIyByZXRyeSBhdHRlbXB0IGZvciBjdXJsIGNvbW1hbmQKZXhwb3J0IHJldHJ5SW50ZXJ2YWw9MTAKCmV4cG9ydCB3bHNDb250YWluZXJOYW1lPSJ3ZWJsb2dpYy1zZXJ2ZXIiCmV4cG9ydCB3bHNQb3N0Z3Jlc3FsRHJpdmVyVXJsPSJodHRwczovL2pkYmMucG9zdGdyZXNxbC5vcmcvZG93bmxvYWQvcG9zdGdyZXNxbC00Mi4zLjYuamFyIgpleHBvcnQgd2xzTVNTUUxEcml2ZXJVcmw9Imh0dHBzOi8vcmVwby5tYXZlbi5hcGFjaGUub3JnL21hdmVuMi9jb20vbWljcm9zb2Z0L3NxbHNlcnZlci9tc3NxbC1qZGJjLzEwLjIuMS5qcmU4L21zc3FsLWpkYmMtMTAuMi4xLmpyZTguamFyIgo=",
                    "base64_queryPrivateIPForAppGateway": "IyBDb3B5cmlnaHQgKGMpIDIwMjIsIE9yYWNsZSBDb3Jwb3JhdGlvbiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXMuCiMgTGljZW5zZWQgdW5kZXIgdGhlIFVuaXZlcnNhbCBQZXJtaXNzaXZlIExpY2Vuc2UgdiAxLjAgYXMgc2hvd24gYXQgaHR0cHM6Ly9vc3Mub3JhY2xlLmNvbS9saWNlbnNlcy91cGwuCiMgVGhpcyBzY3JpcHQgcnVucyBvbiBBenVyZSBDb250YWluZXIgSW5zdGFuY2Ugd2l0aCBBbHBpbmUgTGludXggdGhhdCBBenVyZSBEZXBsb3ltZW50IHNjcmlwdCBjcmVhdGVzLgojCiMgZW52IGlucHV0czoKIyBTVUJORVRfSUQKIyBLTk9XTl9JUAoKZnVuY3Rpb24gcXVlcnlfaXAoKSB7CiAgICBlY2hvX3N0ZG91dCAiU3VibmV0IElkOiAke1NVQk5FVF9JRH0iCgogICAgIyBzZWxlY3QgYSBhdmFpbGFibGUgcHJpdmF0ZSBJUAogICAgIyBhenVyZSByZXNlcnZlcyB0aGUgZmlyc3QgMyBwcml2YXRlIElQcy4KICAgIGxvY2FsIHJldD0kKGF6IG5ldHdvcmsgdm5ldCBjaGVjay1pcC1hZGRyZXNzIFwKICAgICAgICAtLWlkcyAke1NVQk5FVF9JRH0gXAogICAgICAgIC0taXAtYWRkcmVzcyAke0tOT1dOX0lQfSkKICAgIGxvY2FsIGF2YWlsYWJsZT0kKGVjaG8gJHtyZXR9IHwganEgLXIgLmF2YWlsYWJsZSkKICAgIGlmIFtbICIke2F2YWlsYWJsZSwsfSIgPT0gInRydWUiIF1dOyB0aGVuCiAgICAgIG91dHB1dFByaXZhdGVJUD0ke0tOT1dOX0lQfQogICAgZWxzZQogICAgICBsb2NhbCBwcml2YXRlSVBBZGRyZXNzPSQoZWNobyAke3JldH0gfCBqcSAtciAuYXZhaWxhYmxlSXBBZGRyZXNzZXNbMF0pCiAgICAgIGlmIFtbIC16ICIke3ByaXZhdGVJUEFkZHJlc3N9IiBdXSB8fCBbWyAiJHtwcml2YXRlSVBBZGRyZXNzfSI9PSJudWxsIiBdXTsgdGhlbgogICAgICAgIGVjaG9fc3RkZXJyICJFUlJPUjogbWFrZSBzdXJlIHRoZXJlIGlzIGF2YWlsYWJsZSBJUCBmb3IgYXBwbGljYXRpb24gZ2F0ZXdheSBpbiB5b3VyIHN1Ym5ldC4iCiAgICAgIGZpCgogICAgICBvdXRwdXRQcml2YXRlSVA9JHtwcml2YXRlSVBBZGRyZXNzfQogICAgZmkKfQoKZnVuY3Rpb24gb3V0cHV0X3Jlc3VsdCgpIHsKICBlY2hvICJBdmFpbGFibGUgUHJpdmF0ZSBJUDogJHtvdXRwdXRQcml2YXRlSVB9IgogIHJlc3VsdD0kKGpxIC1uIC1jIFwKICAgIC0tYXJnIHByaXZhdGVJUCAiJG91dHB1dFByaXZhdGVJUCIgXAogICAgJ3twcml2YXRlSVA6ICRwcml2YXRlSVB9JykKICBlY2hvICJyZXN1bHQgaXM6ICRyZXN1bHQiCiAgZWNobyAkcmVzdWx0ID4kQVpfU0NSSVBUU19PVVRQVVRfUEFUSAp9CgojIG1haW4gc2NyaXB0Cm91dHB1dFByaXZhdGVJUD0iMTAuMC4wLjEiCgpxdWVyeV9pcAoKb3V0cHV0X3Jlc3VsdA==",
                    "const_deploymentName": "ds-query-private-ip"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[variables('const_deploymentName')]",
                      "location": "[parameters('location')]",
                      "kind": "AzureCLI",
                      "identity": "[parameters('identity')]",
                      "properties": {
                        "azCliVersion": "[parameters('azCliVersion')]",
                        "scriptContent": "[format('{0}\r\n\r\n{1}', base64ToString(variables('base64_common')), base64ToString(variables('base64_queryPrivateIPForAppGateway')))]",
                        "environmentVariables": [
                          {
                            "name": "SUBNET_ID",
                            "value": "[parameters('subnetId')]"
                          },
                          {
                            "name": "KNOWN_IP",
                            "value": "[parameters('knownIP')]"
                          }
                        ],
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D",
                        "forceUpdateTag": "[parameters('utcValue')]"
                      }
                    }
                  ],
                  "outputs": {
                    "privateIP": {
                      "type": "string",
                      "value": "[string(reference(resourceId('Microsoft.Resources/deploymentScripts', variables('const_deploymentName'))).outputs.privateIP)]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnet-application-gateway')]"
              ]
            },
            {
              "condition": "[variables('_selfSignedFrontendCertAndNoBackendCert')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "[format('{0}1', variables('name_gatewayDeploymentPrefix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "dnsNameforApplicationGateway": {
                    "value": "[parameters('dnsNameforApplicationGateway')]"
                  },
                  "enableCustomSSL": {
                    "value": "[parameters('enableCustomSSL')]"
                  },
                  "gatewayPublicIPAddressName": {
                    "value": "[parameters('appgwPublicIPAddressName')]"
                  },
                  "gatewaySubnetId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-application-gateway'), '2019-10-01').outputs.subIdForApplicationGateway.value]"
                  },
                  "gatewaySslCertName": {
                    "value": "[parameters('appgwSslCertName')]"
                  },
                  "gatewayTrustedRootCertName": {
                    "value": "[parameters('appgwTrustedRootCertName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "noSslCertPsw": {
                    "value": true
                  },
                  "sslCertData": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('keyVaultResourceGroup')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      },
                      "secretName": "[parameters('keyvaultFrontendCertDataSecretName')]"
                    }
                  },
                  "sslCertPswData": {
                    "value": "[variables('const_null')]"
                  },
                  "staticPrivateFrontentIP": {
                    "value": "[if(variables('_appgwUsePrivateIP'), reference(resourceId('Microsoft.Resources/deployments', 'query-available-private-ip-for-app-gateway'), '2019-10-01').outputs.privateIP.value, '')]"
                  },
                  "trustedRootCertData": {
                    "value": "[variables('const_null')]"
                  },
                  "usePrivateIP": {
                    "value": "[parameters('appgwUsePrivateIP')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "8815409774176976162"
                    }
                  },
                  "parameters": {
                    "dnsNameforApplicationGateway": {
                      "type": "string",
                      "defaultValue": "[take(format('wlsgw{0}', uniqueString(parameters('utcValue'))), 63)]",
                      "metadata": {
                        "description": "DNS for ApplicationGateway"
                      }
                    },
                    "enableCustomSSL": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "gatewayPublicIPAddressName": {
                      "type": "string",
                      "defaultValue": "gwip",
                      "metadata": {
                        "description": "Public IP Name for the Application Gateway"
                      }
                    },
                    "gatewaySubnetId": {
                      "type": "string",
                      "defaultValue": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/resourcegroupname/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnetname"
                    },
                    "gatewaySslCertName": {
                      "type": "string",
                      "defaultValue": "appGatewaySslCert"
                    },
                    "gatewayTrustedRootCertName": {
                      "type": "string",
                      "defaultValue": "appGatewayTrustedRootCert"
                    },
                    "location": {
                      "type": "string"
                    },
                    "noSslCertPsw": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "sslCertData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "sslCertPswData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "staticPrivateFrontentIP": {
                      "type": "string",
                      "defaultValue": "10.0.0.1"
                    },
                    "trustedRootCertData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "usePrivateIP": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_sslCertPsw": "[if(parameters('noSslCertPsw'), '', parameters('sslCertPswData'))]",
                    "name_appGateway": "[format('appgw{0}', uniqueString(parameters('utcValue')))]",
                    "name_backendAddressPool": "myGatewayBackendPool",
                    "name_frontEndIPConfig": "appGwPublicFrontendIp",
                    "name_frontEndPrivateIPConfig": "appGwPrivateFrontendIp",
                    "name_httpListener": "HTTPListener",
                    "name_httpPort": "httpport",
                    "name_httpSetting": "myHTTPSetting",
                    "ref_backendAddressPool": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('name_appGateway'), variables('name_backendAddressPool'))]",
                    "ref_backendHttpSettings": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('name_appGateway'), variables('name_httpSetting'))]",
                    "ref_frontendHTTPPort": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('name_appGateway'), variables('name_httpPort'))]",
                    "ref_frontendIPConfiguration": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('name_appGateway'), variables('name_frontEndIPConfig'))]",
                    "ref_httpListener": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('name_appGateway'), variables('name_httpListener'))]",
                    "ref_publicIPAddress": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))]",
                    "obj_backendTrustedRootCerts": [
                      {
                        "name": "[parameters('gatewayTrustedRootCertName')]",
                        "properties": {
                          "data": "[parameters('trustedRootCertData')]"
                        }
                      }
                    ],
                    "obj_frontendIPConfigurations1": [
                      {
                        "name": "[variables('name_frontEndIPConfig')]",
                        "properties": {
                          "publicIPAddress": {
                            "id": "[variables('ref_publicIPAddress')]"
                          }
                        }
                      }
                    ],
                    "obj_frontendIPConfigurations2": [
                      {
                        "name": "[variables('name_frontEndIPConfig')]",
                        "properties": {
                          "publicIPAddress": {
                            "id": "[variables('ref_publicIPAddress')]"
                          }
                        }
                      },
                      {
                        "name": "[variables('name_frontEndPrivateIPConfig')]",
                        "properties": {
                          "privateIPAllocationMethod": "Static",
                          "privateIPAddress": "[parameters('staticPrivateFrontentIP')]",
                          "subnet": {
                            "id": "[parameters('gatewaySubnetId')]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2022-01-01",
                      "name": "[parameters('gatewayPublicIPAddressName')]",
                      "sku": {
                        "name": "Standard"
                      },
                      "location": "[parameters('location')]",
                      "properties": {
                        "publicIPAllocationMethod": "Static",
                        "dnsSettings": {
                          "domainNameLabel": "[parameters('dnsNameforApplicationGateway')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/applicationGateways",
                      "apiVersion": "2022-01-01",
                      "name": "[variables('name_appGateway')]",
                      "location": "[parameters('location')]",
                      "tags": {
                        "managed-by-k8s-ingress": "true"
                      },
                      "properties": {
                        "sku": {
                          "name": "WAF_v2",
                          "tier": "WAF_v2"
                        },
                        "sslCertificates": [
                          {
                            "name": "[parameters('gatewaySslCertName')]",
                            "properties": {
                              "data": "[parameters('sslCertData')]",
                              "password": "[variables('const_sslCertPsw')]"
                            }
                          }
                        ],
                        "trustedRootCertificates": "[if(parameters('enableCustomSSL'), variables('obj_backendTrustedRootCerts'), createArray())]",
                        "gatewayIPConfigurations": [
                          {
                            "name": "appGatewayIpConfig",
                            "properties": {
                              "subnet": {
                                "id": "[parameters('gatewaySubnetId')]"
                              }
                            }
                          }
                        ],
                        "frontendIPConfigurations": "[if(parameters('usePrivateIP'), variables('obj_frontendIPConfigurations2'), variables('obj_frontendIPConfigurations1'))]",
                        "frontendPorts": [
                          {
                            "name": "[variables('name_httpPort')]",
                            "properties": {
                              "port": 80
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "myGatewayBackendPool"
                          }
                        ],
                        "httpListeners": [
                          {
                            "name": "[variables('name_httpListener')]",
                            "properties": {
                              "protocol": "Http",
                              "frontendIPConfiguration": {
                                "id": "[variables('ref_frontendIPConfiguration')]"
                              },
                              "frontendPort": {
                                "id": "[variables('ref_frontendHTTPPort')]"
                              }
                            }
                          }
                        ],
                        "backendHttpSettingsCollection": [
                          {
                            "name": "[variables('name_httpSetting')]",
                            "properties": {
                              "port": 80,
                              "protocol": "Http"
                            }
                          }
                        ],
                        "requestRoutingRules": [
                          {
                            "name": "HTTPRoutingRule",
                            "properties": {
                              "priority": 3,
                              "httpListener": {
                                "id": "[variables('ref_httpListener')]"
                              },
                              "backendAddressPool": {
                                "id": "[variables('ref_backendAddressPool')]"
                              },
                              "backendHttpSettings": {
                                "id": "[variables('ref_backendHttpSettings')]"
                              }
                            }
                          }
                        ],
                        "webApplicationFirewallConfiguration": {
                          "enabled": true,
                          "firewallMode": "Prevention",
                          "ruleSetType": "OWASP",
                          "ruleSetVersion": "3.0"
                        },
                        "enableHttp2": false,
                        "autoscaleConfiguration": {
                          "minCapacity": 2,
                          "maxCapacity": 3
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "appGatewayAlias": {
                      "type": "string",
                      "value": "[if(parameters('usePrivateIP'), parameters('staticPrivateFrontentIP'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))).dnsSettings.fqdn)]"
                    },
                    "appGatewayId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/applicationGateways', variables('name_appGateway'))]"
                    },
                    "appGatewayName": {
                      "type": "string",
                      "value": "[variables('name_appGateway')]"
                    },
                    "appGatewayURL": {
                      "type": "string",
                      "value": "[uri(format('http://{0}/', if(parameters('usePrivateIP'), parameters('staticPrivateFrontentIP'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))).dnsSettings.fqdn)), '')]"
                    },
                    "appGatewaySecuredURL": {
                      "type": "string",
                      "value": "[uri(format('https://{0}/', if(parameters('usePrivateIP'), parameters('staticPrivateFrontentIP'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))).dnsSettings.fqdn)), '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnet-application-gateway')]",
                "[resourceId('Microsoft.Resources/deployments', 'query-available-private-ip-for-app-gateway')]"
              ]
            },
            {
              "condition": "[variables('_selfSignedFrontendCertAndBackendCert')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "[format('{0}2', variables('name_gatewayDeploymentPrefix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "dnsNameforApplicationGateway": {
                    "value": "[parameters('dnsNameforApplicationGateway')]"
                  },
                  "enableCustomSSL": {
                    "value": "[parameters('enableCustomSSL')]"
                  },
                  "gatewayPublicIPAddressName": {
                    "value": "[parameters('appgwPublicIPAddressName')]"
                  },
                  "gatewaySubnetId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-application-gateway'), '2019-10-01').outputs.subIdForApplicationGateway.value]"
                  },
                  "gatewaySslCertName": {
                    "value": "[parameters('appgwSslCertName')]"
                  },
                  "gatewayTrustedRootCertName": {
                    "value": "[parameters('appgwTrustedRootCertName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "noSslCertPsw": {
                    "value": true
                  },
                  "sslCertData": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('keyVaultResourceGroup')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      },
                      "secretName": "[parameters('keyvaultFrontendCertDataSecretName')]"
                    }
                  },
                  "sslCertPswData": {
                    "value": "[variables('const_null')]"
                  },
                  "staticPrivateFrontentIP": {
                    "value": "[if(variables('_appgwUsePrivateIP'), reference(resourceId('Microsoft.Resources/deployments', 'query-available-private-ip-for-app-gateway'), '2019-10-01').outputs.privateIP.value, '')]"
                  },
                  "trustedRootCertData": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('keyVaultResourceGroup')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      },
                      "secretName": "[parameters('keyvaultBackendCertDataSecretName')]"
                    }
                  },
                  "usePrivateIP": {
                    "value": "[parameters('appgwUsePrivateIP')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "8815409774176976162"
                    }
                  },
                  "parameters": {
                    "dnsNameforApplicationGateway": {
                      "type": "string",
                      "defaultValue": "[take(format('wlsgw{0}', uniqueString(parameters('utcValue'))), 63)]",
                      "metadata": {
                        "description": "DNS for ApplicationGateway"
                      }
                    },
                    "enableCustomSSL": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "gatewayPublicIPAddressName": {
                      "type": "string",
                      "defaultValue": "gwip",
                      "metadata": {
                        "description": "Public IP Name for the Application Gateway"
                      }
                    },
                    "gatewaySubnetId": {
                      "type": "string",
                      "defaultValue": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/resourcegroupname/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnetname"
                    },
                    "gatewaySslCertName": {
                      "type": "string",
                      "defaultValue": "appGatewaySslCert"
                    },
                    "gatewayTrustedRootCertName": {
                      "type": "string",
                      "defaultValue": "appGatewayTrustedRootCert"
                    },
                    "location": {
                      "type": "string"
                    },
                    "noSslCertPsw": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "sslCertData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "sslCertPswData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "staticPrivateFrontentIP": {
                      "type": "string",
                      "defaultValue": "10.0.0.1"
                    },
                    "trustedRootCertData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "usePrivateIP": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_sslCertPsw": "[if(parameters('noSslCertPsw'), '', parameters('sslCertPswData'))]",
                    "name_appGateway": "[format('appgw{0}', uniqueString(parameters('utcValue')))]",
                    "name_backendAddressPool": "myGatewayBackendPool",
                    "name_frontEndIPConfig": "appGwPublicFrontendIp",
                    "name_frontEndPrivateIPConfig": "appGwPrivateFrontendIp",
                    "name_httpListener": "HTTPListener",
                    "name_httpPort": "httpport",
                    "name_httpSetting": "myHTTPSetting",
                    "ref_backendAddressPool": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('name_appGateway'), variables('name_backendAddressPool'))]",
                    "ref_backendHttpSettings": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('name_appGateway'), variables('name_httpSetting'))]",
                    "ref_frontendHTTPPort": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('name_appGateway'), variables('name_httpPort'))]",
                    "ref_frontendIPConfiguration": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('name_appGateway'), variables('name_frontEndIPConfig'))]",
                    "ref_httpListener": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('name_appGateway'), variables('name_httpListener'))]",
                    "ref_publicIPAddress": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))]",
                    "obj_backendTrustedRootCerts": [
                      {
                        "name": "[parameters('gatewayTrustedRootCertName')]",
                        "properties": {
                          "data": "[parameters('trustedRootCertData')]"
                        }
                      }
                    ],
                    "obj_frontendIPConfigurations1": [
                      {
                        "name": "[variables('name_frontEndIPConfig')]",
                        "properties": {
                          "publicIPAddress": {
                            "id": "[variables('ref_publicIPAddress')]"
                          }
                        }
                      }
                    ],
                    "obj_frontendIPConfigurations2": [
                      {
                        "name": "[variables('name_frontEndIPConfig')]",
                        "properties": {
                          "publicIPAddress": {
                            "id": "[variables('ref_publicIPAddress')]"
                          }
                        }
                      },
                      {
                        "name": "[variables('name_frontEndPrivateIPConfig')]",
                        "properties": {
                          "privateIPAllocationMethod": "Static",
                          "privateIPAddress": "[parameters('staticPrivateFrontentIP')]",
                          "subnet": {
                            "id": "[parameters('gatewaySubnetId')]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2022-01-01",
                      "name": "[parameters('gatewayPublicIPAddressName')]",
                      "sku": {
                        "name": "Standard"
                      },
                      "location": "[parameters('location')]",
                      "properties": {
                        "publicIPAllocationMethod": "Static",
                        "dnsSettings": {
                          "domainNameLabel": "[parameters('dnsNameforApplicationGateway')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/applicationGateways",
                      "apiVersion": "2022-01-01",
                      "name": "[variables('name_appGateway')]",
                      "location": "[parameters('location')]",
                      "tags": {
                        "managed-by-k8s-ingress": "true"
                      },
                      "properties": {
                        "sku": {
                          "name": "WAF_v2",
                          "tier": "WAF_v2"
                        },
                        "sslCertificates": [
                          {
                            "name": "[parameters('gatewaySslCertName')]",
                            "properties": {
                              "data": "[parameters('sslCertData')]",
                              "password": "[variables('const_sslCertPsw')]"
                            }
                          }
                        ],
                        "trustedRootCertificates": "[if(parameters('enableCustomSSL'), variables('obj_backendTrustedRootCerts'), createArray())]",
                        "gatewayIPConfigurations": [
                          {
                            "name": "appGatewayIpConfig",
                            "properties": {
                              "subnet": {
                                "id": "[parameters('gatewaySubnetId')]"
                              }
                            }
                          }
                        ],
                        "frontendIPConfigurations": "[if(parameters('usePrivateIP'), variables('obj_frontendIPConfigurations2'), variables('obj_frontendIPConfigurations1'))]",
                        "frontendPorts": [
                          {
                            "name": "[variables('name_httpPort')]",
                            "properties": {
                              "port": 80
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "myGatewayBackendPool"
                          }
                        ],
                        "httpListeners": [
                          {
                            "name": "[variables('name_httpListener')]",
                            "properties": {
                              "protocol": "Http",
                              "frontendIPConfiguration": {
                                "id": "[variables('ref_frontendIPConfiguration')]"
                              },
                              "frontendPort": {
                                "id": "[variables('ref_frontendHTTPPort')]"
                              }
                            }
                          }
                        ],
                        "backendHttpSettingsCollection": [
                          {
                            "name": "[variables('name_httpSetting')]",
                            "properties": {
                              "port": 80,
                              "protocol": "Http"
                            }
                          }
                        ],
                        "requestRoutingRules": [
                          {
                            "name": "HTTPRoutingRule",
                            "properties": {
                              "priority": 3,
                              "httpListener": {
                                "id": "[variables('ref_httpListener')]"
                              },
                              "backendAddressPool": {
                                "id": "[variables('ref_backendAddressPool')]"
                              },
                              "backendHttpSettings": {
                                "id": "[variables('ref_backendHttpSettings')]"
                              }
                            }
                          }
                        ],
                        "webApplicationFirewallConfiguration": {
                          "enabled": true,
                          "firewallMode": "Prevention",
                          "ruleSetType": "OWASP",
                          "ruleSetVersion": "3.0"
                        },
                        "enableHttp2": false,
                        "autoscaleConfiguration": {
                          "minCapacity": 2,
                          "maxCapacity": 3
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "appGatewayAlias": {
                      "type": "string",
                      "value": "[if(parameters('usePrivateIP'), parameters('staticPrivateFrontentIP'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))).dnsSettings.fqdn)]"
                    },
                    "appGatewayId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/applicationGateways', variables('name_appGateway'))]"
                    },
                    "appGatewayName": {
                      "type": "string",
                      "value": "[variables('name_appGateway')]"
                    },
                    "appGatewayURL": {
                      "type": "string",
                      "value": "[uri(format('http://{0}/', if(parameters('usePrivateIP'), parameters('staticPrivateFrontentIP'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))).dnsSettings.fqdn)), '')]"
                    },
                    "appGatewaySecuredURL": {
                      "type": "string",
                      "value": "[uri(format('https://{0}/', if(parameters('usePrivateIP'), parameters('staticPrivateFrontentIP'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))).dnsSettings.fqdn)), '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnet-application-gateway')]",
                "[resourceId('Microsoft.Resources/deployments', 'query-available-private-ip-for-app-gateway')]"
              ]
            },
            {
              "condition": "[variables('_signedFrontendCertAndNoBackendCert')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "[format('{0}3', variables('name_gatewayDeploymentPrefix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "dnsNameforApplicationGateway": {
                    "value": "[parameters('dnsNameforApplicationGateway')]"
                  },
                  "enableCustomSSL": {
                    "value": "[parameters('enableCustomSSL')]"
                  },
                  "gatewayPublicIPAddressName": {
                    "value": "[parameters('appgwPublicIPAddressName')]"
                  },
                  "gatewaySubnetId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-application-gateway'), '2019-10-01').outputs.subIdForApplicationGateway.value]"
                  },
                  "gatewaySslCertName": {
                    "value": "[parameters('appgwSslCertName')]"
                  },
                  "gatewayTrustedRootCertName": {
                    "value": "[parameters('appgwTrustedRootCertName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "sslCertData": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('keyVaultResourceGroup')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      },
                      "secretName": "[parameters('keyvaultFrontendCertDataSecretName')]"
                    }
                  },
                  "sslCertPswData": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('keyVaultResourceGroup')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      },
                      "secretName": "[parameters('keyvaultFrontendCertPswSecretName')]"
                    }
                  },
                  "staticPrivateFrontentIP": {
                    "value": "[if(variables('_appgwUsePrivateIP'), reference(resourceId('Microsoft.Resources/deployments', 'query-available-private-ip-for-app-gateway'), '2019-10-01').outputs.privateIP.value, '')]"
                  },
                  "trustedRootCertData": {
                    "value": "[variables('const_null')]"
                  },
                  "usePrivateIP": {
                    "value": "[parameters('appgwUsePrivateIP')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "8815409774176976162"
                    }
                  },
                  "parameters": {
                    "dnsNameforApplicationGateway": {
                      "type": "string",
                      "defaultValue": "[take(format('wlsgw{0}', uniqueString(parameters('utcValue'))), 63)]",
                      "metadata": {
                        "description": "DNS for ApplicationGateway"
                      }
                    },
                    "enableCustomSSL": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "gatewayPublicIPAddressName": {
                      "type": "string",
                      "defaultValue": "gwip",
                      "metadata": {
                        "description": "Public IP Name for the Application Gateway"
                      }
                    },
                    "gatewaySubnetId": {
                      "type": "string",
                      "defaultValue": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/resourcegroupname/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnetname"
                    },
                    "gatewaySslCertName": {
                      "type": "string",
                      "defaultValue": "appGatewaySslCert"
                    },
                    "gatewayTrustedRootCertName": {
                      "type": "string",
                      "defaultValue": "appGatewayTrustedRootCert"
                    },
                    "location": {
                      "type": "string"
                    },
                    "noSslCertPsw": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "sslCertData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "sslCertPswData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "staticPrivateFrontentIP": {
                      "type": "string",
                      "defaultValue": "10.0.0.1"
                    },
                    "trustedRootCertData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "usePrivateIP": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_sslCertPsw": "[if(parameters('noSslCertPsw'), '', parameters('sslCertPswData'))]",
                    "name_appGateway": "[format('appgw{0}', uniqueString(parameters('utcValue')))]",
                    "name_backendAddressPool": "myGatewayBackendPool",
                    "name_frontEndIPConfig": "appGwPublicFrontendIp",
                    "name_frontEndPrivateIPConfig": "appGwPrivateFrontendIp",
                    "name_httpListener": "HTTPListener",
                    "name_httpPort": "httpport",
                    "name_httpSetting": "myHTTPSetting",
                    "ref_backendAddressPool": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('name_appGateway'), variables('name_backendAddressPool'))]",
                    "ref_backendHttpSettings": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('name_appGateway'), variables('name_httpSetting'))]",
                    "ref_frontendHTTPPort": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('name_appGateway'), variables('name_httpPort'))]",
                    "ref_frontendIPConfiguration": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('name_appGateway'), variables('name_frontEndIPConfig'))]",
                    "ref_httpListener": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('name_appGateway'), variables('name_httpListener'))]",
                    "ref_publicIPAddress": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))]",
                    "obj_backendTrustedRootCerts": [
                      {
                        "name": "[parameters('gatewayTrustedRootCertName')]",
                        "properties": {
                          "data": "[parameters('trustedRootCertData')]"
                        }
                      }
                    ],
                    "obj_frontendIPConfigurations1": [
                      {
                        "name": "[variables('name_frontEndIPConfig')]",
                        "properties": {
                          "publicIPAddress": {
                            "id": "[variables('ref_publicIPAddress')]"
                          }
                        }
                      }
                    ],
                    "obj_frontendIPConfigurations2": [
                      {
                        "name": "[variables('name_frontEndIPConfig')]",
                        "properties": {
                          "publicIPAddress": {
                            "id": "[variables('ref_publicIPAddress')]"
                          }
                        }
                      },
                      {
                        "name": "[variables('name_frontEndPrivateIPConfig')]",
                        "properties": {
                          "privateIPAllocationMethod": "Static",
                          "privateIPAddress": "[parameters('staticPrivateFrontentIP')]",
                          "subnet": {
                            "id": "[parameters('gatewaySubnetId')]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2022-01-01",
                      "name": "[parameters('gatewayPublicIPAddressName')]",
                      "sku": {
                        "name": "Standard"
                      },
                      "location": "[parameters('location')]",
                      "properties": {
                        "publicIPAllocationMethod": "Static",
                        "dnsSettings": {
                          "domainNameLabel": "[parameters('dnsNameforApplicationGateway')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/applicationGateways",
                      "apiVersion": "2022-01-01",
                      "name": "[variables('name_appGateway')]",
                      "location": "[parameters('location')]",
                      "tags": {
                        "managed-by-k8s-ingress": "true"
                      },
                      "properties": {
                        "sku": {
                          "name": "WAF_v2",
                          "tier": "WAF_v2"
                        },
                        "sslCertificates": [
                          {
                            "name": "[parameters('gatewaySslCertName')]",
                            "properties": {
                              "data": "[parameters('sslCertData')]",
                              "password": "[variables('const_sslCertPsw')]"
                            }
                          }
                        ],
                        "trustedRootCertificates": "[if(parameters('enableCustomSSL'), variables('obj_backendTrustedRootCerts'), createArray())]",
                        "gatewayIPConfigurations": [
                          {
                            "name": "appGatewayIpConfig",
                            "properties": {
                              "subnet": {
                                "id": "[parameters('gatewaySubnetId')]"
                              }
                            }
                          }
                        ],
                        "frontendIPConfigurations": "[if(parameters('usePrivateIP'), variables('obj_frontendIPConfigurations2'), variables('obj_frontendIPConfigurations1'))]",
                        "frontendPorts": [
                          {
                            "name": "[variables('name_httpPort')]",
                            "properties": {
                              "port": 80
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "myGatewayBackendPool"
                          }
                        ],
                        "httpListeners": [
                          {
                            "name": "[variables('name_httpListener')]",
                            "properties": {
                              "protocol": "Http",
                              "frontendIPConfiguration": {
                                "id": "[variables('ref_frontendIPConfiguration')]"
                              },
                              "frontendPort": {
                                "id": "[variables('ref_frontendHTTPPort')]"
                              }
                            }
                          }
                        ],
                        "backendHttpSettingsCollection": [
                          {
                            "name": "[variables('name_httpSetting')]",
                            "properties": {
                              "port": 80,
                              "protocol": "Http"
                            }
                          }
                        ],
                        "requestRoutingRules": [
                          {
                            "name": "HTTPRoutingRule",
                            "properties": {
                              "priority": 3,
                              "httpListener": {
                                "id": "[variables('ref_httpListener')]"
                              },
                              "backendAddressPool": {
                                "id": "[variables('ref_backendAddressPool')]"
                              },
                              "backendHttpSettings": {
                                "id": "[variables('ref_backendHttpSettings')]"
                              }
                            }
                          }
                        ],
                        "webApplicationFirewallConfiguration": {
                          "enabled": true,
                          "firewallMode": "Prevention",
                          "ruleSetType": "OWASP",
                          "ruleSetVersion": "3.0"
                        },
                        "enableHttp2": false,
                        "autoscaleConfiguration": {
                          "minCapacity": 2,
                          "maxCapacity": 3
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "appGatewayAlias": {
                      "type": "string",
                      "value": "[if(parameters('usePrivateIP'), parameters('staticPrivateFrontentIP'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))).dnsSettings.fqdn)]"
                    },
                    "appGatewayId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/applicationGateways', variables('name_appGateway'))]"
                    },
                    "appGatewayName": {
                      "type": "string",
                      "value": "[variables('name_appGateway')]"
                    },
                    "appGatewayURL": {
                      "type": "string",
                      "value": "[uri(format('http://{0}/', if(parameters('usePrivateIP'), parameters('staticPrivateFrontentIP'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))).dnsSettings.fqdn)), '')]"
                    },
                    "appGatewaySecuredURL": {
                      "type": "string",
                      "value": "[uri(format('https://{0}/', if(parameters('usePrivateIP'), parameters('staticPrivateFrontentIP'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))).dnsSettings.fqdn)), '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnet-application-gateway')]",
                "[resourceId('Microsoft.Resources/deployments', 'query-available-private-ip-for-app-gateway')]"
              ]
            },
            {
              "condition": "[variables('_signedFrontendCertAndBackendCert')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "[format('{0}4', variables('name_gatewayDeploymentPrefix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "dnsNameforApplicationGateway": {
                    "value": "[parameters('dnsNameforApplicationGateway')]"
                  },
                  "enableCustomSSL": {
                    "value": "[parameters('enableCustomSSL')]"
                  },
                  "gatewayPublicIPAddressName": {
                    "value": "[parameters('appgwPublicIPAddressName')]"
                  },
                  "gatewaySubnetId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-application-gateway'), '2019-10-01').outputs.subIdForApplicationGateway.value]"
                  },
                  "gatewaySslCertName": {
                    "value": "[parameters('appgwSslCertName')]"
                  },
                  "gatewayTrustedRootCertName": {
                    "value": "[parameters('appgwTrustedRootCertName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "sslCertData": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('keyVaultResourceGroup')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      },
                      "secretName": "[parameters('keyvaultFrontendCertDataSecretName')]"
                    }
                  },
                  "sslCertPswData": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('keyVaultResourceGroup')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      },
                      "secretName": "[parameters('keyvaultFrontendCertPswSecretName')]"
                    }
                  },
                  "staticPrivateFrontentIP": {
                    "value": "[if(variables('_appgwUsePrivateIP'), reference(resourceId('Microsoft.Resources/deployments', 'query-available-private-ip-for-app-gateway'), '2019-10-01').outputs.privateIP.value, '')]"
                  },
                  "trustedRootCertData": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('keyVaultResourceGroup')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      },
                      "secretName": "[parameters('keyvaultBackendCertDataSecretName')]"
                    }
                  },
                  "usePrivateIP": {
                    "value": "[parameters('appgwUsePrivateIP')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "8815409774176976162"
                    }
                  },
                  "parameters": {
                    "dnsNameforApplicationGateway": {
                      "type": "string",
                      "defaultValue": "[take(format('wlsgw{0}', uniqueString(parameters('utcValue'))), 63)]",
                      "metadata": {
                        "description": "DNS for ApplicationGateway"
                      }
                    },
                    "enableCustomSSL": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "gatewayPublicIPAddressName": {
                      "type": "string",
                      "defaultValue": "gwip",
                      "metadata": {
                        "description": "Public IP Name for the Application Gateway"
                      }
                    },
                    "gatewaySubnetId": {
                      "type": "string",
                      "defaultValue": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/resourcegroupname/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnetname"
                    },
                    "gatewaySslCertName": {
                      "type": "string",
                      "defaultValue": "appGatewaySslCert"
                    },
                    "gatewayTrustedRootCertName": {
                      "type": "string",
                      "defaultValue": "appGatewayTrustedRootCert"
                    },
                    "location": {
                      "type": "string"
                    },
                    "noSslCertPsw": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "sslCertData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "sslCertPswData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "staticPrivateFrontentIP": {
                      "type": "string",
                      "defaultValue": "10.0.0.1"
                    },
                    "trustedRootCertData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "usePrivateIP": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_sslCertPsw": "[if(parameters('noSslCertPsw'), '', parameters('sslCertPswData'))]",
                    "name_appGateway": "[format('appgw{0}', uniqueString(parameters('utcValue')))]",
                    "name_backendAddressPool": "myGatewayBackendPool",
                    "name_frontEndIPConfig": "appGwPublicFrontendIp",
                    "name_frontEndPrivateIPConfig": "appGwPrivateFrontendIp",
                    "name_httpListener": "HTTPListener",
                    "name_httpPort": "httpport",
                    "name_httpSetting": "myHTTPSetting",
                    "ref_backendAddressPool": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('name_appGateway'), variables('name_backendAddressPool'))]",
                    "ref_backendHttpSettings": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('name_appGateway'), variables('name_httpSetting'))]",
                    "ref_frontendHTTPPort": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('name_appGateway'), variables('name_httpPort'))]",
                    "ref_frontendIPConfiguration": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('name_appGateway'), variables('name_frontEndIPConfig'))]",
                    "ref_httpListener": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('name_appGateway'), variables('name_httpListener'))]",
                    "ref_publicIPAddress": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))]",
                    "obj_backendTrustedRootCerts": [
                      {
                        "name": "[parameters('gatewayTrustedRootCertName')]",
                        "properties": {
                          "data": "[parameters('trustedRootCertData')]"
                        }
                      }
                    ],
                    "obj_frontendIPConfigurations1": [
                      {
                        "name": "[variables('name_frontEndIPConfig')]",
                        "properties": {
                          "publicIPAddress": {
                            "id": "[variables('ref_publicIPAddress')]"
                          }
                        }
                      }
                    ],
                    "obj_frontendIPConfigurations2": [
                      {
                        "name": "[variables('name_frontEndIPConfig')]",
                        "properties": {
                          "publicIPAddress": {
                            "id": "[variables('ref_publicIPAddress')]"
                          }
                        }
                      },
                      {
                        "name": "[variables('name_frontEndPrivateIPConfig')]",
                        "properties": {
                          "privateIPAllocationMethod": "Static",
                          "privateIPAddress": "[parameters('staticPrivateFrontentIP')]",
                          "subnet": {
                            "id": "[parameters('gatewaySubnetId')]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2022-01-01",
                      "name": "[parameters('gatewayPublicIPAddressName')]",
                      "sku": {
                        "name": "Standard"
                      },
                      "location": "[parameters('location')]",
                      "properties": {
                        "publicIPAllocationMethod": "Static",
                        "dnsSettings": {
                          "domainNameLabel": "[parameters('dnsNameforApplicationGateway')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/applicationGateways",
                      "apiVersion": "2022-01-01",
                      "name": "[variables('name_appGateway')]",
                      "location": "[parameters('location')]",
                      "tags": {
                        "managed-by-k8s-ingress": "true"
                      },
                      "properties": {
                        "sku": {
                          "name": "WAF_v2",
                          "tier": "WAF_v2"
                        },
                        "sslCertificates": [
                          {
                            "name": "[parameters('gatewaySslCertName')]",
                            "properties": {
                              "data": "[parameters('sslCertData')]",
                              "password": "[variables('const_sslCertPsw')]"
                            }
                          }
                        ],
                        "trustedRootCertificates": "[if(parameters('enableCustomSSL'), variables('obj_backendTrustedRootCerts'), createArray())]",
                        "gatewayIPConfigurations": [
                          {
                            "name": "appGatewayIpConfig",
                            "properties": {
                              "subnet": {
                                "id": "[parameters('gatewaySubnetId')]"
                              }
                            }
                          }
                        ],
                        "frontendIPConfigurations": "[if(parameters('usePrivateIP'), variables('obj_frontendIPConfigurations2'), variables('obj_frontendIPConfigurations1'))]",
                        "frontendPorts": [
                          {
                            "name": "[variables('name_httpPort')]",
                            "properties": {
                              "port": 80
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "myGatewayBackendPool"
                          }
                        ],
                        "httpListeners": [
                          {
                            "name": "[variables('name_httpListener')]",
                            "properties": {
                              "protocol": "Http",
                              "frontendIPConfiguration": {
                                "id": "[variables('ref_frontendIPConfiguration')]"
                              },
                              "frontendPort": {
                                "id": "[variables('ref_frontendHTTPPort')]"
                              }
                            }
                          }
                        ],
                        "backendHttpSettingsCollection": [
                          {
                            "name": "[variables('name_httpSetting')]",
                            "properties": {
                              "port": 80,
                              "protocol": "Http"
                            }
                          }
                        ],
                        "requestRoutingRules": [
                          {
                            "name": "HTTPRoutingRule",
                            "properties": {
                              "priority": 3,
                              "httpListener": {
                                "id": "[variables('ref_httpListener')]"
                              },
                              "backendAddressPool": {
                                "id": "[variables('ref_backendAddressPool')]"
                              },
                              "backendHttpSettings": {
                                "id": "[variables('ref_backendHttpSettings')]"
                              }
                            }
                          }
                        ],
                        "webApplicationFirewallConfiguration": {
                          "enabled": true,
                          "firewallMode": "Prevention",
                          "ruleSetType": "OWASP",
                          "ruleSetVersion": "3.0"
                        },
                        "enableHttp2": false,
                        "autoscaleConfiguration": {
                          "minCapacity": 2,
                          "maxCapacity": 3
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "appGatewayAlias": {
                      "type": "string",
                      "value": "[if(parameters('usePrivateIP'), parameters('staticPrivateFrontentIP'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))).dnsSettings.fqdn)]"
                    },
                    "appGatewayId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/applicationGateways', variables('name_appGateway'))]"
                    },
                    "appGatewayName": {
                      "type": "string",
                      "value": "[variables('name_appGateway')]"
                    },
                    "appGatewayURL": {
                      "type": "string",
                      "value": "[uri(format('http://{0}/', if(parameters('usePrivateIP'), parameters('staticPrivateFrontentIP'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))).dnsSettings.fqdn)), '')]"
                    },
                    "appGatewaySecuredURL": {
                      "type": "string",
                      "value": "[uri(format('https://{0}/', if(parameters('usePrivateIP'), parameters('staticPrivateFrontentIP'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPublicIPAddressName'))).dnsSettings.fqdn)), '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnet-application-gateway')]",
                "[resourceId('Microsoft.Resources/deployments', 'query-available-private-ip-for-app-gateway')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "pid-app-gateway-end-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidAppgwEnd')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "3360241215376299589"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2019-10-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.613.9944",
                              "templateHash": "6023100456016179368"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "This is an empty deployment"
                            }
                          },
                          "functions": [],
                          "resources": [],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "47ea43a0-95cf-52c7-aee8-7ee6106fc1bf"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "01288010-2672-5831-a66b-7b8b45cace1b"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "d7a9c78e-39d9-5a47-928d-8645ed86dafd"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "0cc86800-37f4-5191-9368-2953394309ec"
                    },
                    "dnsEnd": {
                      "type": "string",
                      "value": "754e16bc-4d81-5343-b99b-7532abd6587d"
                    },
                    "dnsStart": {
                      "type": "string",
                      "value": "64ae895c-feb3-529e-8435-5d2e49f94e09"
                    },
                    "lbEnd": {
                      "type": "string",
                      "value": "ce664543-77bd-515a-832e-107e32f99da9"
                    },
                    "lbStart": {
                      "type": "string",
                      "value": "44732bbc-04c4-5df7-a0c6-b9be9ec00ee6"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "2798165c-49fa-5701-b608-b80ed3986176"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "0793308f-de9d-5f0d-92f9-d9fc4b413b8b"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "2571f846-2f66-5c22-9fe6-38ecea7889ac"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "3e6acde5-9a62-5488-9fd4-87c46f4105f4"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "e6e33240-e5db-52fc-9154-7fc7b3b8b508"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4570a81a-3f3a-53d5-b178-7f985d9c5ecf"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('{0}1', variables('name_gatewayDeploymentPrefix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}2', variables('name_gatewayDeploymentPrefix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}3', variables('name_gatewayDeploymentPrefix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}4', variables('name_gatewayDeploymentPrefix')))]"
              ]
            }
          ],
          "outputs": {
            "appGatewayAlias": {
              "type": "string",
              "value": "[variables('ref_gatewayDeployment').outputs.appGatewayAlias]"
            },
            "appGatewayId": {
              "type": "string",
              "value": "[variables('ref_gatewayDeployment').outputs.appGatewayId]"
            },
            "appGatewayName": {
              "type": "string",
              "value": "[variables('ref_gatewayDeployment').outputs.appGatewayName]"
            },
            "appGatewayURL": {
              "type": "string",
              "value": "[uri(variables('ref_gatewayDeployment').outputs.appGatewayURL, '')]"
            },
            "appGatewaySecuredURL": {
              "type": "string",
              "value": "[uri(variables('ref_gatewayDeployment').outputs.appGatewaySecuredURL, '')]"
            },
            "vnetResourceGroupName": {
              "type": "string",
              "value": "[parameters('vnetRGNameForApplicationGateway')]"
            },
            "newOrExisting": {
              "type": "string",
              "value": "[parameters('newOrExistingVnetForApplicationGateway')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'appgateway-certificates-secrets-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'initialization')]",
        "[resourceId('Microsoft.Resources/deployments', 'uami-deployment')]"
      ]
    },
    {
      "condition": "[not(parameters('enableCustomSSL'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "setup-wls-cluster",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "_pidEnd": {
            "value": "[if(equals(reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2019-10-01').outputs.wlsAKSEnd.value, ''), variables('name_defaultPidDeployment'), reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2019-10-01').outputs.wlsAKSEnd.value)]"
          },
          "_pidStart": {
            "value": "[if(equals(reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2019-10-01').outputs.wlsAKSStart.value, ''), variables('name_defaultPidDeployment'), reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2019-10-01').outputs.wlsAKSStart.value)]"
          },
          "aciResourcePermissions": {
            "value": "[parameters('aciResourcePermissions')]"
          },
          "aciRetentionInDays": {
            "value": "[parameters('aciRetentionInDays')]"
          },
          "aciWorkspaceSku": {
            "value": "[parameters('aciWorkspaceSku')]"
          },
          "acrName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'pre-azure-resources-deployment'), '2019-10-01').outputs.acrName.value]"
          },
          "aksAgentPoolName": {
            "value": "[parameters('aksAgentPoolName')]"
          },
          "aksAgentPoolNodeCount": {
            "value": "[parameters('aksAgentPoolNodeCount')]"
          },
          "aksAgentPoolVMSize": {
            "value": "[parameters('aksAgentPoolVMSize')]"
          },
          "aksClusterNamePrefix": {
            "value": "[parameters('aksClusterNamePrefix')]"
          },
          "aksClusterRGName": {
            "value": "[parameters('aksClusterRGName')]"
          },
          "aksClusterName": {
            "value": "[parameters('aksClusterName')]"
          },
          "aksVersion": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'validate-parameters-and-fail-fast'), '2019-10-01').outputs.aksVersion.value]"
          },
          "appPackageUrls": {
            "value": "[parameters('appPackageUrls')]"
          },
          "appReplicas": {
            "value": "[parameters('appReplicas')]"
          },
          "azCliVersion": {
            "value": "[variables('const_azcliVersion')]"
          },
          "createAKSCluster": {
            "value": "[parameters('createAKSCluster')]"
          },
          "createStorageAccount": {
            "value": "[and(or(parameters('createAKSCluster'), not(and(not(parameters('createAKSCluster')), not(equals(reference(resourceId('Microsoft.Resources/deployments', 'query-existing-storage-account'), '2019-10-01').outputs.storageAccount.value, 'null'))))), variables('const_enablePV'))]"
          },
          "dbDriverLibrariesUrls": {
            "value": "[parameters('dbDriverLibrariesUrls')]"
          },
          "enableAzureMonitoring": {
            "value": "[parameters('enableAzureMonitoring')]"
          },
          "enableCustomSSL": {
            "value": "[parameters('enableCustomSSL')]"
          },
          "enableAdminT3Tunneling": {
            "value": "[parameters('enableAdminT3Tunneling')]"
          },
          "enableClusterT3Tunneling": {
            "value": "[parameters('enableClusterT3Tunneling')]"
          },
          "enablePV": {
            "value": "[variables('const_enablePV')]"
          },
          "identity": {
            "value": {
              "type": "UserAssigned",
              "userAssignedIdentities": {
                "[reference(resourceId('Microsoft.Resources/deployments', 'uami-deployment'), '2019-10-01').outputs.uamiIdForDeploymentScript.value]": {}
              }
            }
          },
          "isSSOSupportEntitled": {
            "value": "[parameters('isSSOSupportEntitled')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "managedServerPrefix": {
            "value": "[parameters('managedServerPrefix')]"
          },
          "ocrSSOPSW": {
            "value": "[parameters('ocrSSOPSW')]"
          },
          "ocrSSOUser": {
            "value": "[parameters('ocrSSOUser')]"
          },
          "storageAccountName": {
            "value": "[if(and(not(parameters('createAKSCluster')), not(equals(reference(resourceId('Microsoft.Resources/deployments', 'query-existing-storage-account'), '2019-10-01').outputs.storageAccount.value, 'null'))), reference(resourceId('Microsoft.Resources/deployments', 'query-existing-storage-account'), '2019-10-01').outputs.storageAccount.value, format('wls{0}', uniqueString(parameters('utcValue'))))]"
          },
          "t3ChannelAdminPort": {
            "value": "[parameters('t3ChannelAdminPort')]"
          },
          "t3ChannelClusterPort": {
            "value": "[parameters('t3ChannelClusterPort')]"
          },
          "wdtRuntimePassword": {
            "value": "[parameters('wdtRuntimePassword')]"
          },
          "userProvidedAcr": {
            "value": "[parameters('userProvidedAcr')]"
          },
          "userProvidedImagePath": {
            "value": "[parameters('userProvidedImagePath')]"
          },
          "useOracleImage": {
            "value": "[parameters('useOracleImage')]"
          },
          "wlsClusterSize": {
            "value": "[parameters('wlsClusterSize')]"
          },
          "wlsCPU": {
            "value": "[parameters('wlsCPU')]"
          },
          "wlsDomainName": {
            "value": "[parameters('wlsDomainName')]"
          },
          "wlsDomainUID": {
            "value": "[parameters('wlsDomainUID')]"
          },
          "wlsIdentityKeyStoreData": {
            "value": "[parameters('sslUploadedCustomIdentityKeyStoreData')]"
          },
          "wlsIdentityKeyStorePassphrase": {
            "value": "[parameters('sslUploadedCustomIdentityKeyStorePassphrase')]"
          },
          "wlsIdentityKeyStoreType": {
            "value": "[variables('const_defaultKeystoreType')]"
          },
          "wlsImageTag": {
            "value": "[parameters('wlsImageTag')]"
          },
          "wlsJavaOption": {
            "value": "[variables('const_wlsJavaOptions')]"
          },
          "wlsMemory": {
            "value": "[parameters('wlsMemory')]"
          },
          "wlsPassword": {
            "value": "[parameters('wlsPassword')]"
          },
          "wlsPrivateKeyAlias": {
            "value": "[parameters('sslUploadedPrivateKeyAlias')]"
          },
          "wlsPrivateKeyPassPhrase": {
            "value": "[parameters('sslUploadedPrivateKeyPassPhrase')]"
          },
          "wlsTrustKeyStoreData": {
            "value": "[parameters('sslUploadedCustomTrustKeyStoreData')]"
          },
          "wlsTrustKeyStorePassPhrase": {
            "value": "[parameters('sslUploadedCustomTrustKeyStorePassPhrase')]"
          },
          "wlsTrustKeyStoreType": {
            "value": "[variables('const_defaultKeystoreType')]"
          },
          "wlsUserName": {
            "value": "[parameters('wlsUserName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.613.9944",
              "templateHash": "13665120537298463198"
            }
          },
          "parameters": {
            "_artifactsLocation": {
              "type": "string",
              "defaultValue": "[deployment().properties.templateLink.uri]"
            },
            "_artifactsLocationSasToken": {
              "type": "secureString",
              "defaultValue": ""
            },
            "_pidEnd": {
              "type": "string",
              "defaultValue": "pid-wls-end"
            },
            "_pidStart": {
              "type": "string",
              "defaultValue": "pid-wls-start"
            },
            "aciResourcePermissions": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "true to use resource or workspace permissions. false to require workspace permissions."
              }
            },
            "aciRetentionInDays": {
              "type": "int",
              "defaultValue": 120,
              "metadata": {
                "description": "Number of days to retain data in Azure Monitor workspace."
              }
            },
            "aciWorkspaceSku": {
              "type": "string",
              "defaultValue": "pergb2018",
              "metadata": {
                "description": "Pricing tier: PerGB2018 or legacy tiers (Free, Standalone, PerNode, Standard or Premium) which are not available to all customers."
              }
            },
            "acrName": {
              "type": "string",
              "defaultValue": ""
            },
            "aksAgentPoolName": {
              "type": "string",
              "defaultValue": "agentpool",
              "metadata": {
                "description": "The name for this node pool. Node pool must contain only lowercase letters and numbers. For Linux node pools the name cannot be longer than 12 characters."
              },
              "minLength": 1,
              "maxLength": 12
            },
            "aksAgentPoolNodeCount": {
              "type": "int",
              "defaultValue": 3,
              "metadata": {
                "description": "The number of nodes that should be created along with the cluster. You will be able to resize the cluster later."
              },
              "minValue": 1,
              "maxValue": 10000
            },
            "aksAgentPoolVMSize": {
              "type": "string",
              "defaultValue": "Standard_DS2_v2",
              "metadata": {
                "description": "The size of the virtual machines that will form the nodes in the cluster. This cannot be changed after creating the cluster"
              }
            },
            "aksClusterNamePrefix": {
              "type": "string",
              "defaultValue": "wlsonaks",
              "metadata": {
                "description": "Prefix for cluster name. Only The name can contain only letters, numbers, underscores and hyphens. The name must start with letter or number."
              }
            },
            "aksClusterRGName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Resource group name of an existing AKS cluster."
              }
            },
            "aksClusterName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of an existing AKS cluster."
              }
            },
            "aksVersion": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "The AKS version."
              }
            },
            "appPackageUrls": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Urls of Java EE application packages."
              }
            },
            "appReplicas": {
              "type": "int",
              "defaultValue": 2,
              "metadata": {
                "description": "The number of managed server to start."
              }
            },
            "azCliVersion": {
              "type": "string",
              "defaultValue": ""
            },
            "createAKSCluster": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "true to create a new AKS cluster."
              }
            },
            "createStorageAccount": {
              "type": "bool",
              "defaultValue": false
            },
            "dbDriverLibrariesUrls": {
              "type": "array",
              "defaultValue": []
            },
            "enableAzureMonitoring": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "In addition to the CPU and memory metrics included in AKS by default, you can enable Container Insights for more comprehensive data on the overall performance and health of your cluster. Billing is based on data ingestion and retention settings."
              }
            },
            "enableCustomSSL": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "true to create persistent volume using file share."
              }
            },
            "enableAdminT3Tunneling": {
              "type": "bool",
              "defaultValue": false
            },
            "enableClusterT3Tunneling": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePV": {
              "type": "bool",
              "defaultValue": false
            },
            "identity": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "An user assigned managed identity. Make sure the identity has permission to create/update/delete/list Azure resources."
              }
            },
            "isSSOSupportEntitled": {
              "type": "bool"
            },
            "location": {
              "type": "string"
            },
            "managedServerPrefix": {
              "type": "string",
              "defaultValue": "managed-server",
              "metadata": {
                "description": "Name prefix of managed server."
              }
            },
            "ocrSSOPSW": {
              "type": "secureString",
              "metadata": {
                "description": "Password of Oracle SSO account."
              }
            },
            "ocrSSOUser": {
              "type": "string",
              "metadata": {
                "description": "User name of Oracle SSO account."
              }
            },
            "storageAccountName": {
              "type": "string",
              "defaultValue": "stg-contoso"
            },
            "t3ChannelAdminPort": {
              "type": "int",
              "defaultValue": 7005
            },
            "t3ChannelClusterPort": {
              "type": "int",
              "defaultValue": 8011
            },
            "userProvidedAcr": {
              "type": "string",
              "defaultValue": "null"
            },
            "userProvidedImagePath": {
              "type": "string",
              "defaultValue": "null"
            },
            "useOracleImage": {
              "type": "bool",
              "defaultValue": true
            },
            "wdtRuntimePassword": {
              "type": "secureString",
              "metadata": {
                "description": "Password for model WebLogic Deploy Tooling runtime encrytion."
              }
            },
            "wlsClusterSize": {
              "type": "int",
              "defaultValue": 5,
              "metadata": {
                "description": "Maximum cluster size."
              }
            },
            "wlsCPU": {
              "type": "string",
              "defaultValue": "200m",
              "metadata": {
                "description": "Requests for CPU resources for admin server and managed server."
              }
            },
            "wlsDomainName": {
              "type": "string",
              "defaultValue": "domain1",
              "metadata": {
                "description": "Name of WebLogic domain to create."
              }
            },
            "wlsDomainUID": {
              "type": "string",
              "defaultValue": "sample-domain1",
              "metadata": {
                "description": "UID of WebLogic domain, used in WebLogic Operator."
              }
            },
            "wlsIdentityKeyStoreData": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsIdentityKeyStorePassphrase": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsIdentityKeyStoreType": {
              "type": "string",
              "defaultValue": "PKCS12",
              "allowedValues": [
                "JKS",
                "PKCS12"
              ]
            },
            "wlsImageTag": {
              "type": "string",
              "defaultValue": "12.2.1.4",
              "metadata": {
                "description": "Docker tag that comes after \"container-registry.oracle.com/middleware/weblogic:\""
              }
            },
            "wlsJavaOption": {
              "type": "string",
              "defaultValue": "null"
            },
            "wlsMemory": {
              "type": "string",
              "defaultValue": "1.5Gi",
              "metadata": {
                "description": "Memory requests for admin server and managed server."
              }
            },
            "wlsPassword": {
              "type": "secureString"
            },
            "wlsPrivateKeyAlias": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsPrivateKeyPassPhrase": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsTrustKeyStoreData": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsTrustKeyStorePassPhrase": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsTrustKeyStoreType": {
              "type": "string",
              "defaultValue": "PKCS12",
              "allowedValues": [
                "JKS",
                "PKCS12"
              ]
            },
            "wlsUserName": {
              "type": "string",
              "defaultValue": "weblogic",
              "metadata": {
                "description": "User name for WebLogic Administrator."
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "wls-aks-start-pid-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidStart')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "3360241215376299589"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2019-10-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.613.9944",
                              "templateHash": "6023100456016179368"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "This is an empty deployment"
                            }
                          },
                          "functions": [],
                          "resources": [],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "47ea43a0-95cf-52c7-aee8-7ee6106fc1bf"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "01288010-2672-5831-a66b-7b8b45cace1b"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "d7a9c78e-39d9-5a47-928d-8645ed86dafd"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "0cc86800-37f4-5191-9368-2953394309ec"
                    },
                    "dnsEnd": {
                      "type": "string",
                      "value": "754e16bc-4d81-5343-b99b-7532abd6587d"
                    },
                    "dnsStart": {
                      "type": "string",
                      "value": "64ae895c-feb3-529e-8435-5d2e49f94e09"
                    },
                    "lbEnd": {
                      "type": "string",
                      "value": "ce664543-77bd-515a-832e-107e32f99da9"
                    },
                    "lbStart": {
                      "type": "string",
                      "value": "44732bbc-04c4-5df7-a0c6-b9be9ec00ee6"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "2798165c-49fa-5701-b608-b80ed3986176"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "0793308f-de9d-5f0d-92f9-d9fc4b413b8b"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "2571f846-2f66-5c22-9fe6-38ecea7889ac"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "3e6acde5-9a62-5488-9fd4-87c46f4105f4"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "e6e33240-e5db-52fc-9154-7fc7b3b8b508"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4570a81a-3f3a-53d5-b178-7f985d9c5ecf"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('createAKSCluster')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "aks-cluster-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aciResourcePermissions": {
                    "value": "[parameters('aciResourcePermissions')]"
                  },
                  "aciRetentionInDays": {
                    "value": "[parameters('aciRetentionInDays')]"
                  },
                  "aciWorkspaceSku": {
                    "value": "[parameters('aciWorkspaceSku')]"
                  },
                  "aksAgentPoolName": {
                    "value": "[parameters('aksAgentPoolName')]"
                  },
                  "aksAgentPoolNodeCount": {
                    "value": "[parameters('aksAgentPoolNodeCount')]"
                  },
                  "aksAgentPoolVMSize": {
                    "value": "[parameters('aksAgentPoolVMSize')]"
                  },
                  "aksClusterNamePrefix": {
                    "value": "[parameters('aksClusterNamePrefix')]"
                  },
                  "aksVersion": {
                    "value": "[parameters('aksVersion')]"
                  },
                  "enableAzureMonitoring": {
                    "value": "[parameters('enableAzureMonitoring')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "5986953159158882973"
                    }
                  },
                  "parameters": {
                    "aciResourcePermissions": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "true to use resource or workspace permissions. false to require workspace permissions."
                      }
                    },
                    "aciRetentionInDays": {
                      "type": "int",
                      "defaultValue": 120,
                      "metadata": {
                        "description": "Number of days to retain data in Azure Monitor workspace."
                      }
                    },
                    "aciWorkspaceSku": {
                      "type": "string",
                      "defaultValue": "pergb2018",
                      "metadata": {
                        "description": "Pricing tier: PerGB2018 or legacy tiers (Free, Standalone, PerNode, Standard or Premium) which are not available to all customers."
                      }
                    },
                    "aksAgentPoolName": {
                      "type": "string",
                      "defaultValue": "agentpool",
                      "metadata": {
                        "description": "The name for this node pool. Node pool must contain only lowercase letters and numbers. For Linux node pools the name cannot be longer than 12 characters."
                      },
                      "minLength": 1,
                      "maxLength": 12
                    },
                    "aksAgentPoolNodeCount": {
                      "type": "int",
                      "defaultValue": 3,
                      "metadata": {
                        "description": "The number of nodes that should be created along with the cluster. You will be able to resize the cluster later."
                      },
                      "minValue": 1,
                      "maxValue": 10000
                    },
                    "aksAgentPoolVMSize": {
                      "type": "string",
                      "defaultValue": "Standard_DS2_v2",
                      "metadata": {
                        "description": "The size of the virtual machines that will form the nodes in the cluster. This cannot be changed after creating the cluster"
                      }
                    },
                    "aksClusterNamePrefix": {
                      "type": "string",
                      "defaultValue": "wlsonaks",
                      "metadata": {
                        "description": "Prefix for cluster name. Only The name can contain only letters, numbers, underscores and hyphens. The name must start with letter or number."
                      }
                    },
                    "aksVersion": {
                      "type": "string",
                      "defaultValue": "default"
                    },
                    "enableAzureMonitoring": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "In addition to the CPU and memory metrics included in AKS by default, you can enable Container Insights for more comprehensive data on the overall performance and health of your cluster. Billing is based on data ingestion and retention settings."
                      }
                    },
                    "location": {
                      "type": "string"
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_aksAgentPoolOSDiskSizeGB": 128,
                    "const_aksAgentPoolMaxPods": 110,
                    "const_aksAvailabilityZones": [
                      "1",
                      "2",
                      "3"
                    ],
                    "name_aciWorkspace": "[format('Workspace-{0}-{1}', guid(parameters('utcValue')), parameters('location'))]",
                    "name_aksClusterNameForSV": "[format('{0}{1}', parameters('aksClusterNamePrefix'), uniqueString(parameters('utcValue')))]",
                    "obj_aciDisableOmsAgent": {
                      "enabled": false
                    },
                    "obj_aciEnableOmsAgent": {
                      "enabled": true,
                      "config": {
                        "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('name_aciWorkspace'))]"
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableAzureMonitoring')]",
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-06-01",
                      "name": "[variables('name_aciWorkspace')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "sku": {
                          "name": "[parameters('aciWorkspaceSku')]"
                        },
                        "retentionInDays": "[parameters('aciRetentionInDays')]",
                        "features": {
                          "searchVersion": 1,
                          "legacy": 0,
                          "enableLogAccessUsingOnlyResourcePermissions": "[parameters('aciResourcePermissions')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.ContainerService/managedClusters",
                      "apiVersion": "2021-02-01",
                      "name": "[variables('name_aksClusterNameForSV')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "kubernetesVersion": "[parameters('aksVersion')]",
                        "dnsPrefix": "[format('{0}-dns', variables('name_aksClusterNameForSV'))]",
                        "agentPoolProfiles": [
                          {
                            "name": "[parameters('aksAgentPoolName')]",
                            "count": "[parameters('aksAgentPoolNodeCount')]",
                            "vmSize": "[parameters('aksAgentPoolVMSize')]",
                            "osDiskSizeGB": "[variables('const_aksAgentPoolOSDiskSizeGB')]",
                            "osDiskType": "Managed",
                            "kubeletDiskType": "OS",
                            "maxPods": "[variables('const_aksAgentPoolMaxPods')]",
                            "type": "VirtualMachineScaleSets",
                            "availabilityZones": "[variables('const_aksAvailabilityZones')]",
                            "mode": "System",
                            "osType": "Linux"
                          }
                        ],
                        "addonProfiles": {
                          "KubeDashboard": {
                            "enabled": false
                          },
                          "azurepolicy": {
                            "enabled": false
                          },
                          "httpApplicationRouting": {
                            "enabled": false
                          },
                          "omsAgent": "[if(parameters('enableAzureMonitoring'), variables('obj_aciEnableOmsAgent'), variables('obj_aciDisableOmsAgent'))]"
                        },
                        "enableRBAC": true,
                        "networkProfile": {
                          "networkPlugin": "kubenet",
                          "loadBalancerSku": "standard"
                        }
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('name_aciWorkspace'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "aksClusterName": {
                      "type": "string",
                      "value": "[variables('name_aksClusterNameForSV')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'wls-aks-start-pid-deployment')]"
              ]
            },
            {
              "condition": "[parameters('createStorageAccount')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "storage-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "1250147291009083074"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string",
                      "defaultValue": "stg-contoso"
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_shareQuota": 5120,
                    "const_sku": "Standard_LRS",
                    "name_fileShare": "weblogic"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-02-01",
                      "name": "[parameters('storageAccountName')]",
                      "location": "[parameters('location')]",
                      "kind": "StorageV2",
                      "sku": {
                        "name": "[variables('const_sku')]",
                        "tier": "Standard"
                      },
                      "properties": {
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Allow"
                        },
                        "supportsHttpsTrafficOnly": true,
                        "encryption": {
                          "services": {
                            "file": {
                              "keyType": "Account",
                              "enabled": true
                            }
                          },
                          "keySource": "Microsoft.Storage"
                        },
                        "accessTier": "Hot"
                      },
                      "tags": {
                        "managed-by-azure-weblogic": "[parameters('utcValue')]"
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/default/{1}', parameters('storageAccountName'), variables('name_fileShare'))]",
                      "properties": {
                        "accessTier": "TransactionOptimized",
                        "shareQuota": "[variables('const_shareQuota')]",
                        "enabledProtocols": "SMB"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'wls-aks-start-pid-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "wls-domain-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "_artifactsLocation": {
                    "value": "[parameters('_artifactsLocation')]"
                  },
                  "_artifactsLocationSasToken": {
                    "value": "[parameters('_artifactsLocationSasToken')]"
                  },
                  "aksClusterRGName": {
                    "value": "[if(parameters('createAKSCluster'), resourceGroup().name, parameters('aksClusterRGName'))]"
                  },
                  "aksClusterName": {
                    "value": "[if(parameters('createAKSCluster'), reference(resourceId('Microsoft.Resources/deployments', 'aks-cluster-deployment'), '2019-10-01').outputs.aksClusterName.value, parameters('aksClusterName'))]"
                  },
                  "acrName": {
                    "value": "[if(parameters('useOracleImage'), parameters('acrName'), parameters('userProvidedAcr'))]"
                  },
                  "appPackageUrls": {
                    "value": "[parameters('appPackageUrls')]"
                  },
                  "appReplicas": {
                    "value": "[parameters('appReplicas')]"
                  },
                  "azCliVersion": {
                    "value": "[parameters('azCliVersion')]"
                  },
                  "dbDriverLibrariesUrls": {
                    "value": "[parameters('dbDriverLibrariesUrls')]"
                  },
                  "enableCustomSSL": {
                    "value": "[parameters('enableCustomSSL')]"
                  },
                  "enableAdminT3Tunneling": {
                    "value": "[parameters('enableAdminT3Tunneling')]"
                  },
                  "enableClusterT3Tunneling": {
                    "value": "[parameters('enableClusterT3Tunneling')]"
                  },
                  "enablePV": {
                    "value": "[parameters('enablePV')]"
                  },
                  "identity": {
                    "value": "[parameters('identity')]"
                  },
                  "isSSOSupportEntitled": {
                    "value": "[parameters('isSSOSupportEntitled')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "managedServerPrefix": {
                    "value": "[parameters('managedServerPrefix')]"
                  },
                  "ocrSSOUser": {
                    "value": "[parameters('ocrSSOUser')]"
                  },
                  "ocrSSOPSW": {
                    "value": "[parameters('ocrSSOPSW')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "t3ChannelAdminPort": {
                    "value": "[parameters('t3ChannelAdminPort')]"
                  },
                  "t3ChannelClusterPort": {
                    "value": "[parameters('t3ChannelClusterPort')]"
                  },
                  "userProvidedImagePath": {
                    "value": "[parameters('userProvidedImagePath')]"
                  },
                  "useOracleImage": {
                    "value": "[parameters('useOracleImage')]"
                  },
                  "wdtRuntimePassword": {
                    "value": "[parameters('wdtRuntimePassword')]"
                  },
                  "wlsClusterSize": {
                    "value": "[parameters('wlsClusterSize')]"
                  },
                  "wlsCPU": {
                    "value": "[parameters('wlsCPU')]"
                  },
                  "wlsDomainName": {
                    "value": "[parameters('wlsDomainName')]"
                  },
                  "wlsDomainUID": {
                    "value": "[parameters('wlsDomainUID')]"
                  },
                  "wlsIdentityKeyStoreData": {
                    "value": "[parameters('wlsIdentityKeyStoreData')]"
                  },
                  "wlsIdentityKeyStorePassphrase": {
                    "value": "[parameters('wlsIdentityKeyStorePassphrase')]"
                  },
                  "wlsIdentityKeyStoreType": {
                    "value": "[parameters('wlsIdentityKeyStoreType')]"
                  },
                  "wlsImageTag": {
                    "value": "[parameters('wlsImageTag')]"
                  },
                  "wlsJavaOption": {
                    "value": "[parameters('wlsJavaOption')]"
                  },
                  "wlsMemory": {
                    "value": "[parameters('wlsMemory')]"
                  },
                  "wlsPassword": {
                    "value": "[parameters('wlsPassword')]"
                  },
                  "wlsPrivateKeyAlias": {
                    "value": "[parameters('wlsPrivateKeyAlias')]"
                  },
                  "wlsPrivateKeyPassPhrase": {
                    "value": "[parameters('wlsPrivateKeyPassPhrase')]"
                  },
                  "wlsTrustKeyStoreData": {
                    "value": "[parameters('wlsTrustKeyStoreData')]"
                  },
                  "wlsTrustKeyStorePassPhrase": {
                    "value": "[parameters('wlsTrustKeyStorePassPhrase')]"
                  },
                  "wlsTrustKeyStoreType": {
                    "value": "[parameters('wlsTrustKeyStoreType')]"
                  },
                  "wlsUserName": {
                    "value": "[parameters('wlsUserName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "10652588750917722752"
                    }
                  },
                  "parameters": {
                    "_artifactsLocation": {
                      "type": "string",
                      "defaultValue": "[deployment().properties.templateLink.uri]"
                    },
                    "_artifactsLocationSasToken": {
                      "type": "secureString",
                      "defaultValue": ""
                    },
                    "aksClusterRGName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "aksClusterName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "acrName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "appPackageUrls": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "appReplicas": {
                      "type": "int",
                      "defaultValue": 2
                    },
                    "azCliVersion": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "dbDriverLibrariesUrls": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "enableCustomSSL": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableAdminT3Tunneling": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableClusterT3Tunneling": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enablePV": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "identity": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "isSSOSupportEntitled": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string"
                    },
                    "managedServerPrefix": {
                      "type": "string",
                      "defaultValue": "managed-server"
                    },
                    "ocrSSOPSW": {
                      "type": "secureString"
                    },
                    "ocrSSOUser": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string",
                      "defaultValue": "null"
                    },
                    "t3ChannelAdminPort": {
                      "type": "int",
                      "defaultValue": 7005
                    },
                    "t3ChannelClusterPort": {
                      "type": "int",
                      "defaultValue": 8011
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    },
                    "userProvidedImagePath": {
                      "type": "string",
                      "defaultValue": "null"
                    },
                    "useOracleImage": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "wdtRuntimePassword": {
                      "type": "secureString"
                    },
                    "wlsClusterSize": {
                      "type": "int",
                      "defaultValue": 5
                    },
                    "wlsCPU": {
                      "type": "string",
                      "defaultValue": "200m"
                    },
                    "wlsDomainName": {
                      "type": "string",
                      "defaultValue": "domain1"
                    },
                    "wlsDomainUID": {
                      "type": "string",
                      "defaultValue": "sample-domain1"
                    },
                    "wlsIdentityKeyStoreData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "wlsIdentityKeyStorePassphrase": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "wlsIdentityKeyStoreType": {
                      "type": "string",
                      "defaultValue": "PKCS12",
                      "allowedValues": [
                        "JKS",
                        "PKCS12"
                      ]
                    },
                    "wlsImageTag": {
                      "type": "string",
                      "defaultValue": "12.2.1.4"
                    },
                    "wlsJavaOption": {
                      "type": "string",
                      "defaultValue": "null"
                    },
                    "wlsMemory": {
                      "type": "string",
                      "defaultValue": "1.5Gi"
                    },
                    "wlsPassword": {
                      "type": "secureString"
                    },
                    "wlsPrivateKeyAlias": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "wlsPrivateKeyPassPhrase": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "wlsTrustKeyStoreData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "wlsTrustKeyStorePassPhrase": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "wlsTrustKeyStoreType": {
                      "type": "string",
                      "defaultValue": "PKCS12",
                      "allowedValues": [
                        "JKS",
                        "PKCS12"
                      ]
                    },
                    "wlsUserName": {
                      "type": "string",
                      "defaultValue": "weblogic"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_arguments": "[format('{0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16} {17} {18} {19} {20} {21} {22} {23} {24} {25} {26} {27} {28} {29} {30} {31} {32} {33} \"{34}\" {35} {36}', parameters('ocrSSOUser'), parameters('ocrSSOPSW'), parameters('aksClusterRGName'), parameters('aksClusterName'), parameters('wlsImageTag'), parameters('acrName'), parameters('wlsDomainName'), parameters('wlsDomainUID'), parameters('wlsUserName'), parameters('wlsPassword'), parameters('wdtRuntimePassword'), parameters('wlsCPU'), parameters('wlsMemory'), parameters('managedServerPrefix'), parameters('appReplicas'), string(parameters('appPackageUrls')), resourceGroup().name, variables('const_scriptLocation'), parameters('storageAccountName'), parameters('wlsClusterSize'), parameters('enableCustomSSL'), parameters('wlsIdentityKeyStoreData'), parameters('wlsIdentityKeyStorePassphrase'), parameters('wlsIdentityKeyStoreType'), parameters('wlsPrivateKeyAlias'), parameters('wlsPrivateKeyPassPhrase'), parameters('wlsTrustKeyStoreData'), parameters('wlsTrustKeyStorePassPhrase'), parameters('wlsTrustKeyStoreType'), parameters('enablePV'), parameters('enableAdminT3Tunneling'), parameters('enableClusterT3Tunneling'), parameters('t3ChannelAdminPort'), parameters('t3ChannelClusterPort'), parameters('wlsJavaOption'), parameters('userProvidedImagePath'), parameters('useOracleImage'))]",
                    "const_buildDockerImageScript": "createVMAndBuildImage.sh",
                    "const_commonScript": "common.sh",
                    "const_invokeSetUpDomainScript": "invokeSetupWLSDomain.sh",
                    "const_pvTempalte": "pv.yaml.template",
                    "const_pvcTempalte": "pvc.yaml.template",
                    "const_scriptLocation": "[uri(parameters('_artifactsLocation'), 'scripts/')]",
                    "const_genDomainConfigScript": "genDomainConfig.sh",
                    "const_setUpDomainScript": "setupWLSDomain.sh",
                    "const_updateDomainConfigScript": "updateDomainConfig.sh",
                    "const_utilityScript": "utility.sh"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "ds-wls-cluster-creation",
                      "location": "[parameters('location')]",
                      "kind": "AzureCLI",
                      "identity": "[parameters('identity')]",
                      "properties": {
                        "azCliVersion": "[parameters('azCliVersion')]",
                        "arguments": "[variables('const_arguments')]",
                        "environmentVariables": [
                          {
                            "name": "URL_3RD_DATASOURCE",
                            "value": "[string(parameters('dbDriverLibrariesUrls'))]"
                          },
                          {
                            "name": "ORACLE_ACCOUNT_ENTITLED",
                            "value": "[string(parameters('isSSOSupportEntitled'))]"
                          }
                        ],
                        "primaryScriptUri": "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_invokeSetUpDomainScript'), parameters('_artifactsLocationSasToken')))]",
                        "supportingScriptUris": [
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_setUpDomainScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_genDomainConfigScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_utilityScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_pvTempalte'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_pvcTempalte'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_commonScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_buildDockerImageScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_updateDomainConfigScript'), parameters('_artifactsLocationSasToken')))]"
                        ],
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D",
                        "forceUpdateTag": "[parameters('utcValue')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'aks-cluster-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'storage-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "wls-aks-end-pid-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidEnd')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "3360241215376299589"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2019-10-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.613.9944",
                              "templateHash": "6023100456016179368"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "This is an empty deployment"
                            }
                          },
                          "functions": [],
                          "resources": [],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "47ea43a0-95cf-52c7-aee8-7ee6106fc1bf"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "01288010-2672-5831-a66b-7b8b45cace1b"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "d7a9c78e-39d9-5a47-928d-8645ed86dafd"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "0cc86800-37f4-5191-9368-2953394309ec"
                    },
                    "dnsEnd": {
                      "type": "string",
                      "value": "754e16bc-4d81-5343-b99b-7532abd6587d"
                    },
                    "dnsStart": {
                      "type": "string",
                      "value": "64ae895c-feb3-529e-8435-5d2e49f94e09"
                    },
                    "lbEnd": {
                      "type": "string",
                      "value": "ce664543-77bd-515a-832e-107e32f99da9"
                    },
                    "lbStart": {
                      "type": "string",
                      "value": "44732bbc-04c4-5df7-a0c6-b9be9ec00ee6"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "2798165c-49fa-5701-b608-b80ed3986176"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "0793308f-de9d-5f0d-92f9-d9fc4b413b8b"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "2571f846-2f66-5c22-9fe6-38ecea7889ac"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "3e6acde5-9a62-5488-9fd4-87c46f4105f4"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "e6e33240-e5db-52fc-9154-7fc7b3b8b508"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4570a81a-3f3a-53d5-b178-7f985d9c5ecf"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'wls-domain-deployment')]"
              ]
            }
          ],
          "outputs": {
            "aksClusterName": {
              "type": "string",
              "value": "[if(parameters('createAKSCluster'), reference(resourceId('Microsoft.Resources/deployments', 'aks-cluster-deployment'), '2019-10-01').outputs.aksClusterName.value, parameters('aksClusterName'))]"
            },
            "aksClusterRGName": {
              "type": "string",
              "value": "[if(parameters('createAKSCluster'), resourceGroup().name, parameters('aksClusterRGName'))]"
            },
            "adminServerEndPoint": {
              "type": "string",
              "value": "[format('http://{0}-admin-server.{0}-ns.svc.cluster.local:7001/console', parameters('wlsDomainUID'))]"
            },
            "adminServerT3InternalEndPoint": {
              "type": "string",
              "value": "[if(parameters('enableAdminT3Tunneling'), format('{0}://{1}-admin-server.{1}-ns.svc.cluster.local:{2}', if(parameters('enableCustomSSL'), 't3s', 't3'), parameters('wlsDomainUID'), parameters('t3ChannelAdminPort')), '')]"
            },
            "clusterEndPoint": {
              "type": "string",
              "value": "[format('http://{0}-cluster-cluster-1.{0}-ns.svc.cluster.local:8001/', parameters('wlsDomainUID'))]"
            },
            "clusterT3InternalEndPoint": {
              "type": "string",
              "value": "[if(parameters('enableClusterT3Tunneling'), format('{0}://{1}-cluster-cluster-1.{1}-ns.svc.cluster.local:{2}', if(parameters('enableCustomSSL'), 't3s', 't3'), parameters('wlsDomainUID'), parameters('t3ChannelClusterPort')), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'initialization')]",
        "[resourceId('Microsoft.Resources/deployments', 'pre-azure-resources-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'query-existing-storage-account')]",
        "[resourceId('Microsoft.Resources/deployments', 'uami-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'validate-parameters-and-fail-fast')]"
      ]
    },
    {
      "condition": "[parameters('enableCustomSSL')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "setup-wls-cluster-with-custom-ssl-enabled",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "_pidEnd": {
            "value": "[if(equals(reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2019-10-01').outputs.wlsAKSEnd.value, ''), variables('name_defaultPidDeployment'), reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2019-10-01').outputs.wlsAKSEnd.value)]"
          },
          "_pidStart": {
            "value": "[if(equals(reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2019-10-01').outputs.wlsAKSStart.value, ''), variables('name_defaultPidDeployment'), reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2019-10-01').outputs.wlsAKSStart.value)]"
          },
          "aciResourcePermissions": {
            "value": "[parameters('aciResourcePermissions')]"
          },
          "aciRetentionInDays": {
            "value": "[parameters('aciRetentionInDays')]"
          },
          "aciWorkspaceSku": {
            "value": "[parameters('aciWorkspaceSku')]"
          },
          "acrName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'pre-azure-resources-deployment'), '2019-10-01').outputs.acrName.value]"
          },
          "aksAgentPoolName": {
            "value": "[parameters('aksAgentPoolName')]"
          },
          "aksAgentPoolNodeCount": {
            "value": "[parameters('aksAgentPoolNodeCount')]"
          },
          "aksAgentPoolVMSize": {
            "value": "[parameters('aksAgentPoolVMSize')]"
          },
          "aksClusterNamePrefix": {
            "value": "[parameters('aksClusterNamePrefix')]"
          },
          "aksClusterRGName": {
            "value": "[parameters('aksClusterRGName')]"
          },
          "aksClusterName": {
            "value": "[parameters('aksClusterName')]"
          },
          "aksVersion": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'validate-parameters-and-fail-fast'), '2019-10-01').outputs.aksVersion.value]"
          },
          "appPackageUrls": {
            "value": "[parameters('appPackageUrls')]"
          },
          "appReplicas": {
            "value": "[parameters('appReplicas')]"
          },
          "azCliVersion": {
            "value": "[variables('const_azcliVersion')]"
          },
          "createAKSCluster": {
            "value": "[parameters('createAKSCluster')]"
          },
          "createStorageAccount": {
            "value": "[and(or(parameters('createAKSCluster'), not(and(not(parameters('createAKSCluster')), not(equals(reference(resourceId('Microsoft.Resources/deployments', 'query-existing-storage-account'), '2019-10-01').outputs.storageAccount.value, 'null'))))), variables('const_enablePV'))]"
          },
          "dbDriverLibrariesUrls": {
            "value": "[parameters('dbDriverLibrariesUrls')]"
          },
          "enableAzureMonitoring": {
            "value": "[parameters('enableAzureMonitoring')]"
          },
          "enableCustomSSL": {
            "value": "[parameters('enableCustomSSL')]"
          },
          "enableAdminT3Tunneling": {
            "value": "[parameters('enableAdminT3Tunneling')]"
          },
          "enableClusterT3Tunneling": {
            "value": "[parameters('enableClusterT3Tunneling')]"
          },
          "enablePV": {
            "value": "[variables('const_enablePV')]"
          },
          "identity": {
            "value": {
              "type": "UserAssigned",
              "userAssignedIdentities": {
                "[reference(resourceId('Microsoft.Resources/deployments', 'uami-deployment'), '2019-10-01').outputs.uamiIdForDeploymentScript.value]": {}
              }
            }
          },
          "isSSOSupportEntitled": {
            "value": "[parameters('isSSOSupportEntitled')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "managedServerPrefix": {
            "value": "[parameters('managedServerPrefix')]"
          },
          "ocrSSOPSW": {
            "value": "[parameters('ocrSSOPSW')]"
          },
          "ocrSSOUser": {
            "value": "[parameters('ocrSSOUser')]"
          },
          "storageAccountName": {
            "value": "[if(and(not(parameters('createAKSCluster')), not(equals(reference(resourceId('Microsoft.Resources/deployments', 'query-existing-storage-account'), '2019-10-01').outputs.storageAccount.value, 'null'))), reference(resourceId('Microsoft.Resources/deployments', 'query-existing-storage-account'), '2019-10-01').outputs.storageAccount.value, format('wls{0}', uniqueString(parameters('utcValue'))))]"
          },
          "t3ChannelAdminPort": {
            "value": "[parameters('t3ChannelAdminPort')]"
          },
          "t3ChannelClusterPort": {
            "value": "[parameters('t3ChannelClusterPort')]"
          },
          "userProvidedAcr": {
            "value": "[parameters('userProvidedAcr')]"
          },
          "userProvidedImagePath": {
            "value": "[parameters('userProvidedImagePath')]"
          },
          "useOracleImage": {
            "value": "[parameters('useOracleImage')]"
          },
          "wdtRuntimePassword": {
            "value": "[parameters('wdtRuntimePassword')]"
          },
          "wlsClusterSize": {
            "value": "[parameters('wlsClusterSize')]"
          },
          "wlsCPU": {
            "value": "[parameters('wlsCPU')]"
          },
          "wlsDomainName": {
            "value": "[parameters('wlsDomainName')]"
          },
          "wlsDomainUID": {
            "value": "[parameters('wlsDomainUID')]"
          },
          "wlsIdentityKeyStoreData": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('name_rgKeyvaultForWLSSSL')), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultName'), variables('name_keyVaultName')))]"
              },
              "secretName": "[variables('name_identityKeyStoreDataSecret')]"
            }
          },
          "wlsIdentityKeyStorePassphrase": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('name_rgKeyvaultForWLSSSL')), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultName'), variables('name_keyVaultName')))]"
              },
              "secretName": "[variables('name_identityKeyStorePswSecret')]"
            }
          },
          "wlsIdentityKeyStoreType": {
            "value": "[variables('const_identityKeyStoreType')]"
          },
          "wlsImageTag": {
            "value": "[parameters('wlsImageTag')]"
          },
          "wlsJavaOption": {
            "value": "[variables('const_wlsJavaOptions')]"
          },
          "wlsMemory": {
            "value": "[parameters('wlsMemory')]"
          },
          "wlsPassword": {
            "value": "[parameters('wlsPassword')]"
          },
          "wlsPrivateKeyAlias": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('name_rgKeyvaultForWLSSSL')), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultName'), variables('name_keyVaultName')))]"
              },
              "secretName": "[variables('name_privateKeyAliasSecret')]"
            }
          },
          "wlsPrivateKeyPassPhrase": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('name_rgKeyvaultForWLSSSL')), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultName'), variables('name_keyVaultName')))]"
              },
              "secretName": "[variables('name_privateKeyPswSecret')]"
            }
          },
          "wlsTrustKeyStoreData": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('name_rgKeyvaultForWLSSSL')), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultName'), variables('name_keyVaultName')))]"
              },
              "secretName": "[variables('name_trustKeyStoreDataSecret')]"
            }
          },
          "wlsTrustKeyStorePassPhrase": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('name_rgKeyvaultForWLSSSL')), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_wlsSSLCertOptionKeyVault')), parameters('sslKeyVaultName'), variables('name_keyVaultName')))]"
              },
              "secretName": "[variables('name_trustKeyStorePswSecret')]"
            }
          },
          "wlsTrustKeyStoreType": {
            "value": "[variables('const_trustKeyStoreType')]"
          },
          "wlsUserName": {
            "value": "[parameters('wlsUserName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.613.9944",
              "templateHash": "13665120537298463198"
            }
          },
          "parameters": {
            "_artifactsLocation": {
              "type": "string",
              "defaultValue": "[deployment().properties.templateLink.uri]"
            },
            "_artifactsLocationSasToken": {
              "type": "secureString",
              "defaultValue": ""
            },
            "_pidEnd": {
              "type": "string",
              "defaultValue": "pid-wls-end"
            },
            "_pidStart": {
              "type": "string",
              "defaultValue": "pid-wls-start"
            },
            "aciResourcePermissions": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "true to use resource or workspace permissions. false to require workspace permissions."
              }
            },
            "aciRetentionInDays": {
              "type": "int",
              "defaultValue": 120,
              "metadata": {
                "description": "Number of days to retain data in Azure Monitor workspace."
              }
            },
            "aciWorkspaceSku": {
              "type": "string",
              "defaultValue": "pergb2018",
              "metadata": {
                "description": "Pricing tier: PerGB2018 or legacy tiers (Free, Standalone, PerNode, Standard or Premium) which are not available to all customers."
              }
            },
            "acrName": {
              "type": "string",
              "defaultValue": ""
            },
            "aksAgentPoolName": {
              "type": "string",
              "defaultValue": "agentpool",
              "metadata": {
                "description": "The name for this node pool. Node pool must contain only lowercase letters and numbers. For Linux node pools the name cannot be longer than 12 characters."
              },
              "minLength": 1,
              "maxLength": 12
            },
            "aksAgentPoolNodeCount": {
              "type": "int",
              "defaultValue": 3,
              "metadata": {
                "description": "The number of nodes that should be created along with the cluster. You will be able to resize the cluster later."
              },
              "minValue": 1,
              "maxValue": 10000
            },
            "aksAgentPoolVMSize": {
              "type": "string",
              "defaultValue": "Standard_DS2_v2",
              "metadata": {
                "description": "The size of the virtual machines that will form the nodes in the cluster. This cannot be changed after creating the cluster"
              }
            },
            "aksClusterNamePrefix": {
              "type": "string",
              "defaultValue": "wlsonaks",
              "metadata": {
                "description": "Prefix for cluster name. Only The name can contain only letters, numbers, underscores and hyphens. The name must start with letter or number."
              }
            },
            "aksClusterRGName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Resource group name of an existing AKS cluster."
              }
            },
            "aksClusterName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of an existing AKS cluster."
              }
            },
            "aksVersion": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "The AKS version."
              }
            },
            "appPackageUrls": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Urls of Java EE application packages."
              }
            },
            "appReplicas": {
              "type": "int",
              "defaultValue": 2,
              "metadata": {
                "description": "The number of managed server to start."
              }
            },
            "azCliVersion": {
              "type": "string",
              "defaultValue": ""
            },
            "createAKSCluster": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "true to create a new AKS cluster."
              }
            },
            "createStorageAccount": {
              "type": "bool",
              "defaultValue": false
            },
            "dbDriverLibrariesUrls": {
              "type": "array",
              "defaultValue": []
            },
            "enableAzureMonitoring": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "In addition to the CPU and memory metrics included in AKS by default, you can enable Container Insights for more comprehensive data on the overall performance and health of your cluster. Billing is based on data ingestion and retention settings."
              }
            },
            "enableCustomSSL": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "true to create persistent volume using file share."
              }
            },
            "enableAdminT3Tunneling": {
              "type": "bool",
              "defaultValue": false
            },
            "enableClusterT3Tunneling": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePV": {
              "type": "bool",
              "defaultValue": false
            },
            "identity": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "An user assigned managed identity. Make sure the identity has permission to create/update/delete/list Azure resources."
              }
            },
            "isSSOSupportEntitled": {
              "type": "bool"
            },
            "location": {
              "type": "string"
            },
            "managedServerPrefix": {
              "type": "string",
              "defaultValue": "managed-server",
              "metadata": {
                "description": "Name prefix of managed server."
              }
            },
            "ocrSSOPSW": {
              "type": "secureString",
              "metadata": {
                "description": "Password of Oracle SSO account."
              }
            },
            "ocrSSOUser": {
              "type": "string",
              "metadata": {
                "description": "User name of Oracle SSO account."
              }
            },
            "storageAccountName": {
              "type": "string",
              "defaultValue": "stg-contoso"
            },
            "t3ChannelAdminPort": {
              "type": "int",
              "defaultValue": 7005
            },
            "t3ChannelClusterPort": {
              "type": "int",
              "defaultValue": 8011
            },
            "userProvidedAcr": {
              "type": "string",
              "defaultValue": "null"
            },
            "userProvidedImagePath": {
              "type": "string",
              "defaultValue": "null"
            },
            "useOracleImage": {
              "type": "bool",
              "defaultValue": true
            },
            "wdtRuntimePassword": {
              "type": "secureString",
              "metadata": {
                "description": "Password for model WebLogic Deploy Tooling runtime encrytion."
              }
            },
            "wlsClusterSize": {
              "type": "int",
              "defaultValue": 5,
              "metadata": {
                "description": "Maximum cluster size."
              }
            },
            "wlsCPU": {
              "type": "string",
              "defaultValue": "200m",
              "metadata": {
                "description": "Requests for CPU resources for admin server and managed server."
              }
            },
            "wlsDomainName": {
              "type": "string",
              "defaultValue": "domain1",
              "metadata": {
                "description": "Name of WebLogic domain to create."
              }
            },
            "wlsDomainUID": {
              "type": "string",
              "defaultValue": "sample-domain1",
              "metadata": {
                "description": "UID of WebLogic domain, used in WebLogic Operator."
              }
            },
            "wlsIdentityKeyStoreData": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsIdentityKeyStorePassphrase": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsIdentityKeyStoreType": {
              "type": "string",
              "defaultValue": "PKCS12",
              "allowedValues": [
                "JKS",
                "PKCS12"
              ]
            },
            "wlsImageTag": {
              "type": "string",
              "defaultValue": "12.2.1.4",
              "metadata": {
                "description": "Docker tag that comes after \"container-registry.oracle.com/middleware/weblogic:\""
              }
            },
            "wlsJavaOption": {
              "type": "string",
              "defaultValue": "null"
            },
            "wlsMemory": {
              "type": "string",
              "defaultValue": "1.5Gi",
              "metadata": {
                "description": "Memory requests for admin server and managed server."
              }
            },
            "wlsPassword": {
              "type": "secureString"
            },
            "wlsPrivateKeyAlias": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsPrivateKeyPassPhrase": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsTrustKeyStoreData": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsTrustKeyStorePassPhrase": {
              "type": "secureString",
              "defaultValue": "[newGuid()]"
            },
            "wlsTrustKeyStoreType": {
              "type": "string",
              "defaultValue": "PKCS12",
              "allowedValues": [
                "JKS",
                "PKCS12"
              ]
            },
            "wlsUserName": {
              "type": "string",
              "defaultValue": "weblogic",
              "metadata": {
                "description": "User name for WebLogic Administrator."
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "wls-aks-start-pid-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidStart')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "3360241215376299589"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2019-10-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.613.9944",
                              "templateHash": "6023100456016179368"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "This is an empty deployment"
                            }
                          },
                          "functions": [],
                          "resources": [],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "47ea43a0-95cf-52c7-aee8-7ee6106fc1bf"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "01288010-2672-5831-a66b-7b8b45cace1b"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "d7a9c78e-39d9-5a47-928d-8645ed86dafd"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "0cc86800-37f4-5191-9368-2953394309ec"
                    },
                    "dnsEnd": {
                      "type": "string",
                      "value": "754e16bc-4d81-5343-b99b-7532abd6587d"
                    },
                    "dnsStart": {
                      "type": "string",
                      "value": "64ae895c-feb3-529e-8435-5d2e49f94e09"
                    },
                    "lbEnd": {
                      "type": "string",
                      "value": "ce664543-77bd-515a-832e-107e32f99da9"
                    },
                    "lbStart": {
                      "type": "string",
                      "value": "44732bbc-04c4-5df7-a0c6-b9be9ec00ee6"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "2798165c-49fa-5701-b608-b80ed3986176"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "0793308f-de9d-5f0d-92f9-d9fc4b413b8b"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "2571f846-2f66-5c22-9fe6-38ecea7889ac"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "3e6acde5-9a62-5488-9fd4-87c46f4105f4"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "e6e33240-e5db-52fc-9154-7fc7b3b8b508"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4570a81a-3f3a-53d5-b178-7f985d9c5ecf"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('createAKSCluster')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "aks-cluster-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aciResourcePermissions": {
                    "value": "[parameters('aciResourcePermissions')]"
                  },
                  "aciRetentionInDays": {
                    "value": "[parameters('aciRetentionInDays')]"
                  },
                  "aciWorkspaceSku": {
                    "value": "[parameters('aciWorkspaceSku')]"
                  },
                  "aksAgentPoolName": {
                    "value": "[parameters('aksAgentPoolName')]"
                  },
                  "aksAgentPoolNodeCount": {
                    "value": "[parameters('aksAgentPoolNodeCount')]"
                  },
                  "aksAgentPoolVMSize": {
                    "value": "[parameters('aksAgentPoolVMSize')]"
                  },
                  "aksClusterNamePrefix": {
                    "value": "[parameters('aksClusterNamePrefix')]"
                  },
                  "aksVersion": {
                    "value": "[parameters('aksVersion')]"
                  },
                  "enableAzureMonitoring": {
                    "value": "[parameters('enableAzureMonitoring')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "5986953159158882973"
                    }
                  },
                  "parameters": {
                    "aciResourcePermissions": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "true to use resource or workspace permissions. false to require workspace permissions."
                      }
                    },
                    "aciRetentionInDays": {
                      "type": "int",
                      "defaultValue": 120,
                      "metadata": {
                        "description": "Number of days to retain data in Azure Monitor workspace."
                      }
                    },
                    "aciWorkspaceSku": {
                      "type": "string",
                      "defaultValue": "pergb2018",
                      "metadata": {
                        "description": "Pricing tier: PerGB2018 or legacy tiers (Free, Standalone, PerNode, Standard or Premium) which are not available to all customers."
                      }
                    },
                    "aksAgentPoolName": {
                      "type": "string",
                      "defaultValue": "agentpool",
                      "metadata": {
                        "description": "The name for this node pool. Node pool must contain only lowercase letters and numbers. For Linux node pools the name cannot be longer than 12 characters."
                      },
                      "minLength": 1,
                      "maxLength": 12
                    },
                    "aksAgentPoolNodeCount": {
                      "type": "int",
                      "defaultValue": 3,
                      "metadata": {
                        "description": "The number of nodes that should be created along with the cluster. You will be able to resize the cluster later."
                      },
                      "minValue": 1,
                      "maxValue": 10000
                    },
                    "aksAgentPoolVMSize": {
                      "type": "string",
                      "defaultValue": "Standard_DS2_v2",
                      "metadata": {
                        "description": "The size of the virtual machines that will form the nodes in the cluster. This cannot be changed after creating the cluster"
                      }
                    },
                    "aksClusterNamePrefix": {
                      "type": "string",
                      "defaultValue": "wlsonaks",
                      "metadata": {
                        "description": "Prefix for cluster name. Only The name can contain only letters, numbers, underscores and hyphens. The name must start with letter or number."
                      }
                    },
                    "aksVersion": {
                      "type": "string",
                      "defaultValue": "default"
                    },
                    "enableAzureMonitoring": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "In addition to the CPU and memory metrics included in AKS by default, you can enable Container Insights for more comprehensive data on the overall performance and health of your cluster. Billing is based on data ingestion and retention settings."
                      }
                    },
                    "location": {
                      "type": "string"
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_aksAgentPoolOSDiskSizeGB": 128,
                    "const_aksAgentPoolMaxPods": 110,
                    "const_aksAvailabilityZones": [
                      "1",
                      "2",
                      "3"
                    ],
                    "name_aciWorkspace": "[format('Workspace-{0}-{1}', guid(parameters('utcValue')), parameters('location'))]",
                    "name_aksClusterNameForSV": "[format('{0}{1}', parameters('aksClusterNamePrefix'), uniqueString(parameters('utcValue')))]",
                    "obj_aciDisableOmsAgent": {
                      "enabled": false
                    },
                    "obj_aciEnableOmsAgent": {
                      "enabled": true,
                      "config": {
                        "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('name_aciWorkspace'))]"
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableAzureMonitoring')]",
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-06-01",
                      "name": "[variables('name_aciWorkspace')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "sku": {
                          "name": "[parameters('aciWorkspaceSku')]"
                        },
                        "retentionInDays": "[parameters('aciRetentionInDays')]",
                        "features": {
                          "searchVersion": 1,
                          "legacy": 0,
                          "enableLogAccessUsingOnlyResourcePermissions": "[parameters('aciResourcePermissions')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.ContainerService/managedClusters",
                      "apiVersion": "2021-02-01",
                      "name": "[variables('name_aksClusterNameForSV')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "kubernetesVersion": "[parameters('aksVersion')]",
                        "dnsPrefix": "[format('{0}-dns', variables('name_aksClusterNameForSV'))]",
                        "agentPoolProfiles": [
                          {
                            "name": "[parameters('aksAgentPoolName')]",
                            "count": "[parameters('aksAgentPoolNodeCount')]",
                            "vmSize": "[parameters('aksAgentPoolVMSize')]",
                            "osDiskSizeGB": "[variables('const_aksAgentPoolOSDiskSizeGB')]",
                            "osDiskType": "Managed",
                            "kubeletDiskType": "OS",
                            "maxPods": "[variables('const_aksAgentPoolMaxPods')]",
                            "type": "VirtualMachineScaleSets",
                            "availabilityZones": "[variables('const_aksAvailabilityZones')]",
                            "mode": "System",
                            "osType": "Linux"
                          }
                        ],
                        "addonProfiles": {
                          "KubeDashboard": {
                            "enabled": false
                          },
                          "azurepolicy": {
                            "enabled": false
                          },
                          "httpApplicationRouting": {
                            "enabled": false
                          },
                          "omsAgent": "[if(parameters('enableAzureMonitoring'), variables('obj_aciEnableOmsAgent'), variables('obj_aciDisableOmsAgent'))]"
                        },
                        "enableRBAC": true,
                        "networkProfile": {
                          "networkPlugin": "kubenet",
                          "loadBalancerSku": "standard"
                        }
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('name_aciWorkspace'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "aksClusterName": {
                      "type": "string",
                      "value": "[variables('name_aksClusterNameForSV')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'wls-aks-start-pid-deployment')]"
              ]
            },
            {
              "condition": "[parameters('createStorageAccount')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "storage-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "1250147291009083074"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string",
                      "defaultValue": "stg-contoso"
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_shareQuota": 5120,
                    "const_sku": "Standard_LRS",
                    "name_fileShare": "weblogic"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-02-01",
                      "name": "[parameters('storageAccountName')]",
                      "location": "[parameters('location')]",
                      "kind": "StorageV2",
                      "sku": {
                        "name": "[variables('const_sku')]",
                        "tier": "Standard"
                      },
                      "properties": {
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Allow"
                        },
                        "supportsHttpsTrafficOnly": true,
                        "encryption": {
                          "services": {
                            "file": {
                              "keyType": "Account",
                              "enabled": true
                            }
                          },
                          "keySource": "Microsoft.Storage"
                        },
                        "accessTier": "Hot"
                      },
                      "tags": {
                        "managed-by-azure-weblogic": "[parameters('utcValue')]"
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/default/{1}', parameters('storageAccountName'), variables('name_fileShare'))]",
                      "properties": {
                        "accessTier": "TransactionOptimized",
                        "shareQuota": "[variables('const_shareQuota')]",
                        "enabledProtocols": "SMB"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'wls-aks-start-pid-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "wls-domain-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "_artifactsLocation": {
                    "value": "[parameters('_artifactsLocation')]"
                  },
                  "_artifactsLocationSasToken": {
                    "value": "[parameters('_artifactsLocationSasToken')]"
                  },
                  "aksClusterRGName": {
                    "value": "[if(parameters('createAKSCluster'), resourceGroup().name, parameters('aksClusterRGName'))]"
                  },
                  "aksClusterName": {
                    "value": "[if(parameters('createAKSCluster'), reference(resourceId('Microsoft.Resources/deployments', 'aks-cluster-deployment'), '2019-10-01').outputs.aksClusterName.value, parameters('aksClusterName'))]"
                  },
                  "acrName": {
                    "value": "[if(parameters('useOracleImage'), parameters('acrName'), parameters('userProvidedAcr'))]"
                  },
                  "appPackageUrls": {
                    "value": "[parameters('appPackageUrls')]"
                  },
                  "appReplicas": {
                    "value": "[parameters('appReplicas')]"
                  },
                  "azCliVersion": {
                    "value": "[parameters('azCliVersion')]"
                  },
                  "dbDriverLibrariesUrls": {
                    "value": "[parameters('dbDriverLibrariesUrls')]"
                  },
                  "enableCustomSSL": {
                    "value": "[parameters('enableCustomSSL')]"
                  },
                  "enableAdminT3Tunneling": {
                    "value": "[parameters('enableAdminT3Tunneling')]"
                  },
                  "enableClusterT3Tunneling": {
                    "value": "[parameters('enableClusterT3Tunneling')]"
                  },
                  "enablePV": {
                    "value": "[parameters('enablePV')]"
                  },
                  "identity": {
                    "value": "[parameters('identity')]"
                  },
                  "isSSOSupportEntitled": {
                    "value": "[parameters('isSSOSupportEntitled')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "managedServerPrefix": {
                    "value": "[parameters('managedServerPrefix')]"
                  },
                  "ocrSSOUser": {
                    "value": "[parameters('ocrSSOUser')]"
                  },
                  "ocrSSOPSW": {
                    "value": "[parameters('ocrSSOPSW')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "t3ChannelAdminPort": {
                    "value": "[parameters('t3ChannelAdminPort')]"
                  },
                  "t3ChannelClusterPort": {
                    "value": "[parameters('t3ChannelClusterPort')]"
                  },
                  "userProvidedImagePath": {
                    "value": "[parameters('userProvidedImagePath')]"
                  },
                  "useOracleImage": {
                    "value": "[parameters('useOracleImage')]"
                  },
                  "wdtRuntimePassword": {
                    "value": "[parameters('wdtRuntimePassword')]"
                  },
                  "wlsClusterSize": {
                    "value": "[parameters('wlsClusterSize')]"
                  },
                  "wlsCPU": {
                    "value": "[parameters('wlsCPU')]"
                  },
                  "wlsDomainName": {
                    "value": "[parameters('wlsDomainName')]"
                  },
                  "wlsDomainUID": {
                    "value": "[parameters('wlsDomainUID')]"
                  },
                  "wlsIdentityKeyStoreData": {
                    "value": "[parameters('wlsIdentityKeyStoreData')]"
                  },
                  "wlsIdentityKeyStorePassphrase": {
                    "value": "[parameters('wlsIdentityKeyStorePassphrase')]"
                  },
                  "wlsIdentityKeyStoreType": {
                    "value": "[parameters('wlsIdentityKeyStoreType')]"
                  },
                  "wlsImageTag": {
                    "value": "[parameters('wlsImageTag')]"
                  },
                  "wlsJavaOption": {
                    "value": "[parameters('wlsJavaOption')]"
                  },
                  "wlsMemory": {
                    "value": "[parameters('wlsMemory')]"
                  },
                  "wlsPassword": {
                    "value": "[parameters('wlsPassword')]"
                  },
                  "wlsPrivateKeyAlias": {
                    "value": "[parameters('wlsPrivateKeyAlias')]"
                  },
                  "wlsPrivateKeyPassPhrase": {
                    "value": "[parameters('wlsPrivateKeyPassPhrase')]"
                  },
                  "wlsTrustKeyStoreData": {
                    "value": "[parameters('wlsTrustKeyStoreData')]"
                  },
                  "wlsTrustKeyStorePassPhrase": {
                    "value": "[parameters('wlsTrustKeyStorePassPhrase')]"
                  },
                  "wlsTrustKeyStoreType": {
                    "value": "[parameters('wlsTrustKeyStoreType')]"
                  },
                  "wlsUserName": {
                    "value": "[parameters('wlsUserName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "10652588750917722752"
                    }
                  },
                  "parameters": {
                    "_artifactsLocation": {
                      "type": "string",
                      "defaultValue": "[deployment().properties.templateLink.uri]"
                    },
                    "_artifactsLocationSasToken": {
                      "type": "secureString",
                      "defaultValue": ""
                    },
                    "aksClusterRGName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "aksClusterName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "acrName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "appPackageUrls": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "appReplicas": {
                      "type": "int",
                      "defaultValue": 2
                    },
                    "azCliVersion": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "dbDriverLibrariesUrls": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "enableCustomSSL": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableAdminT3Tunneling": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableClusterT3Tunneling": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enablePV": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "identity": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "isSSOSupportEntitled": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string"
                    },
                    "managedServerPrefix": {
                      "type": "string",
                      "defaultValue": "managed-server"
                    },
                    "ocrSSOPSW": {
                      "type": "secureString"
                    },
                    "ocrSSOUser": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string",
                      "defaultValue": "null"
                    },
                    "t3ChannelAdminPort": {
                      "type": "int",
                      "defaultValue": 7005
                    },
                    "t3ChannelClusterPort": {
                      "type": "int",
                      "defaultValue": 8011
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    },
                    "userProvidedImagePath": {
                      "type": "string",
                      "defaultValue": "null"
                    },
                    "useOracleImage": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "wdtRuntimePassword": {
                      "type": "secureString"
                    },
                    "wlsClusterSize": {
                      "type": "int",
                      "defaultValue": 5
                    },
                    "wlsCPU": {
                      "type": "string",
                      "defaultValue": "200m"
                    },
                    "wlsDomainName": {
                      "type": "string",
                      "defaultValue": "domain1"
                    },
                    "wlsDomainUID": {
                      "type": "string",
                      "defaultValue": "sample-domain1"
                    },
                    "wlsIdentityKeyStoreData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "wlsIdentityKeyStorePassphrase": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "wlsIdentityKeyStoreType": {
                      "type": "string",
                      "defaultValue": "PKCS12",
                      "allowedValues": [
                        "JKS",
                        "PKCS12"
                      ]
                    },
                    "wlsImageTag": {
                      "type": "string",
                      "defaultValue": "12.2.1.4"
                    },
                    "wlsJavaOption": {
                      "type": "string",
                      "defaultValue": "null"
                    },
                    "wlsMemory": {
                      "type": "string",
                      "defaultValue": "1.5Gi"
                    },
                    "wlsPassword": {
                      "type": "secureString"
                    },
                    "wlsPrivateKeyAlias": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "wlsPrivateKeyPassPhrase": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "wlsTrustKeyStoreData": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "wlsTrustKeyStorePassPhrase": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "wlsTrustKeyStoreType": {
                      "type": "string",
                      "defaultValue": "PKCS12",
                      "allowedValues": [
                        "JKS",
                        "PKCS12"
                      ]
                    },
                    "wlsUserName": {
                      "type": "string",
                      "defaultValue": "weblogic"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_arguments": "[format('{0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16} {17} {18} {19} {20} {21} {22} {23} {24} {25} {26} {27} {28} {29} {30} {31} {32} {33} \"{34}\" {35} {36}', parameters('ocrSSOUser'), parameters('ocrSSOPSW'), parameters('aksClusterRGName'), parameters('aksClusterName'), parameters('wlsImageTag'), parameters('acrName'), parameters('wlsDomainName'), parameters('wlsDomainUID'), parameters('wlsUserName'), parameters('wlsPassword'), parameters('wdtRuntimePassword'), parameters('wlsCPU'), parameters('wlsMemory'), parameters('managedServerPrefix'), parameters('appReplicas'), string(parameters('appPackageUrls')), resourceGroup().name, variables('const_scriptLocation'), parameters('storageAccountName'), parameters('wlsClusterSize'), parameters('enableCustomSSL'), parameters('wlsIdentityKeyStoreData'), parameters('wlsIdentityKeyStorePassphrase'), parameters('wlsIdentityKeyStoreType'), parameters('wlsPrivateKeyAlias'), parameters('wlsPrivateKeyPassPhrase'), parameters('wlsTrustKeyStoreData'), parameters('wlsTrustKeyStorePassPhrase'), parameters('wlsTrustKeyStoreType'), parameters('enablePV'), parameters('enableAdminT3Tunneling'), parameters('enableClusterT3Tunneling'), parameters('t3ChannelAdminPort'), parameters('t3ChannelClusterPort'), parameters('wlsJavaOption'), parameters('userProvidedImagePath'), parameters('useOracleImage'))]",
                    "const_buildDockerImageScript": "createVMAndBuildImage.sh",
                    "const_commonScript": "common.sh",
                    "const_invokeSetUpDomainScript": "invokeSetupWLSDomain.sh",
                    "const_pvTempalte": "pv.yaml.template",
                    "const_pvcTempalte": "pvc.yaml.template",
                    "const_scriptLocation": "[uri(parameters('_artifactsLocation'), 'scripts/')]",
                    "const_genDomainConfigScript": "genDomainConfig.sh",
                    "const_setUpDomainScript": "setupWLSDomain.sh",
                    "const_updateDomainConfigScript": "updateDomainConfig.sh",
                    "const_utilityScript": "utility.sh"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "ds-wls-cluster-creation",
                      "location": "[parameters('location')]",
                      "kind": "AzureCLI",
                      "identity": "[parameters('identity')]",
                      "properties": {
                        "azCliVersion": "[parameters('azCliVersion')]",
                        "arguments": "[variables('const_arguments')]",
                        "environmentVariables": [
                          {
                            "name": "URL_3RD_DATASOURCE",
                            "value": "[string(parameters('dbDriverLibrariesUrls'))]"
                          },
                          {
                            "name": "ORACLE_ACCOUNT_ENTITLED",
                            "value": "[string(parameters('isSSOSupportEntitled'))]"
                          }
                        ],
                        "primaryScriptUri": "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_invokeSetUpDomainScript'), parameters('_artifactsLocationSasToken')))]",
                        "supportingScriptUris": [
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_setUpDomainScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_genDomainConfigScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_utilityScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_pvTempalte'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_pvcTempalte'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_commonScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_buildDockerImageScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_updateDomainConfigScript'), parameters('_artifactsLocationSasToken')))]"
                        ],
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D",
                        "forceUpdateTag": "[parameters('utcValue')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'aks-cluster-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'storage-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "wls-aks-end-pid-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidEnd')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "3360241215376299589"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2019-10-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.613.9944",
                              "templateHash": "6023100456016179368"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "This is an empty deployment"
                            }
                          },
                          "functions": [],
                          "resources": [],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "47ea43a0-95cf-52c7-aee8-7ee6106fc1bf"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "01288010-2672-5831-a66b-7b8b45cace1b"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "d7a9c78e-39d9-5a47-928d-8645ed86dafd"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "0cc86800-37f4-5191-9368-2953394309ec"
                    },
                    "dnsEnd": {
                      "type": "string",
                      "value": "754e16bc-4d81-5343-b99b-7532abd6587d"
                    },
                    "dnsStart": {
                      "type": "string",
                      "value": "64ae895c-feb3-529e-8435-5d2e49f94e09"
                    },
                    "lbEnd": {
                      "type": "string",
                      "value": "ce664543-77bd-515a-832e-107e32f99da9"
                    },
                    "lbStart": {
                      "type": "string",
                      "value": "44732bbc-04c4-5df7-a0c6-b9be9ec00ee6"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "2798165c-49fa-5701-b608-b80ed3986176"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "0793308f-de9d-5f0d-92f9-d9fc4b413b8b"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "2571f846-2f66-5c22-9fe6-38ecea7889ac"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "3e6acde5-9a62-5488-9fd4-87c46f4105f4"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "e6e33240-e5db-52fc-9154-7fc7b3b8b508"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4570a81a-3f3a-53d5-b178-7f985d9c5ecf"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'wls-domain-deployment')]"
              ]
            }
          ],
          "outputs": {
            "aksClusterName": {
              "type": "string",
              "value": "[if(parameters('createAKSCluster'), reference(resourceId('Microsoft.Resources/deployments', 'aks-cluster-deployment'), '2019-10-01').outputs.aksClusterName.value, parameters('aksClusterName'))]"
            },
            "aksClusterRGName": {
              "type": "string",
              "value": "[if(parameters('createAKSCluster'), resourceGroup().name, parameters('aksClusterRGName'))]"
            },
            "adminServerEndPoint": {
              "type": "string",
              "value": "[format('http://{0}-admin-server.{0}-ns.svc.cluster.local:7001/console', parameters('wlsDomainUID'))]"
            },
            "adminServerT3InternalEndPoint": {
              "type": "string",
              "value": "[if(parameters('enableAdminT3Tunneling'), format('{0}://{1}-admin-server.{1}-ns.svc.cluster.local:{2}', if(parameters('enableCustomSSL'), 't3s', 't3'), parameters('wlsDomainUID'), parameters('t3ChannelAdminPort')), '')]"
            },
            "clusterEndPoint": {
              "type": "string",
              "value": "[format('http://{0}-cluster-cluster-1.{0}-ns.svc.cluster.local:8001/', parameters('wlsDomainUID'))]"
            },
            "clusterT3InternalEndPoint": {
              "type": "string",
              "value": "[if(parameters('enableClusterT3Tunneling'), format('{0}://{1}-cluster-cluster-1.{1}-ns.svc.cluster.local:{2}', if(parameters('enableCustomSSL'), 't3s', 't3'), parameters('wlsDomainUID'), parameters('t3ChannelClusterPort')), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'initialization')]",
        "[resourceId('Microsoft.Resources/deployments', 'pre-azure-resources-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'query-existing-storage-account')]",
        "[resourceId('Microsoft.Resources/deployments', 'uami-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'validate-parameters-and-fail-fast')]",
        "[resourceId('Microsoft.Resources/deployments', 'upload-wls-ssl-cert-to-keyvault')]"
      ]
    },
    {
      "condition": "[variables('const_enableNetworking')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "networking-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "_pidNetworkingEnd": {
            "value": "[if(equals(reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2019-10-01').outputs.networkingEnd.value, ''), variables('name_defaultPidDeployment'), reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2019-10-01').outputs.networkingEnd.value)]"
          },
          "_pidNetworkingStart": {
            "value": "[if(equals(reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2019-10-01').outputs.networkingStart.value, ''), variables('name_defaultPidDeployment'), reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2019-10-01').outputs.networkingStart.value)]"
          },
          "aksClusterRGName": {
            "value": "[variables('ref_wlsDomainDeployment').outputs.aksClusterRGName]"
          },
          "aksClusterName": {
            "value": "[variables('ref_wlsDomainDeployment').outputs.aksClusterName]"
          },
          "appGatewayName": {
            "value": "[if(variables('_enableAppGWIngress'), reference(resourceId('Microsoft.Resources/deployments', 'application-gateway-deployment'), '2019-10-01').outputs.appGatewayName.value, '')]"
          },
          "appGatewayAlias": {
            "value": "[if(variables('_enableAppGWIngress'), reference(resourceId('Microsoft.Resources/deployments', 'application-gateway-deployment'), '2019-10-01').outputs.appGatewayAlias.value, '')]"
          },
          "appGatewaySecuredURL": {
            "value": "[if(variables('_enableAppGWIngress'), reference(resourceId('Microsoft.Resources/deployments', 'application-gateway-deployment'), '2019-10-01').outputs.appGatewaySecuredURL.value, '')]"
          },
          "appGatewayURL": {
            "value": "[if(variables('_enableAppGWIngress'), reference(resourceId('Microsoft.Resources/deployments', 'application-gateway-deployment'), '2019-10-01').outputs.appGatewayURL.value, '')]"
          },
          "appGatewaySslCert": {
            "value": "[variables('name_appgwFrontendSSLCertName')]"
          },
          "appGatewayTrustedRootCert": {
            "value": "[variables('name_appgwBackendRootCertName')]"
          },
          "appgwUsePrivateIP": {
            "value": "[parameters('appgwUsePrivateIP')]"
          },
          "appgwForAdminServer": {
            "value": "[parameters('appgwForAdminServer')]"
          },
          "appgwForRemoteConsole": {
            "value": "[parameters('appgwForRemoteConsole')]"
          },
          "azCliVersion": {
            "value": "[variables('const_azcliVersion')]"
          },
          "createAKSCluster": {
            "value": "[parameters('createAKSCluster')]"
          },
          "createDNSZone": {
            "value": "[parameters('createDNSZone')]"
          },
          "dnszoneAdminConsoleLabel": {
            "value": "[parameters('dnszoneAdminConsoleLabel')]"
          },
          "dnszoneAdminT3ChannelLabel": {
            "value": "[parameters('dnszoneAdminT3ChannelLabel')]"
          },
          "dnszoneClusterLabel": {
            "value": "[parameters('dnszoneClusterLabel')]"
          },
          "dnszoneClusterT3ChannelLabel": {
            "value": "[parameters('dnszoneClusterT3ChannelLabel')]"
          },
          "dnszoneName": {
            "value": "[parameters('dnszoneName')]"
          },
          "dnszoneRGName": {
            "value": "[parameters('dnszoneRGName')]"
          },
          "enableAppGWIngress": {
            "value": "[parameters('enableAppGWIngress')]"
          },
          "enableCookieBasedAffinity": {
            "value": "[parameters('enableCookieBasedAffinity')]"
          },
          "enableCustomSSL": {
            "value": "[parameters('enableCustomSSL')]"
          },
          "enableDNSConfiguration": {
            "value": "[parameters('enableDNSConfiguration')]"
          },
          "identity": {
            "value": {
              "type": "UserAssigned",
              "userAssignedIdentities": {
                "[reference(resourceId('Microsoft.Resources/deployments', 'uami-deployment'), '2019-10-01').outputs.uamiIdForDeploymentScript.value]": {}
              }
            }
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "lbSvcValues": {
            "value": "[parameters('lbSvcValues')]"
          },
          "useInternalLB": {
            "value": "[parameters('useInternalLB')]"
          },
          "wlsDomainName": {
            "value": "[parameters('wlsDomainName')]"
          },
          "wlsDomainUID": {
            "value": "[parameters('wlsDomainUID')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.613.9944",
              "templateHash": "11548926573828265293"
            }
          },
          "parameters": {
            "_artifactsLocation": {
              "type": "string",
              "defaultValue": "[deployment().properties.templateLink.uri]"
            },
            "_artifactsLocationSasToken": {
              "type": "secureString",
              "defaultValue": ""
            },
            "_pidDnsEnd": {
              "type": "string",
              "defaultValue": "pid-networking-dns-end"
            },
            "_pidDnsStart": {
              "type": "string",
              "defaultValue": "pid-networking-dns-start"
            },
            "_pidLbEnd": {
              "type": "string",
              "defaultValue": "pid-networking-lb-end"
            },
            "_pidLbStart": {
              "type": "string",
              "defaultValue": "pid-networking-lb-start"
            },
            "_pidNetworkingEnd": {
              "type": "string",
              "defaultValue": "pid-networking-end"
            },
            "_pidNetworkingStart": {
              "type": "string",
              "defaultValue": "pid-networking-start"
            },
            "aksClusterRGName": {
              "type": "string",
              "defaultValue": "aks-contoso-rg",
              "metadata": {
                "description": "Resource group name of an existing AKS cluster."
              }
            },
            "aksClusterName": {
              "type": "string",
              "defaultValue": "aks-contoso",
              "metadata": {
                "description": "Name of an existing AKS cluster."
              }
            },
            "appGatewayName": {
              "type": "string",
              "defaultValue": ""
            },
            "appGatewayAlias": {
              "type": "string",
              "defaultValue": ""
            },
            "appGatewaySecuredURL": {
              "type": "string",
              "defaultValue": ""
            },
            "appGatewaySslCert": {
              "type": "string",
              "defaultValue": ""
            },
            "appGatewayTrustedRootCert": {
              "type": "string",
              "defaultValue": ""
            },
            "appGatewayURL": {
              "type": "string",
              "defaultValue": ""
            },
            "appgwForAdminServer": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Create Application Gateway ingress for admin console."
              }
            },
            "appgwForRemoteConsole": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Create Application Gateway ingress for remote console."
              }
            },
            "appgwUsePrivateIP": {
              "type": "bool",
              "defaultValue": false
            },
            "azCliVersion": {
              "type": "string",
              "defaultValue": ""
            },
            "createAKSCluster": {
              "type": "bool",
              "defaultValue": true
            },
            "createDNSZone": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "If true, the template will update records to the existing DNS Zone. If false, the template will create a new DNS Zone."
              }
            },
            "dnszoneName": {
              "type": "string",
              "defaultValue": "contoso.xyz",
              "metadata": {
                "description": "Azure DNS Zone name."
              }
            },
            "dnszoneAdminConsoleLabel": {
              "type": "string",
              "defaultValue": "admin"
            },
            "dnszoneAdminT3ChannelLabel": {
              "type": "string",
              "defaultValue": "admin-t3"
            },
            "dnszoneClusterLabel": {
              "type": "string",
              "defaultValue": "www",
              "metadata": {
                "description": "Specify a label used to generate subdomain of WebLogic cluster. The final subdomain name will be label.dnszoneName, e.g. applications.contoso.xyz"
              }
            },
            "dnszoneClusterT3ChannelLabel": {
              "type": "string",
              "defaultValue": "cluster-t3"
            },
            "dnszoneRGName": {
              "type": "string",
              "defaultValue": "dns-contoso-rg"
            },
            "enableAppGWIngress": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "true to set up Application Gateway ingress."
              }
            },
            "enableCookieBasedAffinity": {
              "type": "bool",
              "defaultValue": false
            },
            "enableCustomSSL": {
              "type": "bool",
              "defaultValue": false
            },
            "enableDNSConfiguration": {
              "type": "bool",
              "defaultValue": false
            },
            "identity": {
              "type": "object",
              "defaultValue": {}
            },
            "location": {
              "type": "string"
            },
            "lbSvcValues": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Object array to define Load Balancer service, each object must include service name, service target[admin-server or cluster-1], port."
              }
            },
            "useInternalLB": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "True to set up internal load balancer service."
              }
            },
            "wlsDomainName": {
              "type": "string",
              "defaultValue": "domain1",
              "metadata": {
                "description": "Name of WebLogic domain to create."
              }
            },
            "wlsDomainUID": {
              "type": "string",
              "defaultValue": "sample-domain1",
              "metadata": {
                "description": "UID of WebLogic domain, used in WebLogic Operator."
              }
            }
          },
          "functions": [],
          "variables": {
            "_enableAppGWIngress": "[parameters('enableAppGWIngress')]",
            "const_appgwCustomDNSAlias": "[format('{0}.{1}/', parameters('dnszoneClusterLabel'), parameters('dnszoneName'))]",
            "const_appgwAdminCustomDNSAlias": "[format('{0}.{1}/', parameters('dnszoneAdminConsoleLabel'), parameters('dnszoneName'))]",
            "const_enableLbService": "[greater(length(parameters('lbSvcValues')), 0)]",
            "ref_networkDeployment": "[if(variables('_enableAppGWIngress'), reference(resourceId('Microsoft.Resources/deployments', 'ds-networking-deployment-yes-appgw'), '2019-10-01').outputs, reference(resourceId('Microsoft.Resources/deployments', 'ds-networking-deployment-no-appgw'), '2019-10-01').outputs)]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "pid-networking-start-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidNetworkingStart')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "3360241215376299589"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2019-10-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.613.9944",
                              "templateHash": "6023100456016179368"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "This is an empty deployment"
                            }
                          },
                          "functions": [],
                          "resources": [],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "47ea43a0-95cf-52c7-aee8-7ee6106fc1bf"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "01288010-2672-5831-a66b-7b8b45cace1b"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "d7a9c78e-39d9-5a47-928d-8645ed86dafd"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "0cc86800-37f4-5191-9368-2953394309ec"
                    },
                    "dnsEnd": {
                      "type": "string",
                      "value": "754e16bc-4d81-5343-b99b-7532abd6587d"
                    },
                    "dnsStart": {
                      "type": "string",
                      "value": "64ae895c-feb3-529e-8435-5d2e49f94e09"
                    },
                    "lbEnd": {
                      "type": "string",
                      "value": "ce664543-77bd-515a-832e-107e32f99da9"
                    },
                    "lbStart": {
                      "type": "string",
                      "value": "44732bbc-04c4-5df7-a0c6-b9be9ec00ee6"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "2798165c-49fa-5701-b608-b80ed3986176"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "0793308f-de9d-5f0d-92f9-d9fc4b413b8b"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "2571f846-2f66-5c22-9fe6-38ecea7889ac"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "3e6acde5-9a62-5488-9fd4-87c46f4105f4"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "e6e33240-e5db-52fc-9154-7fc7b3b8b508"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4570a81a-3f3a-53d5-b178-7f985d9c5ecf"
                    }
                  }
                }
              }
            },
            {
              "condition": "[variables('const_enableLbService')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "pid-loadbalancer-service-start-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidLbStart')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "3360241215376299589"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2019-10-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.613.9944",
                              "templateHash": "6023100456016179368"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "This is an empty deployment"
                            }
                          },
                          "functions": [],
                          "resources": [],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "47ea43a0-95cf-52c7-aee8-7ee6106fc1bf"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "01288010-2672-5831-a66b-7b8b45cace1b"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "d7a9c78e-39d9-5a47-928d-8645ed86dafd"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "0cc86800-37f4-5191-9368-2953394309ec"
                    },
                    "dnsEnd": {
                      "type": "string",
                      "value": "754e16bc-4d81-5343-b99b-7532abd6587d"
                    },
                    "dnsStart": {
                      "type": "string",
                      "value": "64ae895c-feb3-529e-8435-5d2e49f94e09"
                    },
                    "lbEnd": {
                      "type": "string",
                      "value": "ce664543-77bd-515a-832e-107e32f99da9"
                    },
                    "lbStart": {
                      "type": "string",
                      "value": "44732bbc-04c4-5df7-a0c6-b9be9ec00ee6"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "2798165c-49fa-5701-b608-b80ed3986176"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "0793308f-de9d-5f0d-92f9-d9fc4b413b8b"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "2571f846-2f66-5c22-9fe6-38ecea7889ac"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "3e6acde5-9a62-5488-9fd4-87c46f4105f4"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "e6e33240-e5db-52fc-9154-7fc7b3b8b508"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4570a81a-3f3a-53d5-b178-7f985d9c5ecf"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('enableDNSConfiguration')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "pid-dns-start-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidDnsStart')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "3360241215376299589"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2019-10-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.613.9944",
                              "templateHash": "6023100456016179368"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "This is an empty deployment"
                            }
                          },
                          "functions": [],
                          "resources": [],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "47ea43a0-95cf-52c7-aee8-7ee6106fc1bf"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "01288010-2672-5831-a66b-7b8b45cace1b"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "d7a9c78e-39d9-5a47-928d-8645ed86dafd"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "0cc86800-37f4-5191-9368-2953394309ec"
                    },
                    "dnsEnd": {
                      "type": "string",
                      "value": "754e16bc-4d81-5343-b99b-7532abd6587d"
                    },
                    "dnsStart": {
                      "type": "string",
                      "value": "64ae895c-feb3-529e-8435-5d2e49f94e09"
                    },
                    "lbEnd": {
                      "type": "string",
                      "value": "ce664543-77bd-515a-832e-107e32f99da9"
                    },
                    "lbStart": {
                      "type": "string",
                      "value": "44732bbc-04c4-5df7-a0c6-b9be9ec00ee6"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "2798165c-49fa-5701-b608-b80ed3986176"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "0793308f-de9d-5f0d-92f9-d9fc4b413b8b"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "2571f846-2f66-5c22-9fe6-38ecea7889ac"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "3e6acde5-9a62-5488-9fd4-87c46f4105f4"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "e6e33240-e5db-52fc-9154-7fc7b3b8b508"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4570a81a-3f3a-53d5-b178-7f985d9c5ecf"
                    }
                  }
                }
              }
            },
            {
              "condition": "[and(parameters('enableDNSConfiguration'), parameters('createDNSZone'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "dnszone-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "dnszoneName": {
                    "value": "[parameters('dnszoneName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "15967509283427304459"
                    }
                  },
                  "parameters": {
                    "dnszoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure DNS Zone name."
                      }
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "type": "Microsoft.Network/dnsZones",
                      "apiVersion": "2018-05-01",
                      "name": "[parameters('dnszoneName')]",
                      "location": "global",
                      "properties": {
                        "zoneType": "Public"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'pid-dns-start-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'pid-networking-start-deployment')]"
              ]
            },
            {
              "condition": "[parameters('enableAppGWIngress')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "validate-agic",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "identity": {
                    "value": "[parameters('identity')]"
                  },
                  "aksClusterRGName": {
                    "value": "[parameters('aksClusterRGName')]"
                  },
                  "appgwName": {
                    "value": "[parameters('appGatewayName')]"
                  },
                  "aksClusterName": {
                    "value": "[parameters('aksClusterName')]"
                  },
                  "azCliVersion": {
                    "value": "[parameters('azCliVersion')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "3912450868329903049"
                    }
                  },
                  "parameters": {
                    "aksClusterName": {
                      "type": "string"
                    },
                    "aksClusterRGName": {
                      "type": "string"
                    },
                    "appgwName": {
                      "type": "string",
                      "defaultValue": "appgw-contoso"
                    },
                    "azCliVersion": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "identity": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "location": {
                      "type": "string"
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "base64_common": "IyBDb3B5cmlnaHQgKGMpIDIwMjEsIE9yYWNsZSBDb3Jwb3JhdGlvbiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXMuCiMgTGljZW5zZWQgdW5kZXIgdGhlIFVuaXZlcnNhbCBQZXJtaXNzaXZlIExpY2Vuc2UgdiAxLjAgYXMgc2hvd24gYXQgaHR0cHM6Ly9vc3Mub3JhY2xlLmNvbS9saWNlbnNlcy91cGwuCiMgVGhpcyBzY3JpcHQgcnVucyBvbiBBenVyZSBDb250YWluZXIgSW5zdGFuY2Ugd2l0aCBBbHBpbmUgTGludXggdGhhdCBBenVyZSBEZXBsb3ltZW50IHNjcmlwdCBjcmVhdGVzLgoKZXhwb3J0IGNoZWNrUG9kU3RhdHVzSW50ZXJ2YWw9MjAgIyBpbnRlcnZhbCBvZiBjaGVja2luZyBwb2Qgc3RhdHVzLgpleHBvcnQgY2hlY2tQb2RTdGF0dXNNYXhBdHRlbXBzPTEwMCAjIG1heCBhdHRlbXB0IHRvIGNoZWNrIHBvZCBzdGF0dXMuCmV4cG9ydCBjaGVja1BWU3RhdGVJbnRlcnZhbD01ICMgaW50ZXJ2YWwgb2YgY2hlY2tpbmcgcHZjIHN0YXR1cy4KZXhwb3J0IGNoZWNrUFZTdGF0ZU1heEF0dGVtcHQ9MTAgIyBtYXggYXR0ZW1wdCB0byBjaGVjayBwdmMgc3RhdHVzLgpleHBvcnQgY2hlY2tTVkNTdGF0ZU1heEF0dGVtcHQ9NTAKZXhwb3J0IGNoZWNrU1ZDSW50ZXJ2YWw9MzAgI3NlY29uZHMKZXhwb3J0IGNoZWNrQUdJQ1N0YXR1c01heEF0dGVtcHQ9MTAKZXhwb3J0IGNoZWNrQUdJQ1N0YXR1c0ludGVydmFsPTMwCmV4cG9ydCBjaGVja0luZ3Jlc3NTdGF0ZU1heEF0dGVtcHQ9NTAKCmV4cG9ydCBjb25zdEFkbWluVDNBZGRyZXNzRW52TmFtZT0iVDNfVFVOTkVMSU5HX0FETUlOX0FERFJFU1MiCmV4cG9ydCBjb25zdEFkbWluU2VydmVyTmFtZT0nYWRtaW4tc2VydmVyJwpleHBvcnQgY29uc3RDbHVzdGVyTmFtZT0nY2x1c3Rlci0xJwpleHBvcnQgY29uc3RDbHVzdGVyVDNBZGRyZXNzRW52TmFtZT0iVDNfVFVOTkVMSU5HX0NMVVNURVJfQUREUkVTUyIKZXhwb3J0IGNvbnN0RGVmYXVsdEphdmFPcHRpb25zPSItRGxvZzRqMi5mb3JtYXRNc2dOb0xvb2t1cHM9dHJ1ZSAtRHdlYmxvZ2ljLlN0ZG91dERlYnVnRW5hYmxlZD1mYWxzZSIgIyB0aGUgamF2YSBvcHRpb25zIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgY2x1c3RlcgpleHBvcnQgY29uc3REZWZhdWx0SlZNQXJncz0iLURqYXZhLnNlY3VyaXR5LmVnZD1maWxlOi9kZXYvLi91cmFuZG9tIC1YbXMyNTZtIC1YbXg1MTJtIC1YWDpNaW5SQU1QZXJjZW50YWdlPTI1LjAgLVhYOk1heFJBTVBlcmNlbnRhZ2U9NTAuMCAiICMgdGhlIEpWTSBvcHRpb25zIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgY2x1c3RlcgpleHBvcnQgY29uc3REZWZhdWx0QUtTVmVyc2lvbj0iZGVmYXVsdCIKZXhwb3J0IGNvbnN0RmFsc2U9ImZhbHNlIgpleHBvcnQgY29uc3RUcnVlPSJ0cnVlIgpleHBvcnQgY29uc3RJbnRyb3NwZWN0b3JKb2JBY3RpdmVEZWFkbGluZVNlY29uZHM9MzAwICAjIGZvciBHdWFyYW50ZWVkIFFvcwpleHBvcnQgY29uc3RQb3N0Z3JlRHJpdmVyTmFtZT0icG9zdGdyZXNxbC00Mi4zLjYuamFyIgpleHBvcnQgY29uc3RNU1NRTERyaXZlck5hbWU9Im1zc3FsLWpkYmMtMTAuMi4xLmpyZTguamFyIgoKZXhwb3J0IGN1cmxNYXhUaW1lPTEyMCAjIHNlY29uZHMKZXhwb3J0IG9jckxvZ2luU2VydmVyPSJjb250YWluZXItcmVnaXN0cnkub3JhY2xlLmNvbSIKZXhwb3J0IG9jckdhSW1hZ2VQYXRoPSJtaWRkbGV3YXJlL3dlYmxvZ2ljIgpleHBvcnQgb2NyQ3B1SW1hZ2VQYXRoPSJtaWRkbGV3YXJlL3dlYmxvZ2ljX2NwdSIKZXhwb3J0IGdpdFVybDRDcHVJbWFnZXM9Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9vcmFjbGUvd2VibG9naWMtYXp1cmUvbWFpbi93ZWJsb2dpYy1henVyZS1ha3Mvc3JjL21haW4vcmVzb3VyY2VzL3dlYmxvZ2ljX2NwdV9pbWFnZXMuanNvbiIKZXhwb3J0IGdpdFVybDRBa3NXZWxsVGVzdGVkVmVyc2lvbkpzb25GaWxlPSJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vb3JhY2xlL3dlYmxvZ2ljLWF6dXJlL21haW4vd2VibG9naWMtYXp1cmUtYWtzL3NyYy9tYWluL3Jlc291cmNlcy9ha3Nfd2VsbF90ZXN0ZWRfdmVyc2lvbi5qc29uIgpleHBvcnQgZ2l0VXJsNFdMU1Rvb2xpbmdGYW1pbHlKc29uRmlsZT0iaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29yYWNsZS93ZWJsb2dpYy1henVyZS9tYWluL3dlYmxvZ2ljLWF6dXJlLWFrcy9zcmMvbWFpbi9yZXNvdXJjZXMvd2VibG9naWNfdG9vbGluZ19mYW1pbHkuanNvbiIKCmV4cG9ydCBvcHRVbmluc3RhbGxNYXhUcnk9NSAjIE1heCBhdHRlbXB0cyB0byB3YWl0IGZvciB0aGUgb3BlcmF0b3IgdW5pbnN0YWxsZWQKZXhwb3J0IG9wdFVuaW5zdGFsbEludGVydmFsPTEwCgpleHBvcnQgcmV0cnlNYXhBdHRlbXB0PTUgIyByZXRyeSBhdHRlbXB0IGZvciBjdXJsIGNvbW1hbmQKZXhwb3J0IHJldHJ5SW50ZXJ2YWw9MTAKCmV4cG9ydCB3bHNDb250YWluZXJOYW1lPSJ3ZWJsb2dpYy1zZXJ2ZXIiCmV4cG9ydCB3bHNQb3N0Z3Jlc3FsRHJpdmVyVXJsPSJodHRwczovL2pkYmMucG9zdGdyZXNxbC5vcmcvZG93bmxvYWQvcG9zdGdyZXNxbC00Mi4zLjYuamFyIgpleHBvcnQgd2xzTVNTUUxEcml2ZXJVcmw9Imh0dHBzOi8vcmVwby5tYXZlbi5hcGFjaGUub3JnL21hdmVuMi9jb20vbWljcm9zb2Z0L3NxbHNlcnZlci9tc3NxbC1qZGJjLzEwLjIuMS5qcmU4L21zc3FsLWpkYmMtMTAuMi4xLmpyZTguamFyIgo=",
                    "base64_enableAgic": "IyBDb3B5cmlnaHQgKGMpIDIwMjEsIE9yYWNsZSBDb3Jwb3JhdGlvbiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXMuCiMgTGljZW5zZWQgdW5kZXIgdGhlIFVuaXZlcnNhbCBQZXJtaXNzaXZlIExpY2Vuc2UgdiAxLjAgYXMgc2hvd24gYXQgaHR0cHM6Ly9vc3Mub3JhY2xlLmNvbS9saWNlbnNlcy91cGwuCgpmdW5jdGlvbiBpbnN0YWxsX2F6dXJlX2luZ3Jlc3MoKSB7CiAgICBsb2NhbCBpZGVudGl0eUxlbmd0aD0kKGF6IGFrcyBzaG93IC1nICR7QUtTX0NMVVNURVJfUkdfTkFNRX0gLW4gJHtBS1NfQ0xVU1RFUl9OQU1FfSB8IGpxICcuaWRlbnRpdHkgfCBsZW5ndGgnKQogICAgZWNobyAiaWRlbnRpdHlMZW5ndGggJHtpZGVudGl0eUxlbmd0aH0iCgogICAgaWYgWyAkaWRlbnRpdHlMZW5ndGggLWx0IDEgXTsgdGhlbgogICAgICAgIGVjaG8gImVuYWJsZSBtYW5hZ2VkIGlkZW50aXR5Li4uIgogICAgICAgICMgWW91ciBjbHVzdGVyIGlzIHVzaW5nIHNlcnZpY2UgcHJpbmNpcGFsLCBhbmQgeW91IGFyZSBnb2luZyB0byB1cGRhdGUgdGhlIGNsdXN0ZXIgdG8gdXNlIHN5c3RlbWFzc2lnbmVkIG1hbmFnZWQgaWRlbnRpdHkuCiAgICAgICAgIyBBZnRlciB1cGRhdGluZywgeW91ciBjbHVzdGVyJ3MgY29udHJvbCBwbGFuZSBhbmQgYWRkb24gcG9kcyB3aWxsIHN3aXRjaCB0byB1c2UgbWFuYWdlZCBpZGVudGl0eSwgYnV0IGt1YmVsZXQgd2lsbCBLRUVQIFVTSU5HIFNFUlZJQ0UgUFJJTkNJUEFMIHVudGlsIHlvdSB1cGdyYWRlIHlvdXIgYWdlbnRwb29sLgogICAgICAgIGF6IGFrcyB1cGRhdGUgLXkgLWcgJHtBS1NfQ0xVU1RFUl9SR19OQU1FfSAtbiAke0FLU19DTFVTVEVSX05BTUV9IC0tZW5hYmxlLW1hbmFnZWQtaWRlbnRpdHkKCiAgICAgICAgdXRpbGl0eV92YWxpZGF0ZV9zdGF0dXMgIkVuYWJsZSBBcHBsY2lhdGlvbiBHYXRld2F5IEluZ3Jlc3MgQ29udHJvbGxlciBmb3IgJHtBS1NfQ0xVU1RFUl9OQU1FfS4iCiAgICBmaQoKICAgIGxvY2FsIGFnaWNFbmFibGVkPSQoYXogYWtzIHNob3cgLW4gJHtBS1NfQ0xVU1RFUl9OQU1FfSAtZyAke0FLU19DTFVTVEVSX1JHX05BTUV9IHwganEgJy5hZGRvblByb2ZpbGVzLmluZ3Jlc3NBcHBsaWNhdGlvbkdhdGV3YXkuZW5hYmxlZCcpCiAgICBsb2NhbCBhZ2ljR2F0ZXdheUlkPSIiCiAgICBpZiBbWyAiJHthZ2ljRW5hYmxlZCwsfSIgPT0gInRydWUiIF1dOyB0aGVuCiAgICAgICAgYWdpY0dhdGV3YXlJZD0kKGF6IGFrcyBzaG93IC1uICR7QUtTX0NMVVNURVJfTkFNRX0gLWcgJHtBS1NfQ0xVU1RFUl9SR19OQU1FfSB8CiAgICAgICAgICAgIGpxICcuYWRkb25Qcm9maWxlcy5pbmdyZXNzQXBwbGljYXRpb25HYXRld2F5LmNvbmZpZy5hcHBsaWNhdGlvbkdhdGV3YXlJZCcgfAogICAgICAgICAgICB0ciAtZCAiXCIiKQogICAgZmkKCiAgICBsb2NhbCBhcHBnd0lkPSQoYXogbmV0d29yayBhcHBsaWNhdGlvbi1nYXRld2F5IHNob3cgXAogICAgICAgIC1uICR7QVBQR1dfTkFNRX0gXAogICAgICAgIC1nICR7Q1VSUkVOVF9SR19OQU1FfSAtbyB0c3YgLS1xdWVyeSAiaWQiKQoKICAgIGlmIFtbICIke2FnaWNHYXRld2F5SWR9IiAhPSAiJHthcHBnd0lkfSIgXV07IHRoZW4KICAgICAgICBheiBha3MgZW5hYmxlLWFkZG9ucyAtbiAke0FLU19DTFVTVEVSX05BTUV9IC1nICR7QUtTX0NMVVNURVJfUkdfTkFNRX0gLS1hZGRvbnMgaW5ncmVzcy1hcHBndyAtLWFwcGd3LWlkICRhcHBnd0lkCiAgICAgICAgdXRpbGl0eV92YWxpZGF0ZV9zdGF0dXMgIkluc3RhbGwgYXBwIGdhdGV3YXkgaW5ncmVzcyBjb250cm9sbGVyLiIKICAgIGZpCn0KCmZ1bmN0aW9uIHZhbGlkYXRlX2F6dXJlX2luZ3Jlc3MoKSB7CiAgICBheiBha3MgZ2V0LWNyZWRlbnRpYWxzIFwKICAgICAgICAtLXJlc291cmNlLWdyb3VwICR7QUtTX0NMVVNURVJfUkdfTkFNRX0gXAogICAgICAgIC0tbmFtZSAke0FLU19DTFVTVEVSX05BTUV9IFwKICAgICAgICAtLW92ZXJ3cml0ZS1leGlzdGluZwogICAgbG9jYWwgcmV0PSQoa3ViZWN0bCBnZXQgcG9kIC1uIGt1YmUtc3lzdGVtIHwgZ3JlcCAiaW5ncmVzcy1hcHBndy1kZXBsb3ltZW50LSoiIHwgZ3JlcCAiUnVubmluZyIpCiAgICBpZiBbWyAteiAiJHJldCIgXV07IHRoZW4KICAgICAgICBlY2hvX3N0ZGVyciAiRmFpbGVkIHRvIGVuYWJsZSBhenVyZSBpbmdyZXNzLiIKICAgICAgICBleGl0IDEKICAgIGZpCgogICAgZWNobyAiYXBwZ3cgaW5ncmVzcyBpcyBydW5uaW5nLiIKfQoKIyBNYWluIHNjcmlwdApzZXQgLUVvIHBpcGVmYWlsCgppbnN0YWxsX2t1YmVjdGwKCmluc3RhbGxfYXp1cmVfaW5ncmVzcwoKdmFsaWRhdGVfYXp1cmVfaW5ncmVzcwo=",
                    "base64_utility": "",
                    "const_deploymentName": "ds-validate-agic"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[variables('const_deploymentName')]",
                      "location": "[parameters('location')]",
                      "kind": "AzureCLI",
                      "identity": "[parameters('identity')]",
                      "properties": {
                        "azCliVersion": "[parameters('azCliVersion')]",
                        "scriptContent": "[format('{0}\r\n\r\n{1}\r\n\r\n{2}', base64ToString(variables('base64_common')), base64ToString(variables('base64_utility')), base64ToString(variables('base64_enableAgic')))]",
                        "environmentVariables": [
                          {
                            "name": "AKS_CLUSTER_RG_NAME",
                            "value": "[parameters('aksClusterRGName')]"
                          },
                          {
                            "name": "AKS_CLUSTER_NAME",
                            "value": "[parameters('aksClusterName')]"
                          },
                          {
                            "name": "APPGW_NAME",
                            "value": "[parameters('appgwName')]"
                          },
                          {
                            "name": "CURRENT_RG_NAME",
                            "value": "[resourceGroup().name]"
                          }
                        ],
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D",
                        "forceUpdateTag": "[parameters('utcValue')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'pid-networking-start-deployment')]"
              ]
            },
            {
              "condition": "[parameters('enableAppGWIngress')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "allow-agic-access-current-resource-group",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aksClusterName": {
                    "value": "[parameters('aksClusterName')]"
                  },
                  "aksClusterRGName": {
                    "value": "[parameters('aksClusterRGName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "11833338693451731327"
                    }
                  },
                  "parameters": {
                    "aksClusterName": {
                      "type": "string"
                    },
                    "aksClusterRGName": {
                      "type": "string"
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_APIVersion": "2020-12-01",
                    "name_appGwContributorRoleAssignmentName": "[guid(format('{0}{1}ForApplicationGateway', resourceGroup().id, parameters('utcValue')))]",
                    "const_roleDefinitionIdOfContributor": "b24988ac-6180-42a0-ab88-20f7382dd24c"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-10-01-preview",
                      "name": "[variables('name_appGwContributorRoleAssignmentName')]",
                      "properties": {
                        "description": "Assign Resource Group Contributor role to User Assigned Managed Identity ",
                        "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('aksClusterRGName')), 'Microsoft.ContainerService/managedClusters', parameters('aksClusterName')), variables('const_APIVersion'), 'Full').properties.addonProfiles.ingressApplicationGateway.identity.objectId]",
                        "principalType": "ServicePrincipal",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('const_roleDefinitionIdOfContributor'))]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'validate-agic')]"
              ]
            },
            {
              "condition": "[parameters('enableAppGWIngress')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "ds-networking-deployment-yes-appgw",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "_artifactsLocation": {
                    "value": "[parameters('_artifactsLocation')]"
                  },
                  "_artifactsLocationSasToken": {
                    "value": "[parameters('_artifactsLocationSasToken')]"
                  },
                  "appgwName": {
                    "value": "[parameters('appGatewayName')]"
                  },
                  "appgwAlias": {
                    "value": "[parameters('appGatewayAlias')]"
                  },
                  "appgwForAdminServer": {
                    "value": "[parameters('appgwForAdminServer')]"
                  },
                  "appgwForRemoteConsole": {
                    "value": "[parameters('appgwForRemoteConsole')]"
                  },
                  "appgwSslCert": {
                    "value": "[parameters('appGatewaySslCert')]"
                  },
                  "appgwTrustedRootCert": {
                    "value": "[parameters('appGatewayTrustedRootCert')]"
                  },
                  "appgwUsePrivateIP": {
                    "value": "[parameters('appgwUsePrivateIP')]"
                  },
                  "aksClusterRGName": {
                    "value": "[parameters('aksClusterRGName')]"
                  },
                  "aksClusterName": {
                    "value": "[parameters('aksClusterName')]"
                  },
                  "azCliVersion": {
                    "value": "[parameters('azCliVersion')]"
                  },
                  "createAKSCluster": {
                    "value": "[parameters('createAKSCluster')]"
                  },
                  "dnszoneAdminConsoleLabel": {
                    "value": "[parameters('dnszoneAdminConsoleLabel')]"
                  },
                  "dnszoneAdminT3ChannelLabel": {
                    "value": "[parameters('dnszoneAdminT3ChannelLabel')]"
                  },
                  "dnszoneClusterLabel": {
                    "value": "[parameters('dnszoneClusterLabel')]"
                  },
                  "dnszoneClusterT3ChannelLabel": {
                    "value": "[parameters('dnszoneClusterT3ChannelLabel')]"
                  },
                  "dnszoneName": {
                    "value": "[parameters('dnszoneName')]"
                  },
                  "dnszoneRGName": {
                    "value": "[if(parameters('createDNSZone'), resourceGroup().name, parameters('dnszoneRGName'))]"
                  },
                  "enableAppGWIngress": {
                    "value": "[parameters('enableAppGWIngress')]"
                  },
                  "enableCookieBasedAffinity": {
                    "value": "[parameters('enableCookieBasedAffinity')]"
                  },
                  "enableCustomSSL": {
                    "value": "[parameters('enableCustomSSL')]"
                  },
                  "enableDNSConfiguration": {
                    "value": "[parameters('enableDNSConfiguration')]"
                  },
                  "identity": {
                    "value": "[parameters('identity')]"
                  },
                  "lbSvcValues": {
                    "value": "[parameters('lbSvcValues')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "useInternalLB": {
                    "value": "[parameters('useInternalLB')]"
                  },
                  "wlsDomainName": {
                    "value": "[parameters('wlsDomainName')]"
                  },
                  "wlsDomainUID": {
                    "value": "[parameters('wlsDomainUID')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "1771719101389832154"
                    }
                  },
                  "parameters": {
                    "_artifactsLocation": {
                      "type": "string",
                      "defaultValue": "[deployment().properties.templateLink.uri]"
                    },
                    "_artifactsLocationSasToken": {
                      "type": "secureString",
                      "defaultValue": ""
                    },
                    "appgwAlias": {
                      "type": "string",
                      "defaultValue": "appgw-contoso-alias"
                    },
                    "appgwName": {
                      "type": "string",
                      "defaultValue": "appgw-contoso"
                    },
                    "appgwForAdminServer": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Three scenarios we support for deploying app gateway"
                      }
                    },
                    "appgwForRemoteConsole": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "appgwSslCert": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "appgwTrustedRootCert": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "appgwUsePrivateIP": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "aksClusterRGName": {
                      "type": "string",
                      "defaultValue": "aks-contoso-rg"
                    },
                    "aksClusterName": {
                      "type": "string",
                      "defaultValue": "aks-contoso"
                    },
                    "azCliVersion": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "createAKSCluster": {
                      "type": "bool"
                    },
                    "dnszoneAdminConsoleLabel": {
                      "type": "string",
                      "defaultValue": "admin"
                    },
                    "dnszoneAdminT3ChannelLabel": {
                      "type": "string",
                      "defaultValue": "admin-t3"
                    },
                    "dnszoneClusterLabel": {
                      "type": "string",
                      "defaultValue": "www"
                    },
                    "dnszoneClusterT3ChannelLabel": {
                      "type": "string",
                      "defaultValue": "cluster-t3"
                    },
                    "dnszoneName": {
                      "type": "string",
                      "defaultValue": "contoso.xyz"
                    },
                    "dnszoneRGName": {
                      "type": "string",
                      "defaultValue": "dns-contoso-rg"
                    },
                    "enableAppGWIngress": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableCookieBasedAffinity": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableCustomSSL": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableDNSConfiguration": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "identity": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "lbSvcValues": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "location": {
                      "type": "string"
                    },
                    "useInternalLB": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    },
                    "wlsDomainName": {
                      "type": "string",
                      "defaultValue": "domain1"
                    },
                    "wlsDomainUID": {
                      "type": "string",
                      "defaultValue": "sample-domain1"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_commonScript": "common.sh",
                    "const_createDnsRecordScript": "createDnsRecord.sh",
                    "const_createLbSvcScript": "createLbSvc.sh",
                    "const_createGatewayIngressSvcScript": "createAppGatewayIngress.sh",
                    "const_scriptLocation": "[uri(parameters('_artifactsLocation'), 'scripts/')]",
                    "const_primaryScript": "setupNetworking.sh",
                    "const_utilityScript": "utility.sh"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "ds-networking-deployment",
                      "location": "[parameters('location')]",
                      "kind": "AzureCLI",
                      "identity": "[parameters('identity')]",
                      "properties": {
                        "azCliVersion": "[parameters('azCliVersion')]",
                        "environmentVariables": [
                          {
                            "name": "AKS_CLUSTER_RG_NAME",
                            "value": "[parameters('aksClusterRGName')]"
                          },
                          {
                            "name": "AKS_CLUSTER_NAME",
                            "value": "[parameters('aksClusterName')]"
                          },
                          {
                            "name": "APPGW_SSL_CERT_NAME",
                            "value": "[parameters('appgwSslCert')]"
                          },
                          {
                            "name": "APPGW_TRUSTED_ROOT_CERT_NAME",
                            "value": "[parameters('appgwTrustedRootCert')]"
                          },
                          {
                            "name": "APPGW_NAME",
                            "value": "[parameters('appgwName')]"
                          },
                          {
                            "name": "APPGW_USE_PRIVATE_IP",
                            "value": "[string(parameters('appgwUsePrivateIP'))]"
                          },
                          {
                            "name": "APPGW_FOR_ADMIN_SERVER",
                            "value": "[string(parameters('appgwForAdminServer'))]"
                          },
                          {
                            "name": "APPGW_FOR_REMOTE_CONSOLE",
                            "value": "[string(parameters('appgwForRemoteConsole'))]"
                          },
                          {
                            "name": "APPGW_ALIAS",
                            "value": "[parameters('appgwAlias')]"
                          },
                          {
                            "name": "CREATE_AKS_CLUSTER",
                            "value": "[string(parameters('createAKSCluster'))]"
                          },
                          {
                            "name": "CURRENT_RG_NAME",
                            "value": "[resourceGroup().name]"
                          },
                          {
                            "name": "DNS_ZONE_NAME",
                            "value": "[parameters('dnszoneName')]"
                          },
                          {
                            "name": "DNS_ZONE_RG_NAME",
                            "value": "[parameters('dnszoneRGName')]"
                          },
                          {
                            "name": "DNS_ADMIN_LABEL",
                            "value": "[parameters('dnszoneAdminConsoleLabel')]"
                          },
                          {
                            "name": "DNS_CLUSTER_LABEL",
                            "value": "[parameters('dnszoneClusterLabel')]"
                          },
                          {
                            "name": "DNS_ADMIN_T3_LABEL",
                            "value": "[parameters('dnszoneAdminT3ChannelLabel')]"
                          },
                          {
                            "name": "DNS_CLUSTER_T3_LABEL",
                            "value": "[parameters('dnszoneClusterT3ChannelLabel')]"
                          },
                          {
                            "name": "ENABLE_DNS_CONFIGURATION",
                            "value": "[string(parameters('enableDNSConfiguration'))]"
                          },
                          {
                            "name": "ENABLE_AGIC",
                            "value": "[string(parameters('enableAppGWIngress'))]"
                          },
                          {
                            "name": "ENABLE_CUSTOM_SSL",
                            "value": "[string(parameters('enableCustomSSL'))]"
                          },
                          {
                            "name": "ENABLE_COOKIE_BASED_AFFINITY",
                            "value": "[string(parameters('enableCookieBasedAffinity'))]"
                          },
                          {
                            "name": "LB_SVC_VALUES",
                            "value": "[string(parameters('lbSvcValues'))]"
                          },
                          {
                            "name": "USE_INTERNAL_LB",
                            "value": "[string(parameters('useInternalLB'))]"
                          },
                          {
                            "name": "WLS_DOMAIN_NAME",
                            "value": "[parameters('wlsDomainName')]"
                          },
                          {
                            "name": "WLS_DOMAIN_UID",
                            "value": "[parameters('wlsDomainUID')]"
                          }
                        ],
                        "primaryScriptUri": "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_primaryScript'), parameters('_artifactsLocationSasToken')))]",
                        "supportingScriptUris": [
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_commonScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_utilityScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_createDnsRecordScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_createLbSvcScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_createGatewayIngressSvcScript'), parameters('_artifactsLocationSasToken')))]"
                        ],
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D",
                        "forceUpdateTag": "[parameters('utcValue')]"
                      }
                    }
                  ],
                  "outputs": {
                    "adminConsoleLBEndpoint": {
                      "type": "string",
                      "value": "[if(and(and(not(parameters('enableCustomSSL')), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminConsoleEndpoint, 'null'))), format('http://{0}/', reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminConsoleEndpoint), '')]"
                    },
                    "adminConsoleLBSecuredEndpoint": {
                      "type": "string",
                      "value": "[if(and(and(parameters('enableCustomSSL'), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminConsoleEndpoint, 'null'))), format('https://{0}/', reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminConsoleEndpoint), '')]"
                    },
                    "adminServerT3LBEndpoint": {
                      "type": "string",
                      "value": "[if(and(greater(length(parameters('lbSvcValues')), 0), not(equals(reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminServerT3Endpoint, 'null'))), reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminServerT3Endpoint, '')]"
                    },
                    "adminRemoteEndpoint": {
                      "type": "string",
                      "value": "[if(and(and(not(parameters('enableCustomSSL')), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminRemoteEndpoint, 'null'))), format('http://{0}', reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminRemoteEndpoint), '')]"
                    },
                    "adminRemoteSecuredEndpoint": {
                      "type": "string",
                      "value": "[if(and(and(parameters('enableCustomSSL'), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminRemoteEndpoint, 'null'))), format('https://{0}', reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminRemoteEndpoint), '')]"
                    },
                    "clusterLBEndpoint": {
                      "type": "string",
                      "value": "[if(and(and(not(parameters('enableCustomSSL')), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.clusterEndpoint, 'null'))), format('http://{0}/', reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.clusterEndpoint), '')]"
                    },
                    "clusterLBSecuredEndpoint": {
                      "type": "string",
                      "value": "[if(and(and(parameters('enableCustomSSL'), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.clusterEndpoint, 'null'))), format('https://{0}/', reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.clusterEndpoint), '')]"
                    },
                    "clusterT3LBEndpoint": {
                      "type": "string",
                      "value": "[if(and(greater(length(parameters('lbSvcValues')), 0), not(equals(reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.clusterT3Endpoint, 'null'))), reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.clusterT3Endpoint, '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'allow-agic-access-current-resource-group')]",
                "[resourceId('Microsoft.Resources/deployments', 'dnszone-deployment')]"
              ]
            },
            {
              "condition": "[not(parameters('enableAppGWIngress'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "ds-networking-deployment-no-appgw",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "_artifactsLocation": {
                    "value": "[parameters('_artifactsLocation')]"
                  },
                  "_artifactsLocationSasToken": {
                    "value": "[parameters('_artifactsLocationSasToken')]"
                  },
                  "appgwName": {
                    "value": "null"
                  },
                  "appgwAlias": {
                    "value": "null"
                  },
                  "appgwForAdminServer": {
                    "value": "[parameters('appgwForAdminServer')]"
                  },
                  "appgwForRemoteConsole": {
                    "value": "[parameters('appgwForRemoteConsole')]"
                  },
                  "appgwSslCert": {
                    "value": "[parameters('appGatewaySslCert')]"
                  },
                  "appgwTrustedRootCert": {
                    "value": "[parameters('appGatewayTrustedRootCert')]"
                  },
                  "appgwUsePrivateIP": {
                    "value": "[parameters('appgwUsePrivateIP')]"
                  },
                  "aksClusterRGName": {
                    "value": "[parameters('aksClusterRGName')]"
                  },
                  "aksClusterName": {
                    "value": "[parameters('aksClusterName')]"
                  },
                  "azCliVersion": {
                    "value": "[parameters('azCliVersion')]"
                  },
                  "createAKSCluster": {
                    "value": "[parameters('createAKSCluster')]"
                  },
                  "dnszoneAdminConsoleLabel": {
                    "value": "[parameters('dnszoneAdminConsoleLabel')]"
                  },
                  "dnszoneAdminT3ChannelLabel": {
                    "value": "[parameters('dnszoneAdminT3ChannelLabel')]"
                  },
                  "dnszoneClusterLabel": {
                    "value": "[parameters('dnszoneClusterLabel')]"
                  },
                  "dnszoneClusterT3ChannelLabel": {
                    "value": "[parameters('dnszoneClusterT3ChannelLabel')]"
                  },
                  "dnszoneName": {
                    "value": "[parameters('dnszoneName')]"
                  },
                  "dnszoneRGName": {
                    "value": "[if(parameters('createDNSZone'), resourceGroup().name, parameters('dnszoneRGName'))]"
                  },
                  "enableAppGWIngress": {
                    "value": "[parameters('enableAppGWIngress')]"
                  },
                  "enableCookieBasedAffinity": {
                    "value": "[parameters('enableCookieBasedAffinity')]"
                  },
                  "enableCustomSSL": {
                    "value": "[parameters('enableCustomSSL')]"
                  },
                  "enableDNSConfiguration": {
                    "value": "[parameters('enableDNSConfiguration')]"
                  },
                  "identity": {
                    "value": "[parameters('identity')]"
                  },
                  "lbSvcValues": {
                    "value": "[parameters('lbSvcValues')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "useInternalLB": {
                    "value": "[parameters('useInternalLB')]"
                  },
                  "wlsDomainName": {
                    "value": "[parameters('wlsDomainName')]"
                  },
                  "wlsDomainUID": {
                    "value": "[parameters('wlsDomainUID')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "1771719101389832154"
                    }
                  },
                  "parameters": {
                    "_artifactsLocation": {
                      "type": "string",
                      "defaultValue": "[deployment().properties.templateLink.uri]"
                    },
                    "_artifactsLocationSasToken": {
                      "type": "secureString",
                      "defaultValue": ""
                    },
                    "appgwAlias": {
                      "type": "string",
                      "defaultValue": "appgw-contoso-alias"
                    },
                    "appgwName": {
                      "type": "string",
                      "defaultValue": "appgw-contoso"
                    },
                    "appgwForAdminServer": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Three scenarios we support for deploying app gateway"
                      }
                    },
                    "appgwForRemoteConsole": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "appgwSslCert": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "appgwTrustedRootCert": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "appgwUsePrivateIP": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "aksClusterRGName": {
                      "type": "string",
                      "defaultValue": "aks-contoso-rg"
                    },
                    "aksClusterName": {
                      "type": "string",
                      "defaultValue": "aks-contoso"
                    },
                    "azCliVersion": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "createAKSCluster": {
                      "type": "bool"
                    },
                    "dnszoneAdminConsoleLabel": {
                      "type": "string",
                      "defaultValue": "admin"
                    },
                    "dnszoneAdminT3ChannelLabel": {
                      "type": "string",
                      "defaultValue": "admin-t3"
                    },
                    "dnszoneClusterLabel": {
                      "type": "string",
                      "defaultValue": "www"
                    },
                    "dnszoneClusterT3ChannelLabel": {
                      "type": "string",
                      "defaultValue": "cluster-t3"
                    },
                    "dnszoneName": {
                      "type": "string",
                      "defaultValue": "contoso.xyz"
                    },
                    "dnszoneRGName": {
                      "type": "string",
                      "defaultValue": "dns-contoso-rg"
                    },
                    "enableAppGWIngress": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableCookieBasedAffinity": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableCustomSSL": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableDNSConfiguration": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "identity": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "lbSvcValues": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "location": {
                      "type": "string"
                    },
                    "useInternalLB": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    },
                    "wlsDomainName": {
                      "type": "string",
                      "defaultValue": "domain1"
                    },
                    "wlsDomainUID": {
                      "type": "string",
                      "defaultValue": "sample-domain1"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_commonScript": "common.sh",
                    "const_createDnsRecordScript": "createDnsRecord.sh",
                    "const_createLbSvcScript": "createLbSvc.sh",
                    "const_createGatewayIngressSvcScript": "createAppGatewayIngress.sh",
                    "const_scriptLocation": "[uri(parameters('_artifactsLocation'), 'scripts/')]",
                    "const_primaryScript": "setupNetworking.sh",
                    "const_utilityScript": "utility.sh"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "ds-networking-deployment",
                      "location": "[parameters('location')]",
                      "kind": "AzureCLI",
                      "identity": "[parameters('identity')]",
                      "properties": {
                        "azCliVersion": "[parameters('azCliVersion')]",
                        "environmentVariables": [
                          {
                            "name": "AKS_CLUSTER_RG_NAME",
                            "value": "[parameters('aksClusterRGName')]"
                          },
                          {
                            "name": "AKS_CLUSTER_NAME",
                            "value": "[parameters('aksClusterName')]"
                          },
                          {
                            "name": "APPGW_SSL_CERT_NAME",
                            "value": "[parameters('appgwSslCert')]"
                          },
                          {
                            "name": "APPGW_TRUSTED_ROOT_CERT_NAME",
                            "value": "[parameters('appgwTrustedRootCert')]"
                          },
                          {
                            "name": "APPGW_NAME",
                            "value": "[parameters('appgwName')]"
                          },
                          {
                            "name": "APPGW_USE_PRIVATE_IP",
                            "value": "[string(parameters('appgwUsePrivateIP'))]"
                          },
                          {
                            "name": "APPGW_FOR_ADMIN_SERVER",
                            "value": "[string(parameters('appgwForAdminServer'))]"
                          },
                          {
                            "name": "APPGW_FOR_REMOTE_CONSOLE",
                            "value": "[string(parameters('appgwForRemoteConsole'))]"
                          },
                          {
                            "name": "APPGW_ALIAS",
                            "value": "[parameters('appgwAlias')]"
                          },
                          {
                            "name": "CREATE_AKS_CLUSTER",
                            "value": "[string(parameters('createAKSCluster'))]"
                          },
                          {
                            "name": "CURRENT_RG_NAME",
                            "value": "[resourceGroup().name]"
                          },
                          {
                            "name": "DNS_ZONE_NAME",
                            "value": "[parameters('dnszoneName')]"
                          },
                          {
                            "name": "DNS_ZONE_RG_NAME",
                            "value": "[parameters('dnszoneRGName')]"
                          },
                          {
                            "name": "DNS_ADMIN_LABEL",
                            "value": "[parameters('dnszoneAdminConsoleLabel')]"
                          },
                          {
                            "name": "DNS_CLUSTER_LABEL",
                            "value": "[parameters('dnszoneClusterLabel')]"
                          },
                          {
                            "name": "DNS_ADMIN_T3_LABEL",
                            "value": "[parameters('dnszoneAdminT3ChannelLabel')]"
                          },
                          {
                            "name": "DNS_CLUSTER_T3_LABEL",
                            "value": "[parameters('dnszoneClusterT3ChannelLabel')]"
                          },
                          {
                            "name": "ENABLE_DNS_CONFIGURATION",
                            "value": "[string(parameters('enableDNSConfiguration'))]"
                          },
                          {
                            "name": "ENABLE_AGIC",
                            "value": "[string(parameters('enableAppGWIngress'))]"
                          },
                          {
                            "name": "ENABLE_CUSTOM_SSL",
                            "value": "[string(parameters('enableCustomSSL'))]"
                          },
                          {
                            "name": "ENABLE_COOKIE_BASED_AFFINITY",
                            "value": "[string(parameters('enableCookieBasedAffinity'))]"
                          },
                          {
                            "name": "LB_SVC_VALUES",
                            "value": "[string(parameters('lbSvcValues'))]"
                          },
                          {
                            "name": "USE_INTERNAL_LB",
                            "value": "[string(parameters('useInternalLB'))]"
                          },
                          {
                            "name": "WLS_DOMAIN_NAME",
                            "value": "[parameters('wlsDomainName')]"
                          },
                          {
                            "name": "WLS_DOMAIN_UID",
                            "value": "[parameters('wlsDomainUID')]"
                          }
                        ],
                        "primaryScriptUri": "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_primaryScript'), parameters('_artifactsLocationSasToken')))]",
                        "supportingScriptUris": [
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_commonScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_utilityScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_createDnsRecordScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_createLbSvcScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_createGatewayIngressSvcScript'), parameters('_artifactsLocationSasToken')))]"
                        ],
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D",
                        "forceUpdateTag": "[parameters('utcValue')]"
                      }
                    }
                  ],
                  "outputs": {
                    "adminConsoleLBEndpoint": {
                      "type": "string",
                      "value": "[if(and(and(not(parameters('enableCustomSSL')), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminConsoleEndpoint, 'null'))), format('http://{0}/', reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminConsoleEndpoint), '')]"
                    },
                    "adminConsoleLBSecuredEndpoint": {
                      "type": "string",
                      "value": "[if(and(and(parameters('enableCustomSSL'), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminConsoleEndpoint, 'null'))), format('https://{0}/', reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminConsoleEndpoint), '')]"
                    },
                    "adminServerT3LBEndpoint": {
                      "type": "string",
                      "value": "[if(and(greater(length(parameters('lbSvcValues')), 0), not(equals(reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminServerT3Endpoint, 'null'))), reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminServerT3Endpoint, '')]"
                    },
                    "adminRemoteEndpoint": {
                      "type": "string",
                      "value": "[if(and(and(not(parameters('enableCustomSSL')), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminRemoteEndpoint, 'null'))), format('http://{0}', reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminRemoteEndpoint), '')]"
                    },
                    "adminRemoteSecuredEndpoint": {
                      "type": "string",
                      "value": "[if(and(and(parameters('enableCustomSSL'), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminRemoteEndpoint, 'null'))), format('https://{0}', reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.adminRemoteEndpoint), '')]"
                    },
                    "clusterLBEndpoint": {
                      "type": "string",
                      "value": "[if(and(and(not(parameters('enableCustomSSL')), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.clusterEndpoint, 'null'))), format('http://{0}/', reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.clusterEndpoint), '')]"
                    },
                    "clusterLBSecuredEndpoint": {
                      "type": "string",
                      "value": "[if(and(and(parameters('enableCustomSSL'), greater(length(parameters('lbSvcValues')), 0)), not(equals(reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.clusterEndpoint, 'null'))), format('https://{0}/', reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.clusterEndpoint), '')]"
                    },
                    "clusterT3LBEndpoint": {
                      "type": "string",
                      "value": "[if(and(greater(length(parameters('lbSvcValues')), 0), not(equals(reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.clusterT3Endpoint, 'null'))), reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-networking-deployment')).outputs.clusterT3Endpoint, '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'allow-agic-access-current-resource-group')]",
                "[resourceId('Microsoft.Resources/deployments', 'dnszone-deployment')]"
              ]
            },
            {
              "condition": "[variables('const_enableLbService')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "pid-loadbalancer-service-end-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidLbEnd')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "3360241215376299589"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2019-10-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.613.9944",
                              "templateHash": "6023100456016179368"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "This is an empty deployment"
                            }
                          },
                          "functions": [],
                          "resources": [],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "47ea43a0-95cf-52c7-aee8-7ee6106fc1bf"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "01288010-2672-5831-a66b-7b8b45cace1b"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "d7a9c78e-39d9-5a47-928d-8645ed86dafd"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "0cc86800-37f4-5191-9368-2953394309ec"
                    },
                    "dnsEnd": {
                      "type": "string",
                      "value": "754e16bc-4d81-5343-b99b-7532abd6587d"
                    },
                    "dnsStart": {
                      "type": "string",
                      "value": "64ae895c-feb3-529e-8435-5d2e49f94e09"
                    },
                    "lbEnd": {
                      "type": "string",
                      "value": "ce664543-77bd-515a-832e-107e32f99da9"
                    },
                    "lbStart": {
                      "type": "string",
                      "value": "44732bbc-04c4-5df7-a0c6-b9be9ec00ee6"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "2798165c-49fa-5701-b608-b80ed3986176"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "0793308f-de9d-5f0d-92f9-d9fc4b413b8b"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "2571f846-2f66-5c22-9fe6-38ecea7889ac"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "3e6acde5-9a62-5488-9fd4-87c46f4105f4"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "e6e33240-e5db-52fc-9154-7fc7b3b8b508"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4570a81a-3f3a-53d5-b178-7f985d9c5ecf"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'ds-networking-deployment-no-appgw')]",
                "[resourceId('Microsoft.Resources/deployments', 'ds-networking-deployment-yes-appgw')]"
              ]
            },
            {
              "condition": "[parameters('enableDNSConfiguration')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "pid-dns-end-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidDnsEnd')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "3360241215376299589"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2019-10-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.613.9944",
                              "templateHash": "6023100456016179368"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "This is an empty deployment"
                            }
                          },
                          "functions": [],
                          "resources": [],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "47ea43a0-95cf-52c7-aee8-7ee6106fc1bf"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "01288010-2672-5831-a66b-7b8b45cace1b"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "d7a9c78e-39d9-5a47-928d-8645ed86dafd"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "0cc86800-37f4-5191-9368-2953394309ec"
                    },
                    "dnsEnd": {
                      "type": "string",
                      "value": "754e16bc-4d81-5343-b99b-7532abd6587d"
                    },
                    "dnsStart": {
                      "type": "string",
                      "value": "64ae895c-feb3-529e-8435-5d2e49f94e09"
                    },
                    "lbEnd": {
                      "type": "string",
                      "value": "ce664543-77bd-515a-832e-107e32f99da9"
                    },
                    "lbStart": {
                      "type": "string",
                      "value": "44732bbc-04c4-5df7-a0c6-b9be9ec00ee6"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "2798165c-49fa-5701-b608-b80ed3986176"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "0793308f-de9d-5f0d-92f9-d9fc4b413b8b"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "2571f846-2f66-5c22-9fe6-38ecea7889ac"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "3e6acde5-9a62-5488-9fd4-87c46f4105f4"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "e6e33240-e5db-52fc-9154-7fc7b3b8b508"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4570a81a-3f3a-53d5-b178-7f985d9c5ecf"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'ds-networking-deployment-no-appgw')]",
                "[resourceId('Microsoft.Resources/deployments', 'ds-networking-deployment-yes-appgw')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "pid-networking-end-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidNetworkingEnd')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "3360241215376299589"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2019-10-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.613.9944",
                              "templateHash": "6023100456016179368"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "This is an empty deployment"
                            }
                          },
                          "functions": [],
                          "resources": [],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "47ea43a0-95cf-52c7-aee8-7ee6106fc1bf"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "01288010-2672-5831-a66b-7b8b45cace1b"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "d7a9c78e-39d9-5a47-928d-8645ed86dafd"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "0cc86800-37f4-5191-9368-2953394309ec"
                    },
                    "dnsEnd": {
                      "type": "string",
                      "value": "754e16bc-4d81-5343-b99b-7532abd6587d"
                    },
                    "dnsStart": {
                      "type": "string",
                      "value": "64ae895c-feb3-529e-8435-5d2e49f94e09"
                    },
                    "lbEnd": {
                      "type": "string",
                      "value": "ce664543-77bd-515a-832e-107e32f99da9"
                    },
                    "lbStart": {
                      "type": "string",
                      "value": "44732bbc-04c4-5df7-a0c6-b9be9ec00ee6"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "2798165c-49fa-5701-b608-b80ed3986176"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "0793308f-de9d-5f0d-92f9-d9fc4b413b8b"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "2571f846-2f66-5c22-9fe6-38ecea7889ac"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "3e6acde5-9a62-5488-9fd4-87c46f4105f4"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "e6e33240-e5db-52fc-9154-7fc7b3b8b508"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4570a81a-3f3a-53d5-b178-7f985d9c5ecf"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'pid-dns-end-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'pid-loadbalancer-service-end-deployment')]"
              ]
            }
          ],
          "outputs": {
            "adminConsoleExternalEndpoint": {
              "type": "string",
              "value": "[if(parameters('enableAppGWIngress'), if(parameters('enableDNSConfiguration'), format('http://{0}console', variables('const_appgwAdminCustomDNSAlias')), format('http://{0}/console', parameters('appGatewayAlias'))), variables('ref_networkDeployment').outputs.adminConsoleLBEndpoint)]"
            },
            "adminConsoleExternalSecuredEndpoint": {
              "type": "string",
              "value": "[if(and(and(parameters('enableAppGWIngress'), parameters('enableCustomSSL')), parameters('enableDNSConfiguration')), format('https://{0}console', variables('const_appgwAdminCustomDNSAlias')), variables('ref_networkDeployment').outputs.adminConsoleLBSecuredEndpoint)]"
            },
            "adminRemoteConsoleEndpoint": {
              "type": "string",
              "value": "[if(parameters('enableAppGWIngress'), if(parameters('enableDNSConfiguration'), format('http://{0}remoteconsole', variables('const_appgwAdminCustomDNSAlias')), format('http://{0}/remoteconsole', parameters('appGatewayAlias'))), variables('ref_networkDeployment').outputs.adminRemoteEndpoint)]"
            },
            "adminRemoteConsoleSecuredEndpoint": {
              "type": "string",
              "value": "[if(and(and(parameters('enableAppGWIngress'), parameters('enableCustomSSL')), parameters('enableDNSConfiguration')), format('https://{0}remoteconsole', variables('const_appgwAdminCustomDNSAlias')), variables('ref_networkDeployment').outputs.adminRemoteSecuredEndpoint)]"
            },
            "adminServerT3ChannelEndpoint": {
              "type": "string",
              "value": "[format('{0}://{1}', if(parameters('enableCustomSSL'), 't3s', 't3'), variables('ref_networkDeployment').outputs.adminServerT3LBEndpoint)]"
            },
            "clusterExternalEndpoint": {
              "type": "string",
              "value": "[if(parameters('enableAppGWIngress'), if(parameters('enableDNSConfiguration'), format('http://{0}', variables('const_appgwCustomDNSAlias')), parameters('appGatewayURL')), variables('ref_networkDeployment').outputs.clusterLBEndpoint)]"
            },
            "clusterExternalSecuredEndpoint": {
              "type": "string",
              "value": "[if(parameters('enableAppGWIngress'), if(parameters('enableDNSConfiguration'), format('https://{0}', variables('const_appgwCustomDNSAlias')), parameters('appGatewaySecuredURL')), variables('ref_networkDeployment').outputs.clusterLBSecuredEndpoint)]"
            },
            "clusterT3ChannelEndpoint": {
              "type": "string",
              "value": "[format('{0}://{1}', if(parameters('enableCustomSSL'), 't3s', 't3'), variables('ref_networkDeployment').outputs.clusterT3LBEndpoint)]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'application-gateway-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'initialization')]",
        "[resourceId('Microsoft.Resources/deployments', 'uami-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'setup-wls-cluster')]",
        "[resourceId('Microsoft.Resources/deployments', 'setup-wls-cluster-with-custom-ssl-enabled')]"
      ]
    },
    {
      "condition": "[parameters('enableDB')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "datasource-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "_pidEnd": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2019-10-01').outputs.dbEnd.value]"
          },
          "_pidStart": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'initialization'), '2019-10-01').outputs.dbStart.value]"
          },
          "aksClusterRGName": {
            "value": "[variables('ref_wlsDomainDeployment').outputs.aksClusterRGName]"
          },
          "aksClusterName": {
            "value": "[variables('ref_wlsDomainDeployment').outputs.aksClusterName]"
          },
          "azCliVersion": {
            "value": "[variables('const_azcliVersion')]"
          },
          "databaseType": {
            "value": "[parameters('databaseType')]"
          },
          "dbConfigurationType": {
            "value": "[parameters('dbConfigurationType')]"
          },
          "dbDriverName": {
            "value": "[parameters('dbDriverName')]"
          },
          "dbGlobalTranPro": {
            "value": "[parameters('dbGlobalTranPro')]"
          },
          "dbPassword": {
            "value": "[parameters('dbPassword')]"
          },
          "dbTestTableName": {
            "value": "[parameters('dbTestTableName')]"
          },
          "dbUser": {
            "value": "[parameters('dbUser')]"
          },
          "dsConnectionURL": {
            "value": "[parameters('dsConnectionURL')]"
          },
          "identity": {
            "value": {
              "type": "UserAssigned",
              "userAssignedIdentities": {
                "[reference(resourceId('Microsoft.Resources/deployments', 'uami-deployment'), '2019-10-01').outputs.uamiIdForDeploymentScript.value]": {}
              }
            }
          },
          "jdbcDataSourceName": {
            "value": "[parameters('jdbcDataSourceName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "wlsDomainUID": {
            "value": "[parameters('wlsDomainUID')]"
          },
          "wlsPassword": {
            "value": "[parameters('wlsPassword')]"
          },
          "wlsUserName": {
            "value": "[parameters('wlsUserName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.613.9944",
              "templateHash": "14163396541353195721"
            }
          },
          "parameters": {
            "_artifactsLocation": {
              "type": "string",
              "defaultValue": "[deployment().properties.templateLink.uri]"
            },
            "_artifactsLocationSasToken": {
              "type": "secureString",
              "defaultValue": ""
            },
            "_pidEnd": {
              "type": "string",
              "defaultValue": ""
            },
            "_pidStart": {
              "type": "string",
              "defaultValue": ""
            },
            "aksClusterName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of an existing AKS cluster."
              }
            },
            "aksClusterRGName": {
              "type": "string",
              "defaultValue": ""
            },
            "azCliVersion": {
              "type": "string",
              "defaultValue": ""
            },
            "databaseType": {
              "type": "string",
              "defaultValue": "oracle",
              "metadata": {
                "description": "One of the supported database types"
              }
            },
            "dbConfigurationType": {
              "type": "string",
              "defaultValue": "createOrUpdate",
              "allowedValues": [
                "createOrUpdate",
                "delete"
              ]
            },
            "dbDriverName": {
              "type": "string",
              "defaultValue": "org.contoso.Driver",
              "metadata": {
                "description": "Datasource driver name"
              }
            },
            "dbGlobalTranPro": {
              "type": "string",
              "defaultValue": "EmulateTwoPhaseCommit",
              "metadata": {
                "description": "Determines the transaction protocol (global transaction processing behavior) for the data source."
              }
            },
            "dbPassword": {
              "type": "secureString",
              "defaultValue": "[newGuid()]",
              "metadata": {
                "description": "Password for Database"
              }
            },
            "dbTestTableName": {
              "type": "string",
              "defaultValue": "Null",
              "metadata": {
                "description": "The name of the database table to use when testing physical database connections. This name is required when you specify a Test Frequency and enable Test Reserved Connections."
              }
            },
            "dbUser": {
              "type": "string",
              "defaultValue": "contosoDbUser",
              "metadata": {
                "description": "User id of Database"
              }
            },
            "dsConnectionURL": {
              "type": "string",
              "defaultValue": "jdbc:postgresql://contoso.postgres.database.azure.com:5432/postgres",
              "metadata": {
                "description": "JDBC Connection String"
              }
            },
            "identity": {
              "type": "object",
              "defaultValue": {}
            },
            "jdbcDataSourceName": {
              "type": "string",
              "defaultValue": "jdbc/contoso",
              "metadata": {
                "description": "JNDI Name for JDBC Datasource"
              }
            },
            "location": {
              "type": "string"
            },
            "wlsDomainUID": {
              "type": "string",
              "defaultValue": "sample-domain1",
              "metadata": {
                "description": "UID of WebLogic domain, used in WebLogic Operator."
              }
            },
            "wlsPassword": {
              "type": "secureString"
            },
            "wlsUserName": {
              "type": "string",
              "defaultValue": "weblogic",
              "metadata": {
                "description": "User name for WebLogic Administrator."
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "wls-aks-db-start-pid-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidStart')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "3360241215376299589"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2019-10-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.613.9944",
                              "templateHash": "6023100456016179368"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "This is an empty deployment"
                            }
                          },
                          "functions": [],
                          "resources": [],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "47ea43a0-95cf-52c7-aee8-7ee6106fc1bf"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "01288010-2672-5831-a66b-7b8b45cace1b"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "d7a9c78e-39d9-5a47-928d-8645ed86dafd"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "0cc86800-37f4-5191-9368-2953394309ec"
                    },
                    "dnsEnd": {
                      "type": "string",
                      "value": "754e16bc-4d81-5343-b99b-7532abd6587d"
                    },
                    "dnsStart": {
                      "type": "string",
                      "value": "64ae895c-feb3-529e-8435-5d2e49f94e09"
                    },
                    "lbEnd": {
                      "type": "string",
                      "value": "ce664543-77bd-515a-832e-107e32f99da9"
                    },
                    "lbStart": {
                      "type": "string",
                      "value": "44732bbc-04c4-5df7-a0c6-b9be9ec00ee6"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "2798165c-49fa-5701-b608-b80ed3986176"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "0793308f-de9d-5f0d-92f9-d9fc4b413b8b"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "2571f846-2f66-5c22-9fe6-38ecea7889ac"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "3e6acde5-9a62-5488-9fd4-87c46f4105f4"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "e6e33240-e5db-52fc-9154-7fc7b3b8b508"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4570a81a-3f3a-53d5-b178-7f985d9c5ecf"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "create-update-datasource",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "_artifactsLocation": {
                    "value": "[parameters('_artifactsLocation')]"
                  },
                  "_artifactsLocationSasToken": {
                    "value": "[parameters('_artifactsLocationSasToken')]"
                  },
                  "aksClusterName": {
                    "value": "[parameters('aksClusterName')]"
                  },
                  "aksClusterRGName": {
                    "value": "[parameters('aksClusterRGName')]"
                  },
                  "azCliVersion": {
                    "value": "[parameters('azCliVersion')]"
                  },
                  "databaseType": {
                    "value": "[parameters('databaseType')]"
                  },
                  "dbConfigurationType": {
                    "value": "[parameters('dbConfigurationType')]"
                  },
                  "dbDriverName": {
                    "value": "[parameters('dbDriverName')]"
                  },
                  "dbGlobalTranPro": {
                    "value": "[parameters('dbGlobalTranPro')]"
                  },
                  "dbPassword": {
                    "value": "[parameters('dbPassword')]"
                  },
                  "dbTestTableName": {
                    "value": "[parameters('dbTestTableName')]"
                  },
                  "dbUser": {
                    "value": "[parameters('dbUser')]"
                  },
                  "dsConnectionURL": {
                    "value": "[parameters('dsConnectionURL')]"
                  },
                  "identity": {
                    "value": "[parameters('identity')]"
                  },
                  "jdbcDataSourceName": {
                    "value": "[parameters('jdbcDataSourceName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "wlsDomainUID": {
                    "value": "[parameters('wlsDomainUID')]"
                  },
                  "wlsPassword": {
                    "value": "[parameters('wlsPassword')]"
                  },
                  "wlsUserName": {
                    "value": "[parameters('wlsUserName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "16939044850656461471"
                    }
                  },
                  "parameters": {
                    "_artifactsLocation": {
                      "type": "string",
                      "defaultValue": "[deployment().properties.templateLink.uri]"
                    },
                    "_artifactsLocationSasToken": {
                      "type": "secureString",
                      "defaultValue": ""
                    },
                    "aksClusterName": {
                      "type": "string"
                    },
                    "aksClusterRGName": {
                      "type": "string"
                    },
                    "databaseType": {
                      "type": "string",
                      "defaultValue": "oracle"
                    },
                    "azCliVersion": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "dbConfigurationType": {
                      "type": "string",
                      "defaultValue": "createOrUpdate"
                    },
                    "dbDriverName": {
                      "type": "string",
                      "defaultValue": "org.contoso.Driver"
                    },
                    "dbGlobalTranPro": {
                      "type": "string",
                      "defaultValue": "EmulateTwoPhaseCommit"
                    },
                    "dbPassword": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "dbTestTableName": {
                      "type": "string",
                      "defaultValue": "Null"
                    },
                    "dbUser": {
                      "type": "string"
                    },
                    "dsConnectionURL": {
                      "type": "string"
                    },
                    "identity": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "jdbcDataSourceName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    },
                    "wlsDomainUID": {
                      "type": "string",
                      "defaultValue": "sample-domain1"
                    },
                    "wlsPassword": {
                      "type": "secureString"
                    },
                    "wlsUserName": {
                      "type": "string",
                      "defaultValue": "weblogic",
                      "metadata": {
                        "description": "User name for WebLogic Administrator."
                      }
                    }
                  },
                  "functions": [],
                  "variables": {
                    "const_arguments": "[format('{0} {1} {2} {3} {4} \"{5}\" {6} {7} {8} {9} {10}', parameters('aksClusterRGName'), parameters('aksClusterName'), parameters('databaseType'), parameters('dbPassword'), parameters('dbUser'), parameters('dsConnectionURL'), parameters('jdbcDataSourceName'), parameters('wlsDomainUID'), parameters('wlsUserName'), parameters('wlsPassword'), parameters('dbConfigurationType'))]",
                    "const_commonScript": "common.sh",
                    "const_datasourceScript": "setupDBConnections.sh",
                    "const_datasourceModelScript": "genDatasourceModel.sh",
                    "const_dbUtilityScript": "dbUtility.sh",
                    "const_invokeSetupDBConnectionsScript": "invokeSetupDBConnections.sh",
                    "const_scriptLocation": "[uri(parameters('_artifactsLocation'), 'scripts/')]",
                    "const_utilityScript": "utility.sh"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "ds-wls-db-connection",
                      "location": "[parameters('location')]",
                      "kind": "AzureCLI",
                      "identity": "[parameters('identity')]",
                      "properties": {
                        "azCliVersion": "[parameters('azCliVersion')]",
                        "arguments": "[variables('const_arguments')]",
                        "environmentVariables": [
                          {
                            "name": "DB_DRIVER_NAME",
                            "value": "[parameters('dbDriverName')]"
                          },
                          {
                            "name": "GLOBAL_TRANSATION_PROTOCOL",
                            "value": "[parameters('dbGlobalTranPro')]"
                          },
                          {
                            "name": "TEST_TABLE_NAME",
                            "value": "[parameters('dbTestTableName')]"
                          }
                        ],
                        "primaryScriptUri": "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_invokeSetupDBConnectionsScript'), parameters('_artifactsLocationSasToken')))]",
                        "supportingScriptUris": [
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_datasourceScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_commonScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_utilityScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_dbUtilityScript'), parameters('_artifactsLocationSasToken')))]",
                          "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_datasourceModelScript'), parameters('_artifactsLocationSasToken')))]"
                        ],
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D",
                        "forceUpdateTag": "[parameters('utcValue')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'wls-aks-db-start-pid-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "wls-aks-db-end-pid-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('_pidEnd')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "3360241215376299589"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "pid"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('name'), 'pid'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2019-10-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.613.9944",
                              "templateHash": "6023100456016179368"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "This is an empty deployment"
                            }
                          },
                          "functions": [],
                          "resources": [],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appgwEnd": {
                      "type": "string",
                      "value": "47ea43a0-95cf-52c7-aee8-7ee6106fc1bf"
                    },
                    "appgwStart": {
                      "type": "string",
                      "value": "01288010-2672-5831-a66b-7b8b45cace1b"
                    },
                    "dbEnd": {
                      "type": "string",
                      "value": "d7a9c78e-39d9-5a47-928d-8645ed86dafd"
                    },
                    "dbStart": {
                      "type": "string",
                      "value": "0cc86800-37f4-5191-9368-2953394309ec"
                    },
                    "dnsEnd": {
                      "type": "string",
                      "value": "754e16bc-4d81-5343-b99b-7532abd6587d"
                    },
                    "dnsStart": {
                      "type": "string",
                      "value": "64ae895c-feb3-529e-8435-5d2e49f94e09"
                    },
                    "lbEnd": {
                      "type": "string",
                      "value": "ce664543-77bd-515a-832e-107e32f99da9"
                    },
                    "lbStart": {
                      "type": "string",
                      "value": "44732bbc-04c4-5df7-a0c6-b9be9ec00ee6"
                    },
                    "networkingEnd": {
                      "type": "string",
                      "value": "2798165c-49fa-5701-b608-b80ed3986176"
                    },
                    "networkingStart": {
                      "type": "string",
                      "value": "0793308f-de9d-5f0d-92f9-d9fc4b413b8b"
                    },
                    "wlsAKSEnd": {
                      "type": "string",
                      "value": "2571f846-2f66-5c22-9fe6-38ecea7889ac"
                    },
                    "wlsAKSStart": {
                      "type": "string",
                      "value": "3e6acde5-9a62-5488-9fd4-87c46f4105f4"
                    },
                    "wlsClusterAppEnd": {
                      "type": "string",
                      "value": "e6e33240-e5db-52fc-9154-7fc7b3b8b508"
                    },
                    "wlsClusterAppStart": {
                      "type": "string",
                      "value": "4570a81a-3f3a-53d5-b178-7f985d9c5ecf"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'create-update-datasource')]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'networking-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'initialization')]",
        "[resourceId('Microsoft.Resources/deployments', 'uami-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'setup-wls-cluster')]",
        "[resourceId('Microsoft.Resources/deployments', 'setup-wls-cluster-with-custom-ssl-enabled')]"
      ]
    },
    {
      "condition": "[parameters('validateApplications')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "validate-wls-application-status",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "aksClusterRGName": {
            "value": "[variables('ref_wlsDomainDeployment').outputs.aksClusterRGName]"
          },
          "aksClusterName": {
            "value": "[variables('ref_wlsDomainDeployment').outputs.aksClusterName]"
          },
          "azCliVersion": {
            "value": "[variables('const_azcliVersion')]"
          },
          "identity": {
            "value": {
              "type": "UserAssigned",
              "userAssignedIdentities": {
                "[reference(resourceId('Microsoft.Resources/deployments', 'uami-deployment'), '2019-10-01').outputs.uamiIdForDeploymentScript.value]": {}
              }
            }
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "wlsDomainUID": {
            "value": "[parameters('wlsDomainUID')]"
          },
          "wlsPassword": {
            "value": "[parameters('wlsPassword')]"
          },
          "wlsUserName": {
            "value": "[parameters('wlsUserName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.613.9944",
              "templateHash": "3217118955365209888"
            }
          },
          "parameters": {
            "_artifactsLocation": {
              "type": "string",
              "defaultValue": "[deployment().properties.templateLink.uri]"
            },
            "_artifactsLocationSasToken": {
              "type": "secureString",
              "defaultValue": ""
            },
            "aksClusterRGName": {
              "type": "string",
              "defaultValue": ""
            },
            "aksClusterName": {
              "type": "string",
              "defaultValue": ""
            },
            "azCliVersion": {
              "type": "string",
              "defaultValue": ""
            },
            "identity": {
              "type": "object",
              "defaultValue": {}
            },
            "location": {
              "type": "string"
            },
            "utcValue": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            },
            "wlsDomainUID": {
              "type": "string",
              "defaultValue": "sample-domain1"
            },
            "wlsPassword": {
              "type": "secureString"
            },
            "wlsUserName": {
              "type": "string",
              "defaultValue": "weblogic",
              "metadata": {
                "description": "User name for WebLogic Administrator."
              }
            }
          },
          "functions": [],
          "variables": {
            "const_pyCheckAppStatusScript": "checkApplicationStatus.py",
            "const_scriptLocation": "[uri(parameters('_artifactsLocation'), 'scripts/')]",
            "const_validateAppScript": "validateApplications.sh",
            "const_utilityScript": "utility.sh"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "ds-wls-validate-applications",
              "location": "[parameters('location')]",
              "kind": "AzureCLI",
              "identity": "[parameters('identity')]",
              "properties": {
                "azCliVersion": "[parameters('azCliVersion')]",
                "environmentVariables": [
                  {
                    "name": "AKS_RESOURCE_GROUP_NAME",
                    "value": "[parameters('aksClusterRGName')]"
                  },
                  {
                    "name": "AKS_NAME",
                    "value": "[parameters('aksClusterName')]"
                  },
                  {
                    "name": "WLS_DOMAIN_UID",
                    "value": "[parameters('wlsDomainUID')]"
                  },
                  {
                    "name": "WLS_DOMAIN_USER",
                    "value": "[parameters('wlsUserName')]"
                  },
                  {
                    "name": "WLS_DOMAIN_PASSWORD",
                    "secureValue": "[parameters('wlsPassword')]"
                  }
                ],
                "primaryScriptUri": "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_validateAppScript'), parameters('_artifactsLocationSasToken')))]",
                "supportingScriptUris": [
                  "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_utilityScript'), parameters('_artifactsLocationSasToken')))]",
                  "[uri(variables('const_scriptLocation'), format('{0}{1}', variables('const_pyCheckAppStatusScript'), parameters('_artifactsLocationSasToken')))]"
                ],
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D",
                "forceUpdateTag": "[parameters('utcValue')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'datasource-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'uami-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'setup-wls-cluster')]",
        "[resourceId('Microsoft.Resources/deployments', 'setup-wls-cluster-with-custom-ssl-enabled')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "query-wls-domain-configurations",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aksClusterRGName": {
            "value": "[variables('ref_wlsDomainDeployment').outputs.aksClusterRGName]"
          },
          "aksClusterName": {
            "value": "[variables('ref_wlsDomainDeployment').outputs.aksClusterName]"
          },
          "azCliVersion": {
            "value": "[variables('const_azcliVersion')]"
          },
          "identity": {
            "value": {
              "type": "UserAssigned",
              "userAssignedIdentities": {
                "[reference(resourceId('Microsoft.Resources/deployments', 'uami-deployment'), '2019-10-01').outputs.uamiIdForDeploymentScript.value]": {}
              }
            }
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "wlsClusterName": {
            "value": "[variables('const_wlsClusterName')]"
          },
          "wlsDomainUID": {
            "value": "[parameters('wlsDomainUID')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.613.9944",
              "templateHash": "14987809564943905976"
            }
          },
          "parameters": {
            "aksClusterRGName": {
              "type": "string",
              "defaultValue": ""
            },
            "aksClusterName": {
              "type": "string",
              "defaultValue": ""
            },
            "azCliVersion": {
              "type": "string",
              "defaultValue": ""
            },
            "identity": {
              "type": "object",
              "defaultValue": {}
            },
            "location": {
              "type": "string"
            },
            "utcValue": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            },
            "wlsClusterName": {
              "type": "string",
              "defaultValue": "cluster-1"
            },
            "wlsDomainUID": {
              "type": "string",
              "defaultValue": "sample-domain1"
            }
          },
          "functions": [],
          "variables": {
            "base64_queryDomainConfigurations": "IyBDb3B5cmlnaHQgKGMpIDIwMjEsIE9yYWNsZSBDb3Jwb3JhdGlvbiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXMuCiMgTGljZW5zZWQgdW5kZXIgdGhlIFVuaXZlcnNhbCBQZXJtaXNzaXZlIExpY2Vuc2UgdiAxLjAgYXMgc2hvd24gYXQgaHR0cHM6Ly9vc3Mub3JhY2xlLmNvbS9saWNlbnNlcy91cGwuCiMgVGhpcyBzY3JpcHQgcnVucyBvbiBBenVyZSBDb250YWluZXIgSW5zdGFuY2Ugd2l0aCBBbHBpbmUgTGludXggdGhhdCBBenVyZSBEZXBsb3ltZW50IHNjcmlwdCBjcmVhdGVzLgojCiMgZW52IGlucHV0czoKIyBBS1NfQ0xVU1RFUl9OQU1FCiMgQUtTX0NMVVNURVJfUkVTT1VSQ0VHUk9VUF9OQU1FCiMgV0xTX0NMVVNURVJfTkFNRQojIFdMU19ET01BSU5fVUlECgojIE1haW4gc2NyaXB0Cndsc0NvbnRhaW5lck5hbWU9IndlYmxvZ2ljLXNlcnZlciIKCmVjaG8gImluc3RhbGwga3ViZWN0bCIKYXogYWtzIGluc3RhbGwtY2xpCgplY2hvICJDb25uZWN0IEFLUyIKYXogYWtzIGdldC1jcmVkZW50aWFscyBcCiAgICAtLXJlc291cmNlLWdyb3VwICR7QUtTX0NMVVNURVJfUkVTT1VSQ0VHUk9VUF9OQU1FfSBcCiAgICAtLW5hbWUgJHtBS1NfQ0xVU1RFUl9OQU1FfSBcCiAgICAtLW92ZXJ3cml0ZS1leGlzdGluZwoKd2xzRG9tYWluTlM9IiR7V0xTX0RPTUFJTl9VSUR9LW5zIgoKZG9tYWluQ29uZmlndXJhdGlvbllhbWw9L3RtcC9kb21haW4ueWFtbApybSAtZiAke2RvbWFpbkNvbmZpZ3VyYXRpb25ZYW1sfQprdWJlY3RsIGdldCBkb21haW4gJHtXTFNfRE9NQUlOX1VJRH0gLW4gJHt3bHNEb21haW5OU30gLW8geWFtbCA+JHtkb21haW5Db25maWd1cmF0aW9uWWFtbH0KCnBvZE51bT0kKGt1YmVjdGwgLW4gJHt3bHNEb21haW5OU30gZ2V0IHBvZCAtbCB3ZWJsb2dpYy5jbHVzdGVyTmFtZT0ke1dMU19DTFVTVEVSX05BTUV9IC1vIGpzb24gfCBqcSAnLml0ZW1zfCBsZW5ndGgnKQogICAgaWYgWyAke3BvZE51bX0gLWxlIDAgXTsgdGhlbgogICAgICAgIGVjaG9fc3RkZXJyICJFbnN1cmUgeW91ciBjbHVzdGVyIGhhcyBhdCBsZWFzdCBvbmUgcG9kLiIKICAgICAgICBleGl0IDEKICAgIGZpCgpwb2ROYW1lPSQoa3ViZWN0bCAtbiAke3dsc0RvbWFpbk5TfSBnZXQgcG9kIC1sIHdlYmxvZ2ljLmNsdXN0ZXJOYW1lPSR7V0xTX0NMVVNURVJfTkFNRX0gLW8ganNvbiBcCiAgICB8IGpxICcuaXRlbXNbMF0gfCAubWV0YWRhdGEubmFtZScgXAogICAgfCB0ciAtZCAiXCIiKQoKZWNobyAiQ29weSBtb2RlbC55YW1sIGZyb20gL3UwMS93ZHQvbW9kZWxzIgp0YXJnZXRNb2RlbFlhbWw9L3RtcC9tb2RlbC55YW1sCnJtIC1mICR7dGFyZ2V0TW9kZWxZYW1sfQprdWJlY3RsIGNwIC1uICR7d2xzRG9tYWluTlN9IC1jICR7d2xzQ29udGFpbmVyTmFtZX0gJHtwb2ROYW1lfTovdTAxL3dkdC9tb2RlbHMvbW9kZWwueWFtbCAke3RhcmdldE1vZGVsWWFtbH0KaWYgWyAkPyAhPSAwIF07IHRoZW4KICAgIGVjaG8gPiYyICJGYWlsIHRvIGNvcHkgJHtwb2ROYW1lfTovdTAxL3dkdC9tb2RlbHMvbW9kZWwueWFtbC4iCiAgICBleGl0IDEKZmkKCmVjaG8gIkNvcHkgbW9kZWwucHJvcGVydGllcyBmcm9tIGZyb20gL3UwMS93ZHQvbW9kZWxzIgp0YXJnZXRNb2RlbFByb3BlcnRpZXM9L3RtcC9tb2RlbC5wcm9wZXJ0aWVzCnJtIC1mICR7dGFyZ2V0TW9kZWxQcm9wZXJ0aWVzfQprdWJlY3RsIGNwIC1uICR7d2xzRG9tYWluTlN9IC1jICR7d2xzQ29udGFpbmVyTmFtZX0gJHtwb2ROYW1lfTovdTAxL3dkdC9tb2RlbHMvbW9kZWwucHJvcGVydGllcyAke3RhcmdldE1vZGVsUHJvcGVydGllc30KaWYgWyAkPyAhPSAwIF07IHRoZW4KICAgIGVjaG8gPiYyICJGYWlsIHRvIGNvcHkgJHtwb2ROYW1lfTovdTAxL3dkdC9tb2RlbHMvbW9kZWwucHJvcGVydGllcy4iCiAgICBleGl0IDEKZmkKCmVjaG8gIlF1ZXJ5IFdlYkxvZ2ljIHZlcnNpb24gYW5kIHBhdGNoIG51bWJlcnMiCnRhcmdldEZpbGU0VmVyc2lvbnM9L3RtcC92ZXJzaW9uLmluZm8Ka3ViZWN0bCBleGVjIC1pdCAke3BvZE5hbWV9IC1uICR7d2xzRG9tYWluTlN9IC1jICR7d2xzQ29udGFpbmVyTmFtZX0gXAogICAgLS0gYmFzaCAtYyAnc291cmNlICRPUkFDTEVfSE9NRS93bHNlcnZlci9zZXJ2ZXIvYmluL3NldFdMU0Vudi5zaCA+IC9kZXYvbnVsbCAyPiYxICYmIGphdmEgd2VibG9naWMudmVyc2lvbiAtdmVyYm9zZSA+Iicke3RhcmdldEZpbGU0VmVyc2lvbnN9JyInCmlmIFsgJD8gIT0gMCBdOyB0aGVuCiAgICBlY2hvID4mMiAiRmFpbCB0byBydW4gamF2YSB3ZWJsb2dpYy52ZXJzaW9uLiIKICAgIGV4aXQgMQpmaQpybSAtZiAke3RhcmdldEZpbGU0VmVyc2lvbnN9Cmt1YmVjdGwgY3AgLW4gJHt3bHNEb21haW5OU30gLWMgJHt3bHNDb250YWluZXJOYW1lfSAke3BvZE5hbWV9OiR7dGFyZ2V0RmlsZTRWZXJzaW9uc30gJHt0YXJnZXRGaWxlNFZlcnNpb25zfQppZiBbICQ/ICE9IDAgXTsgdGhlbgogICAgZWNobyA+JjIgIkZhaWwgdG8gY29weSAke3BvZE5hbWV9OiR7dGFyZ2V0RmlsZTRWZXJzaW9uc30uIgogICAgZXhpdCAxCmZpCgpiYXNlNjRvZkRvbWFpbllhbWw9JChjYXQgJHtkb21haW5Db25maWd1cmF0aW9uWWFtbH0gfCBiYXNlNjQpCmJhc2U2NG9mTW9kZWxZYW1sPSQoY2F0ICR7dGFyZ2V0TW9kZWxZYW1sfSB8IGJhc2U2NCkKYmFzZTY0b2ZNb2RlbFByb3BlcnRpZXM9JChjYXQgJHt0YXJnZXRNb2RlbFByb3BlcnRpZXN9IHwgYmFzZTY0KQpiYXNlNjRvZldMU1ZlcnNpb25EZXRhaWxzPSQoY2F0ICR7dGFyZ2V0RmlsZTRWZXJzaW9uc30gfCBiYXNlNjQpCgpyZXN1bHQ9JChqcSAtbiAtYyBcCiAgICAtLWFyZyBkb21haW5EZXBsb3ltZW50WWFtbCAiJGJhc2U2NG9mRG9tYWluWWFtbCIgXAogICAgLS1hcmcgd2xzSW1hZ2VNb2RlbFlhbWwgIiRiYXNlNjRvZk1vZGVsWWFtbCIgXAogICAgLS1hcmcgd2xzSW1hZ2VQcm9wZXJ0aWVzICIkYmFzZTY0b2ZNb2RlbFByb3BlcnRpZXMiIFwKICAgIC0tYXJnIHdsc1ZlcnNpb25EZXRhaWxzICIke2Jhc2U2NG9mV0xTVmVyc2lvbkRldGFpbHN9IiBcCiAgICAne2RvbWFpbkRlcGxveW1lbnRZYW1sOiAkZG9tYWluRGVwbG95bWVudFlhbWwsIHdsc0ltYWdlTW9kZWxZYW1sOiAkd2xzSW1hZ2VNb2RlbFlhbWwsIHdsc0ltYWdlUHJvcGVydGllczogJHdsc0ltYWdlUHJvcGVydGllcywgd2xzVmVyc2lvbkRldGFpbHM6ICR3bHNWZXJzaW9uRGV0YWlsc30nKQplY2hvICJyZXN1bHQgaXM6ICRyZXN1bHQiCmVjaG8gJHJlc3VsdCA+JEFaX1NDUklQVFNfT1VUUFVUX1BBVEgK"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "ds-query-wls-configurations",
              "location": "[parameters('location')]",
              "kind": "AzureCLI",
              "identity": "[parameters('identity')]",
              "properties": {
                "azCliVersion": "[parameters('azCliVersion')]",
                "environmentVariables": [
                  {
                    "name": "AKS_CLUSTER_RESOURCEGROUP_NAME",
                    "value": "[parameters('aksClusterRGName')]"
                  },
                  {
                    "name": "AKS_CLUSTER_NAME",
                    "value": "[parameters('aksClusterName')]"
                  },
                  {
                    "name": "WLS_CLUSTER_NAME",
                    "value": "[parameters('wlsClusterName')]"
                  },
                  {
                    "name": "WLS_DOMAIN_UID",
                    "value": "[parameters('wlsDomainUID')]"
                  }
                ],
                "scriptContent": "[base64ToString(variables('base64_queryDomainConfigurations'))]",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D",
                "forceUpdateTag": "[parameters('utcValue')]"
              }
            }
          ],
          "outputs": {
            "shellCmdtoOutputWlsDomainYaml": {
              "type": "string",
              "value": "[format('echo -e {0} | base64 -d > domain.yaml', reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-query-wls-configurations')).outputs.domainDeploymentYaml)]"
            },
            "shellCmdtoOutputWlsImageModelYaml": {
              "type": "string",
              "value": "[format('echo -e {0} | base64 -d > model.yaml', reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-query-wls-configurations')).outputs.wlsImageModelYaml)]"
            },
            "shellCmdtoOutputWlsImageProperties": {
              "type": "string",
              "value": "[format('echo -e {0} | base64 -d > model.properties', reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-query-wls-configurations')).outputs.wlsImageProperties)]"
            },
            "shellCmdtoOutputWlsVersions": {
              "type": "string",
              "value": "[format('echo -e {0} | base64 -d > version.info', reference(resourceId('Microsoft.Resources/deploymentScripts', 'ds-query-wls-configurations')).outputs.wlsVersionDetails)]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'uami-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'validate-wls-application-status')]",
        "[resourceId('Microsoft.Resources/deployments', 'setup-wls-cluster')]",
        "[resourceId('Microsoft.Resources/deployments', 'setup-wls-cluster-with-custom-ssl-enabled')]"
      ]
    }
  ],
  "outputs": {
    "aksClusterName": {
      "type": "string",
      "value": "[variables('ref_wlsDomainDeployment').outputs.aksClusterName]"
    },
    "adminConsoleInternalUrl": {
      "type": "string",
      "value": "[variables('ref_wlsDomainDeployment').outputs.adminServerEndpoint]"
    },
    "adminConsoleExternalUrl": {
      "type": "string",
      "value": "[if(variables('const_showAdminConsoleExUrl'), reference(resourceId('Microsoft.Resources/deployments', 'networking-deployment'), '2019-10-01').outputs.adminConsoleExternalEndpoint.value, '')]"
    },
    "adminConsoleExternalSecuredUrl": {
      "type": "string",
      "value": "[if(variables('const_showAdminConsoleExUrl'), reference(resourceId('Microsoft.Resources/deployments', 'networking-deployment'), '2019-10-01').outputs.adminConsoleExternalSecuredEndpoint.value, '')]"
    },
    "adminRemoteConsoleUrl": {
      "type": "string",
      "value": "[if(variables('const_showRemoteAdminConsoleExUrl'), reference(resourceId('Microsoft.Resources/deployments', 'networking-deployment'), '2019-10-01').outputs.adminRemoteConsoleEndpoint.value, '')]"
    },
    "adminRemoteConsoleSecuredUrl": {
      "type": "string",
      "value": "[if(variables('const_showRemoteAdminConsoleSecuredExUrl'), reference(resourceId('Microsoft.Resources/deployments', 'networking-deployment'), '2019-10-01').outputs.adminRemoteConsoleSecuredEndpoint.value, '')]"
    },
    "adminServerT3InternalUrl": {
      "type": "string",
      "value": "[variables('ref_wlsDomainDeployment').outputs.adminServerT3InternalEndpoint]"
    },
    "adminServerT3ExternalUrl": {
      "type": "string",
      "value": "[if(and(parameters('enableAdminT3Tunneling'), variables('const_enableNetworking')), reference(resourceId('Microsoft.Resources/deployments', 'networking-deployment'), '2019-10-01').outputs.adminServerT3ChannelEndpoint.value, '')]"
    },
    "clusterInternalUrl": {
      "type": "string",
      "value": "[variables('ref_wlsDomainDeployment').outputs.clusterEndpoint]"
    },
    "clusterExternalUrl": {
      "type": "string",
      "value": "[if(variables('const_enableNetworking'), reference(resourceId('Microsoft.Resources/deployments', 'networking-deployment'), '2019-10-01').outputs.clusterExternalEndpoint.value, '')]"
    },
    "clusterExternalSecuredUrl": {
      "type": "string",
      "value": "[if(variables('const_enableNetworking'), reference(resourceId('Microsoft.Resources/deployments', 'networking-deployment'), '2019-10-01').outputs.clusterExternalSecuredEndpoint.value, '')]"
    },
    "clusterT3InternalUrl": {
      "type": "string",
      "value": "[variables('ref_wlsDomainDeployment').outputs.clusterT3InternalEndpoint]"
    },
    "clusterT3ExternalEndpoint": {
      "type": "string",
      "value": "[if(and(parameters('enableClusterT3Tunneling'), variables('const_enableNetworking')), reference(resourceId('Microsoft.Resources/deployments', 'networking-deployment'), '2019-10-01').outputs.clusterT3ChannelEndpoint.value, '')]"
    },
    "shellCmdtoConnectAks": {
      "type": "string",
      "value": "[format('az account set --subscription {0}; az aks get-credentials --resource-group {1} --name {2}', split(subscription().id, '/')[2], variables('ref_wlsDomainDeployment').outputs.aksClusterRGName, variables('ref_wlsDomainDeployment').outputs.aksClusterName)]"
    },
    "shellCmdtoOutputWlsDomainYaml": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'query-wls-domain-configurations'), '2019-10-01').outputs.shellCmdtoOutputWlsDomainYaml.value]"
    },
    "shellCmdtoOutputWlsImageModelYaml": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'query-wls-domain-configurations'), '2019-10-01').outputs.shellCmdtoOutputWlsImageModelYaml.value]"
    },
    "shellCmdtoOutputWlsImageProperties": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'query-wls-domain-configurations'), '2019-10-01').outputs.shellCmdtoOutputWlsImageProperties.value]"
    },
    "shellCmdtoOutputWlsVersionsandPatches": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'query-wls-domain-configurations'), '2019-10-01').outputs.shellCmdtoOutputWlsVersions.value]"
    }
  }
}