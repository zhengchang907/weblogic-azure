{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "identity": {
            "type": "object",
            "metadata": {
                "description": "Managed identity to be used for the deployment script. Currently, only user-assigned MSI is supported."
            }
        },
        "keyvaultName": {
            "type": "string",
            "defaultValue": "[concat('wls-kv-', uniqueString(resourceGroup().id, deployment().name))]",
            "metadata": {
                "description": "Used to name the new Azure Key Vault resoure."
            }
        },
        "location": {
            "type": "string",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "permission": {
            "type": "object",
            "defaultValue": {
                "certificates": [
                    "get",
                    "list",
                    "update",
                    "create"
                ]
            },
            "metadata": {
                "description": "Access permission of the key vault, will applied to all access policies."
            }
        },
        "secretName": {
            "type": "string",
            "defaultValue": "mySelfSignedCertificate",
            "metadata": {
                "description": "Used to name the new certificate resource."
            }
        },
        "sku": {
            "type": "string",
            "metadata": {
                "description": "Price tier for Key Vault."
            },
            "defaultValue": "Standard"
        },
        "subjectName": {
            "type": "string",
            "metadata": {
                "description": "Subject name to create a new certificate, example: 'CN=contoso.com'."
            }
        },
        "utcValue": {
            "type": "string",
            "defaultValue": "[utcNow()]"
        }
    },
    "functions": [
        {
            "namespace": "identity",
            "members": {
                "getId": {
                    "parameters": [
                        {
                            "name": "items",
                            "type": "object"
                        }
                    ],
                    "output": {
                        "type": "string",
                        "value": "[if(empty(parameters('items').userAssignedIdentities), '', substring(string(parameters('items').userAssignedIdentities),add(indexOf(string(parameters('items').userAssignedIdentities),'\"'),1),sub(lastIndexOf(string(parameters('items').userAssignedIdentities), '\"'),add(indexOf(string(parameters('items').userAssignedIdentities),'\"'),1))))]"
                    }
                }
            }
        }
    ],
    "variables": {
    },
    "resources": [
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2019-09-01",
            "name": "[parameters('keyvaultName')]",
            "location": "[parameters('location')]",
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "[parameters('sku')]"
                },
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": [
                    {
                        "objectId": "[reference(string(identity.getId(parameters('identity'))), '2018-11-30').principalId]",
                        "tenantId": "[subscription().tenantId]",
                        "permissions": "[parameters('permission')]"
                    }
                ],
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": true,
                "enableSoftDelete": true
            }
        },
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2020-10-01",
            "name": "script-createAddCertificate",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
            ],
            "identity": "[parameters('identity')]",
            "kind": "AzurePowerShell",
            "properties": {
                "forceUpdateTag": "[parameters('utcValue')]",
                "azPowerShellVersion": "5.0",
                "timeout": "PT30M",
                "arguments": "[format(' -vaultName {0} -certificateName {1} -subjectName {2}', parameters('keyvaultName'), parameters('secretName'), parameters('subjectName'))]",
                "scriptContent": "
                    param(
                        [string] [Parameter(Mandatory=$true)] $vaultName,
                        [string] [Parameter(Mandatory=$true)] $certificateName,
                        [string] [Parameter(Mandatory=$true)] $subjectName
                    )

                    $ErrorActionPreference = 'Stop'
                    $DeploymentScriptOutputs = @{}

                    $existingCert = Get-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName

                    if ($existingCert -and $existingCert.Certificate.Subject -eq $subjectName) {

                        Write-Host 'Certificate $certificateName in vault $vaultName is already present.'

                        $DeploymentScriptOutputs['certThumbprint'] = $existingCert.Thumbprint
                        $existingCert | Out-String
                    }
                    else {
                        $policy = New-AzKeyVaultCertificatePolicy -SubjectName $subjectName -IssuerName Self -ValidityInMonths 12 -Verbose

                        # private key is added as a secret that can be retrieved in the ARM template
                        Add-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName -CertificatePolicy $policy -Verbose

                        $newCert = Get-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName

                        # it takes a few seconds for KeyVault to finish
                        $tries = 0
                        do {
                        Write-Host 'Waiting for certificate creation completion...'
                        Start-Sleep -Seconds 10
                        $operation = Get-AzKeyVaultCertificateOperation -VaultName $vaultName -Name $certificateName
                        $tries++

                        if ($operation.Status -eq 'failed')
                        {
                            throw 'Creating certificate $certificateName in vault $vaultName failed with error $($operation.ErrorMessage)'
                        }

                        if ($tries -gt 120)
                        {
                            throw 'Timed out waiting for creation of certificate $certificateName in vault $vaultName'
                        }
                        } while ($operation.Status -ne 'completed')

                        $DeploymentScriptOutputs['certThumbprint'] = $newCert.Thumbprint
                        $newCert | Out-String
                    }
                ",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            }
        }
    ],
    "outputs": {
        "keyvaultName": {
            "type": "string",
            "value": "[parameters('keyvaultName')]"
        },
        "secretName": {
            "type": "string",
            "value": "[parameters('secretName')]"
        }
    }
}
